
Bricks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010730  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080109d0  080109d0  000209d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010abc  08010abc  00020abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010ac4  08010ac4  00020ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010ac8  08010ac8  00020ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b4  24000000  08010acc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000166c  240000b4  08010b80  000300b4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001720  08010b80  00031720  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300e2  2**0
                  CONTENTS, READONLY
 11 .debug_info   00034743  00000000  00000000  00030125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000605f  00000000  00000000  00064868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002740  00000000  00000000  0006a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001eb1  00000000  00000000  0006d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00042549  00000000  00000000  0006eeb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00037808  00000000  00000000  000b1402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a9671  00000000  00000000  000e8c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000ad5c  00000000  00000000  0029227c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000079  00000000  00000000  0029cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000b4 	.word	0x240000b4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080109b8 	.word	0x080109b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000b8 	.word	0x240000b8
 80002dc:	080109b8 	.word	0x080109b8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <Init_TIM3>:
/*
 * Init and start TIM3 in Interrupt mode
 *
 * */

HAL_StatusTypeDef Init_TIM3(TIM_HandleTypeDef* TIMHandle) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b092      	sub	sp, #72	; 0x48
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

	RCC_ClkInitTypeDef    clkconfig;
	volatile uint32_t uwTimclock = 0U;
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint32_t uwPrescalerValue = 0U;
 80005e8:	2300      	movs	r3, #0
 80005ea:	623b      	str	r3, [r7, #32]
	volatile uint32_t uwAPB1Prescaler = 0U;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
	volatile uint32_t HCLKFreq;
	volatile uint32_t APB1Freq;
	volatile uint32_t APB2Freq;

	/*Configure the TIM3 IRQ priority */
	HAL_NVIC_SetPriority(TIM3_IRQn, TICK_INT_PRIORITY, 0U);
 80005f0:	2200      	movs	r2, #0
 80005f2:	210f      	movs	r1, #15
 80005f4:	201d      	movs	r0, #29
 80005f6:	f005 ff82 	bl	80064fe <HAL_NVIC_SetPriority>
	/* Enable the TIM3 global Interrupt */
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80005fa:	201d      	movs	r0, #29
 80005fc:	f005 ff99 	bl	8006532 <HAL_NVIC_EnableIRQ>
	/* Enable TIM6 clock */
	__HAL_RCC_TIM3_CLK_ENABLE();
 8000600:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <Init_TIM3+0xc4>)
 8000602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000606:	4a26      	ldr	r2, [pc, #152]	; (80006a0 <Init_TIM3+0xc4>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000610:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <Init_TIM3+0xc4>)
 8000612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]

	// Find out the TIM3 CLK frequency:
    SysClockFreq = HAL_RCC_GetSysClockFreq();
 800061e:	f00a ffbb 	bl	800b598 <HAL_RCC_GetSysClockFreq>
 8000622:	4603      	mov	r3, r0
 8000624:	61bb      	str	r3, [r7, #24]
	HCLKFreq = HAL_RCC_GetHCLKFreq();
 8000626:	f00b f931 	bl	800b88c <HAL_RCC_GetHCLKFreq>
 800062a:	4603      	mov	r3, r0
 800062c:	617b      	str	r3, [r7, #20]
	APB1Freq = HAL_RCC_GetPCLK1Freq();
 800062e:	f00b f95d 	bl	800b8ec <HAL_RCC_GetPCLK1Freq>
 8000632:	4603      	mov	r3, r0
 8000634:	613b      	str	r3, [r7, #16]
	//APB2Freq = HAL_RCC_GetPCLK2Freq();
	/* Get APB1 prescaler */
	uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000638:	61fb      	str	r3, [r7, #28]
	/* Compute TIMERs clock */
	if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <Init_TIM3+0x6a>
	{
		uwTimclock = APB1Freq; // if PPRE1 bits in RCC_CFGR are 0XX (APB1 Prescaler = 1), then TIMs run at APB1 clk)
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
 8000644:	e002      	b.n	800064c <Init_TIM3+0x70>
	}
	else
	{
	  uwTimclock = 2*APB1Freq; // if PPRE1 bits in RCC_CFGR are 1XX (APB1 Prescaler > 1), then TIMs run at 2*APB1 clk)
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Compute the prescaler value to have TIM3 counter clock equal to 1 MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064e:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <Init_TIM3+0xc8>)
 8000650:	fba2 2303 	umull	r2, r3, r2, r3
 8000654:	0c9b      	lsrs	r3, r3, #18
 8000656:	3b01      	subs	r3, #1
 8000658:	623b      	str	r3, [r7, #32]
	/* Initialize TIM3 */
	TIMHandle->Instance = TIM3;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <Init_TIM3+0xcc>)
 800065e:	601a      	str	r2, [r3, #0]
	TIMHandle->Init.Period = 65535U;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000666:	60da      	str	r2, [r3, #12]
	TIMHandle->Init.Prescaler = uwPrescalerValue;
 8000668:	6a3a      	ldr	r2, [r7, #32]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	605a      	str	r2, [r3, #4]
	TIMHandle->Init.ClockDivision = 0;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
	TIMHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
	TIMHandle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

	if(HAL_TIM_Base_Init(TIMHandle) == HAL_OK)
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f00d f956 	bl	800d932 <HAL_TIM_Base_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d104      	bne.n	8000696 <Init_TIM3+0xba>
	{
		/* Start the TIM time Base generation in interrupt mode */
		//return HAL_TIM_Base_Start_IT(TIMHandle);
		return HAL_TIM_Base_Start(TIMHandle);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f00d f9b1 	bl	800d9f4 <HAL_TIM_Base_Start>
 8000692:	4603      	mov	r3, r0
 8000694:	e000      	b.n	8000698 <Init_TIM3+0xbc>
	}
	/* Return function status */
	return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
}
 8000698:	4618      	mov	r0, r3
 800069a:	3748      	adds	r7, #72	; 0x48
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	58024400 	.word	0x58024400
 80006a4:	431bde83 	.word	0x431bde83
 80006a8:	40000400 	.word	0x40000400

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08e      	sub	sp, #56	; 0x38
 80006b0:	af02      	add	r7, sp, #8
           duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
           handled in milliseconds basis.
         - Set NVIC Group Priority to 4
         - Low Level Initialization
  */
  HAL_Init();
 80006b2:	f005 fd53 	bl	800615c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 80006b6:	f001 fef3 	bl	80024a0 <SystemClock_Config>

  /* USER CODE BEGIN 2 */
  /* When system initialization is finished, Cortex-M7 could wakeup (when needed) the Cortex-M4  by means of
        HSEM notification or by any D2 wakeup source (SEV,EXTI..)   */

  BSP_LED_Init(LED_GREEN);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f003 fb54 	bl	8003d68 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f003 fb51 	bl	8003d68 <BSP_LED_Init>

  BSP_LED_Off(LED_GREEN);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f003 fbca 	bl	8003e60 <BSP_LED_Off>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2108      	movs	r1, #8
 80006d0:	48c9      	ldr	r0, [pc, #804]	; (80009f8 <main+0x34c>)
 80006d2:	f008 fd4f 	bl	8009174 <HAL_GPIO_WritePin>

  /* Configure the User push-button in EXTI Mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006d6:	2101      	movs	r1, #1
 80006d8:	2000      	movs	r0, #0
 80006da:	f003 fbdf 	bl	8003e9c <BSP_PB_Init>

  /* Configure TIM3 timebase */
  Init_TIM3(&TIM3Handle);
 80006de:	48c7      	ldr	r0, [pc, #796]	; (80009fc <main+0x350>)
 80006e0:	f7ff ff7c 	bl	80005dc <Init_TIM3>

  /* Init UART3*/
  if (USART3_Init(&UART3Handle) != HAL_OK){
 80006e4:	48c6      	ldr	r0, [pc, #792]	; (8000a00 <main+0x354>)
 80006e6:	f002 fe7f 	bl	80033e8 <USART3_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <main+0x48>
	  Error_Handler();
 80006f0:	f002 f8ee 	bl	80028d0 <Error_Handler>
  }
  RetargetInit(&UART3Handle);
 80006f4:	48c2      	ldr	r0, [pc, #776]	; (8000a00 <main+0x354>)
 80006f6:	f002 f8f3 	bl	80028e0 <RetargetInit>

  BSP_LCD_Init(0, LCD_ORIENTATION_PORTRAIT);
 80006fa:	2100      	movs	r1, #0
 80006fc:	2000      	movs	r0, #0
 80006fe:	f004 fa77 	bl	8004bf0 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8000702:	48c0      	ldr	r0, [pc, #768]	; (8000a04 <main+0x358>)
 8000704:	f002 f99c 	bl	8002a40 <UTIL_LCD_SetFuncDriver>

  ball_x = 330;
 8000708:	4bbf      	ldr	r3, [pc, #764]	; (8000a08 <main+0x35c>)
 800070a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800070e:	801a      	strh	r2, [r3, #0]
  ball_y = 272 / 2;
 8000710:	4bbe      	ldr	r3, [pc, #760]	; (8000a0c <main+0x360>)
 8000712:	2288      	movs	r2, #136	; 0x88
 8000714:	801a      	strh	r2, [r3, #0]
  ball_dx = -3;
 8000716:	4bbe      	ldr	r3, [pc, #760]	; (8000a10 <main+0x364>)
 8000718:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800071c:	801a      	strh	r2, [r3, #0]
  ball_dy = 3;
 800071e:	4bbd      	ldr	r3, [pc, #756]	; (8000a14 <main+0x368>)
 8000720:	2203      	movs	r2, #3
 8000722:	801a      	strh	r2, [r3, #0]

  //memset(bricks, 1, sizeof(bricks));

  TS_Init_t hTS;
  BSP_LCD_GetXSize(0, &x_size);
 8000724:	49bc      	ldr	r1, [pc, #752]	; (8000a18 <main+0x36c>)
 8000726:	2000      	movs	r0, #0
 8000728:	f004 fc3e 	bl	8004fa8 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800072c:	49bb      	ldr	r1, [pc, #748]	; (8000a1c <main+0x370>)
 800072e:	2000      	movs	r0, #0
 8000730:	f004 fc58 	bl	8004fe4 <BSP_LCD_GetYSize>

  hTS.Width = x_size;
 8000734:	4bb8      	ldr	r3, [pc, #736]	; (8000a18 <main+0x36c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	613b      	str	r3, [r7, #16]
  hTS.Height = y_size;
 800073a:	4bb8      	ldr	r3, [pc, #736]	; (8000a1c <main+0x370>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	617b      	str	r3, [r7, #20]
  hTS.Orientation = TS_SWAP_XY;
 8000740:	2308      	movs	r3, #8
 8000742:	61bb      	str	r3, [r7, #24]
  hTS.Accuracy = 5;
 8000744:	2305      	movs	r3, #5
 8000746:	61fb      	str	r3, [r7, #28]

  uint16_t y = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t x = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t last_y = -1;
 8000750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000754:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int rowsSelected = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28


  uint32_t ts_status = BSP_TS_Init(0, &hTS);
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4619      	mov	r1, r3
 8000760:	2000      	movs	r0, #0
 8000762:	f005 fadd 	bl	8005d20 <BSP_TS_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	623b      	str	r3, [r7, #32]
  if(ts_status != BSP_ERROR_NONE) {
 800076a:	6a3b      	ldr	r3, [r7, #32]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <main+0xc8>
    Error_Handler();
 8000770:	f002 f8ae 	bl	80028d0 <Error_Handler>
  }

  rowsSelected = Display_InitialContent();
 8000774:	f001 f82c 	bl	80017d0 <Display_InitialContent>
 8000778:	62b8      	str	r0, [r7, #40]	; 0x28
  TS_State_t TS_State;

  while (1){
      	ts_status = BSP_TS_GetState(0, &TS_State);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	2000      	movs	r0, #0
 8000780:	f005 fb74 	bl	8005e6c <BSP_TS_GetState>
 8000784:	4603      	mov	r3, r0
 8000786:	623b      	str	r3, [r7, #32]

		UpdateBallPosition(rowsSelected);
 8000788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800078a:	f001 ff1f 	bl	80025cc <UpdateBallPosition>


		if(bricksBroken == 5*rowsSelected){
 800078e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000790:	4613      	mov	r3, r2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	4413      	add	r3, r2
 8000796:	4aa2      	ldr	r2, [pc, #648]	; (8000a20 <main+0x374>)
 8000798:	6812      	ldr	r2, [r2, #0]
 800079a:	4293      	cmp	r3, r2
 800079c:	f040 83be 	bne.w	8000f1c <main+0x870>
			while(1){
				 UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 80007a0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80007a4:	f002 f9b6 	bl	8002b14 <UTIL_LCD_SetBackColor>
				 UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80007a8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80007ac:	f002 fa30 	bl	8002c10 <UTIL_LCD_Clear>

				 //G
				 UTIL_LCD_FillRect(350, 44, 80,8, UTIL_LCD_COLOR_RED);
 80007b0:	4b9c      	ldr	r3, [pc, #624]	; (8000a24 <main+0x378>)
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2308      	movs	r3, #8
 80007b6:	2250      	movs	r2, #80	; 0x50
 80007b8:	212c      	movs	r1, #44	; 0x2c
 80007ba:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80007be:	f002 fb47 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(350, 44, 8,40, UTIL_LCD_COLOR_RED);
 80007c2:	4b98      	ldr	r3, [pc, #608]	; (8000a24 <main+0x378>)
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2328      	movs	r3, #40	; 0x28
 80007c8:	2208      	movs	r2, #8
 80007ca:	212c      	movs	r1, #44	; 0x2c
 80007cc:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80007d0:	f002 fb3e 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(390-4, 62, 8, 22, UTIL_LCD_COLOR_RED);
 80007d4:	4b93      	ldr	r3, [pc, #588]	; (8000a24 <main+0x378>)
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2316      	movs	r3, #22
 80007da:	2208      	movs	r2, #8
 80007dc:	213e      	movs	r1, #62	; 0x3e
 80007de:	f44f 70c1 	mov.w	r0, #386	; 0x182
 80007e2:	f002 fb35 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-8, 44, 8, 40, UTIL_LCD_COLOR_RED);
 80007e6:	4b8f      	ldr	r3, [pc, #572]	; (8000a24 <main+0x378>)
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2328      	movs	r3, #40	; 0x28
 80007ec:	2208      	movs	r2, #8
 80007ee:	212c      	movs	r1, #44	; 0x2c
 80007f0:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 80007f4:	f002 fb2c 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(350, 44+40-8, 40,8, UTIL_LCD_COLOR_RED);
 80007f8:	4b8a      	ldr	r3, [pc, #552]	; (8000a24 <main+0x378>)
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2308      	movs	r3, #8
 80007fe:	2228      	movs	r2, #40	; 0x28
 8000800:	214c      	movs	r1, #76	; 0x4c
 8000802:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000806:	f002 fb23 	bl	8002e50 <UTIL_LCD_FillRect>


				 //A
				 UTIL_LCD_FillRect(350, 44+40-8+48, 40,8, UTIL_LCD_COLOR_RED);
 800080a:	4b86      	ldr	r3, [pc, #536]	; (8000a24 <main+0x378>)
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2308      	movs	r3, #8
 8000810:	2228      	movs	r2, #40	; 0x28
 8000812:	217c      	movs	r1, #124	; 0x7c
 8000814:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000818:	f002 fb1a 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(350, 44+48, 40,8, UTIL_LCD_COLOR_RED);
 800081c:	4b81      	ldr	r3, [pc, #516]	; (8000a24 <main+0x378>)
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2308      	movs	r3, #8
 8000822:	2228      	movs	r2, #40	; 0x28
 8000824:	215c      	movs	r1, #92	; 0x5c
 8000826:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800082a:	f002 fb11 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(390-4, 44+48, 8, 40, UTIL_LCD_COLOR_RED);
 800082e:	4b7d      	ldr	r3, [pc, #500]	; (8000a24 <main+0x378>)
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2328      	movs	r3, #40	; 0x28
 8000834:	2208      	movs	r2, #8
 8000836:	215c      	movs	r1, #92	; 0x5c
 8000838:	f44f 70c1 	mov.w	r0, #386	; 0x182
 800083c:	f002 fb08 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(390+4, 44+48, 12, 8, UTIL_LCD_COLOR_RED);
 8000840:	4b78      	ldr	r3, [pc, #480]	; (8000a24 <main+0x378>)
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2308      	movs	r3, #8
 8000846:	220c      	movs	r2, #12
 8000848:	215c      	movs	r1, #92	; 0x5c
 800084a:	f44f 70c5 	mov.w	r0, #394	; 0x18a
 800084e:	f002 faff 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(390+4+12, 44+48+8, 12, 8, UTIL_LCD_COLOR_RED);
 8000852:	4b74      	ldr	r3, [pc, #464]	; (8000a24 <main+0x378>)
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2308      	movs	r3, #8
 8000858:	220c      	movs	r2, #12
 800085a:	2164      	movs	r1, #100	; 0x64
 800085c:	f44f 70cb 	mov.w	r0, #406	; 0x196
 8000860:	f002 faf6 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(390+4+12+12, 44+48+8+8, 12, 8, UTIL_LCD_COLOR_RED);
 8000864:	4b6f      	ldr	r3, [pc, #444]	; (8000a24 <main+0x378>)
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2308      	movs	r3, #8
 800086a:	220c      	movs	r2, #12
 800086c:	216c      	movs	r1, #108	; 0x6c
 800086e:	f44f 70d1 	mov.w	r0, #418	; 0x1a2
 8000872:	f002 faed 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(390+4+12, 44+48+8+8+8, 12, 8, UTIL_LCD_COLOR_RED);
 8000876:	4b6b      	ldr	r3, [pc, #428]	; (8000a24 <main+0x378>)
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2308      	movs	r3, #8
 800087c:	220c      	movs	r2, #12
 800087e:	2174      	movs	r1, #116	; 0x74
 8000880:	f44f 70cb 	mov.w	r0, #406	; 0x196
 8000884:	f002 fae4 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(390+4, 44+48+8+8+8+8, 12, 8, UTIL_LCD_COLOR_RED);
 8000888:	4b66      	ldr	r3, [pc, #408]	; (8000a24 <main+0x378>)
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2308      	movs	r3, #8
 800088e:	220c      	movs	r2, #12
 8000890:	217c      	movs	r1, #124	; 0x7c
 8000892:	f44f 70c5 	mov.w	r0, #394	; 0x18a
 8000896:	f002 fadb 	bl	8002e50 <UTIL_LCD_FillRect>


				 //M
				 UTIL_LCD_FillRect(350, 44+48+48, 80,8, UTIL_LCD_COLOR_RED);
 800089a:	4b62      	ldr	r3, [pc, #392]	; (8000a24 <main+0x378>)
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2308      	movs	r3, #8
 80008a0:	2250      	movs	r2, #80	; 0x50
 80008a2:	218c      	movs	r1, #140	; 0x8c
 80008a4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80008a8:	f002 fad2 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(350, 44+48+80, 80,8, UTIL_LCD_COLOR_RED);
 80008ac:	4b5d      	ldr	r3, [pc, #372]	; (8000a24 <main+0x378>)
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2308      	movs	r3, #8
 80008b2:	2250      	movs	r2, #80	; 0x50
 80008b4:	21ac      	movs	r1, #172	; 0xac
 80008b6:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80008ba:	f002 fac9 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(390+4+24, 70+22+48, 12, 8, UTIL_LCD_COLOR_RED);
 80008be:	4b59      	ldr	r3, [pc, #356]	; (8000a24 <main+0x378>)
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2308      	movs	r3, #8
 80008c4:	220c      	movs	r2, #12
 80008c6:	218c      	movs	r1, #140	; 0x8c
 80008c8:	f44f 70d1 	mov.w	r0, #418	; 0x1a2
 80008cc:	f002 fac0 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(390+4+12, 70+22+48+8, 12, 8, UTIL_LCD_COLOR_RED);
 80008d0:	4b54      	ldr	r3, [pc, #336]	; (8000a24 <main+0x378>)
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2308      	movs	r3, #8
 80008d6:	220c      	movs	r2, #12
 80008d8:	2194      	movs	r1, #148	; 0x94
 80008da:	f44f 70cb 	mov.w	r0, #406	; 0x196
 80008de:	f002 fab7 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(390+4, 48+44+48+8+8, 12, 8, UTIL_LCD_COLOR_RED);
 80008e2:	4b50      	ldr	r3, [pc, #320]	; (8000a24 <main+0x378>)
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2308      	movs	r3, #8
 80008e8:	220c      	movs	r2, #12
 80008ea:	219c      	movs	r1, #156	; 0x9c
 80008ec:	f44f 70c5 	mov.w	r0, #394	; 0x18a
 80008f0:	f002 faae 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(390+4+12, 48+44+48+8+8+8, 12, 8, UTIL_LCD_COLOR_RED);
 80008f4:	4b4b      	ldr	r3, [pc, #300]	; (8000a24 <main+0x378>)
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2308      	movs	r3, #8
 80008fa:	220c      	movs	r2, #12
 80008fc:	21a4      	movs	r1, #164	; 0xa4
 80008fe:	f44f 70cb 	mov.w	r0, #406	; 0x196
 8000902:	f002 faa5 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(390+4+24, 48+44+48+8+8+8+8, 12, 8, UTIL_LCD_COLOR_RED);
 8000906:	4b47      	ldr	r3, [pc, #284]	; (8000a24 <main+0x378>)
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2308      	movs	r3, #8
 800090c:	220c      	movs	r2, #12
 800090e:	21ac      	movs	r1, #172	; 0xac
 8000910:	f44f 70d1 	mov.w	r0, #418	; 0x1a2
 8000914:	f002 fa9c 	bl	8002e50 <UTIL_LCD_FillRect>

				 //E
				 UTIL_LCD_FillRect(350, 44+48+48+48, 80,8, UTIL_LCD_COLOR_RED);
 8000918:	4b42      	ldr	r3, [pc, #264]	; (8000a24 <main+0x378>)
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2308      	movs	r3, #8
 800091e:	2250      	movs	r2, #80	; 0x50
 8000920:	21bc      	movs	r1, #188	; 0xbc
 8000922:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000926:	f002 fa93 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(390-4, 44+48+48+48, 8, 40, UTIL_LCD_COLOR_RED);
 800092a:	4b3e      	ldr	r3, [pc, #248]	; (8000a24 <main+0x378>)
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	2328      	movs	r3, #40	; 0x28
 8000930:	2208      	movs	r2, #8
 8000932:	21bc      	movs	r1, #188	; 0xbc
 8000934:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8000938:	f002 fa8a 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(350, 44+48+48+48, 8, 40, UTIL_LCD_COLOR_RED);
 800093c:	4b39      	ldr	r3, [pc, #228]	; (8000a24 <main+0x378>)
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2328      	movs	r3, #40	; 0x28
 8000942:	2208      	movs	r2, #8
 8000944:	21bc      	movs	r1, #188	; 0xbc
 8000946:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800094a:	f002 fa81 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-8, 44+48+48+48, 8, 40, UTIL_LCD_COLOR_RED);
 800094e:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <main+0x378>)
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2328      	movs	r3, #40	; 0x28
 8000954:	2208      	movs	r2, #8
 8000956:	21bc      	movs	r1, #188	; 0xbc
 8000958:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 800095c:	f002 fa78 	bl	8002e50 <UTIL_LCD_FillRect>


				 //W
				 UTIL_LCD_FillRect(430-8-35-80, 44, 27+8,8, UTIL_LCD_COLOR_RED);
 8000960:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <main+0x378>)
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2308      	movs	r3, #8
 8000966:	2223      	movs	r2, #35	; 0x23
 8000968:	212c      	movs	r1, #44	; 0x2c
 800096a:	f240 1033 	movw	r0, #307	; 0x133
 800096e:	f002 fa6f 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-8-35-80-35, 44+8, 27+8,8, UTIL_LCD_COLOR_RED);
 8000972:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <main+0x378>)
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	2308      	movs	r3, #8
 8000978:	2223      	movs	r2, #35	; 0x23
 800097a:	2134      	movs	r1, #52	; 0x34
 800097c:	f44f 7088 	mov.w	r0, #272	; 0x110
 8000980:	f002 fa66 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-8-35-80-35-8, 44+8+8, 8,8, UTIL_LCD_COLOR_RED);
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <main+0x378>)
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2308      	movs	r3, #8
 800098a:	2208      	movs	r2, #8
 800098c:	213c      	movs	r1, #60	; 0x3c
 800098e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8000992:	f002 fa5d 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-8-35-80-35, 44+8+8+8, 27,8, UTIL_LCD_COLOR_RED);
 8000996:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <main+0x378>)
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2308      	movs	r3, #8
 800099c:	221b      	movs	r2, #27
 800099e:	2144      	movs	r1, #68	; 0x44
 80009a0:	f44f 7088 	mov.w	r0, #272	; 0x110
 80009a4:	f002 fa54 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-16-35-80, 44+8+8+8+8, 8,8, UTIL_LCD_COLOR_RED);
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <main+0x378>)
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2308      	movs	r3, #8
 80009ae:	2208      	movs	r2, #8
 80009b0:	214c      	movs	r1, #76	; 0x4c
 80009b2:	f240 102b 	movw	r0, #299	; 0x12b
 80009b6:	f002 fa4b 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-8-35-80-35, 44+8+32, 27,8, UTIL_LCD_COLOR_RED);
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <main+0x378>)
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2308      	movs	r3, #8
 80009c0:	221b      	movs	r2, #27
 80009c2:	2154      	movs	r1, #84	; 0x54
 80009c4:	f44f 7088 	mov.w	r0, #272	; 0x110
 80009c8:	f002 fa42 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-8-35-80-35-8, 44+8+32+8, 8,8, UTIL_LCD_COLOR_RED);
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <main+0x378>)
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2308      	movs	r3, #8
 80009d2:	2208      	movs	r2, #8
 80009d4:	215c      	movs	r1, #92	; 0x5c
 80009d6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80009da:	f002 fa39 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-8-35-80-35,  44+8+32+16, 27+8,8, UTIL_LCD_COLOR_RED);
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <main+0x378>)
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2308      	movs	r3, #8
 80009e4:	2223      	movs	r2, #35	; 0x23
 80009e6:	2164      	movs	r1, #100	; 0x64
 80009e8:	f44f 7088 	mov.w	r0, #272	; 0x110
 80009ec:	f002 fa30 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-8-35-80, 44+8+32+24, 27+8,8, UTIL_LCD_COLOR_RED);
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <main+0x378>)
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	e018      	b.n	8000a28 <main+0x37c>
 80009f6:	bf00      	nop
 80009f8:	58021000 	.word	0x58021000
 80009fc:	24000178 	.word	0x24000178
 8000a00:	240000e4 	.word	0x240000e4
 8000a04:	08010a70 	.word	0x08010a70
 8000a08:	240001e8 	.word	0x240001e8
 8000a0c:	240001ea 	.word	0x240001ea
 8000a10:	240001ec 	.word	0x240001ec
 8000a14:	240001ee 	.word	0x240001ee
 8000a18:	240000d4 	.word	0x240000d4
 8000a1c:	240000d8 	.word	0x240000d8
 8000a20:	240000e0 	.word	0x240000e0
 8000a24:	ffff0000 	.word	0xffff0000
 8000a28:	2308      	movs	r3, #8
 8000a2a:	2223      	movs	r2, #35	; 0x23
 8000a2c:	216c      	movs	r1, #108	; 0x6c
 8000a2e:	f240 1033 	movw	r0, #307	; 0x133
 8000a32:	f002 fa0d 	bl	8002e50 <UTIL_LCD_FillRect>

				 //O
				 UTIL_LCD_FillRect(430-80-88, 44+8+32+24+16, 80,8, UTIL_LCD_COLOR_RED);
 8000a36:	4be0      	ldr	r3, [pc, #896]	; (8000db8 <main+0x70c>)
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	2250      	movs	r2, #80	; 0x50
 8000a3e:	217c      	movs	r1, #124	; 0x7c
 8000a40:	f44f 7083 	mov.w	r0, #262	; 0x106
 8000a44:	f002 fa04 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-80-88, 44+8+32+24+16, 8,40, UTIL_LCD_COLOR_RED);
 8000a48:	4bdb      	ldr	r3, [pc, #876]	; (8000db8 <main+0x70c>)
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2328      	movs	r3, #40	; 0x28
 8000a4e:	2208      	movs	r2, #8
 8000a50:	217c      	movs	r1, #124	; 0x7c
 8000a52:	f44f 7083 	mov.w	r0, #262	; 0x106
 8000a56:	f002 f9fb 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-80-88+72, 44+8+32+24+16, 8,40, UTIL_LCD_COLOR_RED);
 8000a5a:	4bd7      	ldr	r3, [pc, #860]	; (8000db8 <main+0x70c>)
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2328      	movs	r3, #40	; 0x28
 8000a60:	2208      	movs	r2, #8
 8000a62:	217c      	movs	r1, #124	; 0x7c
 8000a64:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 8000a68:	f002 f9f2 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-80-88, 44+8+32+24+16+32, 80,8, UTIL_LCD_COLOR_RED);
 8000a6c:	4bd2      	ldr	r3, [pc, #840]	; (8000db8 <main+0x70c>)
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2308      	movs	r3, #8
 8000a72:	2250      	movs	r2, #80	; 0x50
 8000a74:	219c      	movs	r1, #156	; 0x9c
 8000a76:	f44f 7083 	mov.w	r0, #262	; 0x106
 8000a7a:	f002 f9e9 	bl	8002e50 <UTIL_LCD_FillRect>

				 //N
				 UTIL_LCD_FillRect(430-80-88, 44+8+32+24+64, 80,8, UTIL_LCD_COLOR_RED);
 8000a7e:	4bce      	ldr	r3, [pc, #824]	; (8000db8 <main+0x70c>)
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2308      	movs	r3, #8
 8000a84:	2250      	movs	r2, #80	; 0x50
 8000a86:	21ac      	movs	r1, #172	; 0xac
 8000a88:	f44f 7083 	mov.w	r0, #262	; 0x106
 8000a8c:	f002 f9e0 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-80-88, 44+8+32+24+64+32, 80,8, UTIL_LCD_COLOR_RED);
 8000a90:	4bc9      	ldr	r3, [pc, #804]	; (8000db8 <main+0x70c>)
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2308      	movs	r3, #8
 8000a96:	2250      	movs	r2, #80	; 0x50
 8000a98:	21cc      	movs	r1, #204	; 0xcc
 8000a9a:	f44f 7083 	mov.w	r0, #262	; 0x106
 8000a9e:	f002 f9d7 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-80-88+16, 44+8+32+24+64+32-8, 16,8, UTIL_LCD_COLOR_RED);
 8000aa2:	4bc5      	ldr	r3, [pc, #788]	; (8000db8 <main+0x70c>)
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	2210      	movs	r2, #16
 8000aaa:	21c4      	movs	r1, #196	; 0xc4
 8000aac:	f44f 708b 	mov.w	r0, #278	; 0x116
 8000ab0:	f002 f9ce 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-80-88+32, 44+8+32+24+64+32-16, 16,8, UTIL_LCD_COLOR_RED);
 8000ab4:	4bc0      	ldr	r3, [pc, #768]	; (8000db8 <main+0x70c>)
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2308      	movs	r3, #8
 8000aba:	2210      	movs	r2, #16
 8000abc:	21bc      	movs	r1, #188	; 0xbc
 8000abe:	f44f 7093 	mov.w	r0, #294	; 0x126
 8000ac2:	f002 f9c5 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-80-88+48, 44+8+32+24+64+32-24, 16,8, UTIL_LCD_COLOR_RED);
 8000ac6:	4bbc      	ldr	r3, [pc, #752]	; (8000db8 <main+0x70c>)
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2308      	movs	r3, #8
 8000acc:	2210      	movs	r2, #16
 8000ace:	21b4      	movs	r1, #180	; 0xb4
 8000ad0:	f44f 709b 	mov.w	r0, #310	; 0x136
 8000ad4:	f002 f9bc 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(430-80-88+64, 44+8+32+24+64+32-32, 16,8, UTIL_LCD_COLOR_RED);
 8000ad8:	4bb7      	ldr	r3, [pc, #732]	; (8000db8 <main+0x70c>)
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	2308      	movs	r3, #8
 8000ade:	2210      	movs	r2, #16
 8000ae0:	21ac      	movs	r1, #172	; 0xac
 8000ae2:	f44f 70a3 	mov.w	r0, #326	; 0x146
 8000ae6:	f002 f9b3 	bl	8002e50 <UTIL_LCD_FillRect>

				 UTIL_LCD_FillRect(100, 272/2-115, 50, 230, UTIL_LCD_COLOR_BLUE);
 8000aea:	4bb4      	ldr	r3, [pc, #720]	; (8000dbc <main+0x710>)
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	23e6      	movs	r3, #230	; 0xe6
 8000af0:	2232      	movs	r2, #50	; 0x32
 8000af2:	2115      	movs	r1, #21
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f002 f9ab 	bl	8002e50 <UTIL_LCD_FillRect>

				 //P
				 UTIL_LCD_FillRect(100+7, 32, 36,4, UTIL_LCD_COLOR_WHITE);
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2304      	movs	r3, #4
 8000b02:	2224      	movs	r2, #36	; 0x24
 8000b04:	2120      	movs	r1, #32
 8000b06:	206b      	movs	r0, #107	; 0x6b
 8000b08:	f002 f9a2 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+36-4, 32, 4,20, UTIL_LCD_COLOR_WHITE);
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2314      	movs	r3, #20
 8000b14:	2204      	movs	r2, #4
 8000b16:	2120      	movs	r1, #32
 8000b18:	208b      	movs	r0, #139	; 0x8b
 8000b1a:	f002 f999 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18-2, 32, 4,20, UTIL_LCD_COLOR_WHITE);
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2314      	movs	r3, #20
 8000b26:	2204      	movs	r2, #4
 8000b28:	2120      	movs	r1, #32
 8000b2a:	207b      	movs	r0, #123	; 0x7b
 8000b2c:	f002 f990 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18-2, 32+16, 18,4, UTIL_LCD_COLOR_WHITE);
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2304      	movs	r3, #4
 8000b38:	2212      	movs	r2, #18
 8000b3a:	2130      	movs	r1, #48	; 0x30
 8000b3c:	207b      	movs	r0, #123	; 0x7b
 8000b3e:	f002 f987 	bl	8002e50 <UTIL_LCD_FillRect>

				 //L
				 UTIL_LCD_FillRect(100+7, 32+24, 36,4, UTIL_LCD_COLOR_WHITE);
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2304      	movs	r3, #4
 8000b4a:	2224      	movs	r2, #36	; 0x24
 8000b4c:	2138      	movs	r1, #56	; 0x38
 8000b4e:	206b      	movs	r0, #107	; 0x6b
 8000b50:	f002 f97e 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7, 32+24, 4,20, UTIL_LCD_COLOR_WHITE);
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2314      	movs	r3, #20
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	2138      	movs	r1, #56	; 0x38
 8000b60:	206b      	movs	r0, #107	; 0x6b
 8000b62:	f002 f975 	bl	8002e50 <UTIL_LCD_FillRect>

				 //A
				 UTIL_LCD_FillRect(100+7, 76+4, 18,4, UTIL_LCD_COLOR_WHITE);
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	2212      	movs	r2, #18
 8000b70:	2150      	movs	r1, #80	; 0x50
 8000b72:	206b      	movs	r0, #107	; 0x6b
 8000b74:	f002 f96c 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7, 76+20, 18,4, UTIL_LCD_COLOR_WHITE);
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2304      	movs	r3, #4
 8000b80:	2212      	movs	r2, #18
 8000b82:	2160      	movs	r1, #96	; 0x60
 8000b84:	206b      	movs	r0, #107	; 0x6b
 8000b86:	f002 f963 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18-2, 76+4, 4,20, UTIL_LCD_COLOR_WHITE);
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2314      	movs	r3, #20
 8000b92:	2204      	movs	r2, #4
 8000b94:	2150      	movs	r1, #80	; 0x50
 8000b96:	207b      	movs	r0, #123	; 0x7b
 8000b98:	f002 f95a 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+2, 76+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	2205      	movs	r2, #5
 8000ba6:	2150      	movs	r1, #80	; 0x50
 8000ba8:	207f      	movs	r0, #127	; 0x7f
 8000baa:	f002 f951 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+7, 76+4+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	2205      	movs	r2, #5
 8000bb8:	2154      	movs	r1, #84	; 0x54
 8000bba:	2084      	movs	r0, #132	; 0x84
 8000bbc:	f002 f948 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+12, 76+4+8, 5,4, UTIL_LCD_COLOR_WHITE);
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	2205      	movs	r2, #5
 8000bca:	2158      	movs	r1, #88	; 0x58
 8000bcc:	2089      	movs	r0, #137	; 0x89
 8000bce:	f002 f93f 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+7, 76+4+12, 5,4, UTIL_LCD_COLOR_WHITE);
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	2304      	movs	r3, #4
 8000bda:	2205      	movs	r2, #5
 8000bdc:	215c      	movs	r1, #92	; 0x5c
 8000bde:	2084      	movs	r0, #132	; 0x84
 8000be0:	f002 f936 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+2, 76+4+16, 5,4, UTIL_LCD_COLOR_WHITE);
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	2304      	movs	r3, #4
 8000bec:	2205      	movs	r2, #5
 8000bee:	2160      	movs	r1, #96	; 0x60
 8000bf0:	207f      	movs	r0, #127	; 0x7f
 8000bf2:	f002 f92d 	bl	8002e50 <UTIL_LCD_FillRect>

				 //Y
				 UTIL_LCD_FillRect(100+7, 104+10-2, 22,4, UTIL_LCD_COLOR_WHITE);
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	2216      	movs	r2, #22
 8000c00:	2170      	movs	r1, #112	; 0x70
 8000c02:	206b      	movs	r0, #107	; 0x6b
 8000c04:	f002 f924 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+12, 104, 5,4, UTIL_LCD_COLOR_WHITE);
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2304      	movs	r3, #4
 8000c10:	2205      	movs	r2, #5
 8000c12:	2168      	movs	r1, #104	; 0x68
 8000c14:	2089      	movs	r0, #137	; 0x89
 8000c16:	f002 f91b 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+7, 104+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2304      	movs	r3, #4
 8000c22:	2205      	movs	r2, #5
 8000c24:	216c      	movs	r1, #108	; 0x6c
 8000c26:	2084      	movs	r0, #132	; 0x84
 8000c28:	f002 f912 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+2, 104+8, 5,4, UTIL_LCD_COLOR_WHITE);
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2304      	movs	r3, #4
 8000c34:	2205      	movs	r2, #5
 8000c36:	2170      	movs	r1, #112	; 0x70
 8000c38:	207f      	movs	r0, #127	; 0x7f
 8000c3a:	f002 f909 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+7, 104+12, 5,4, UTIL_LCD_COLOR_WHITE);
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	2304      	movs	r3, #4
 8000c46:	2205      	movs	r2, #5
 8000c48:	2174      	movs	r1, #116	; 0x74
 8000c4a:	2084      	movs	r0, #132	; 0x84
 8000c4c:	f002 f900 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+12, 104+16, 5,4, UTIL_LCD_COLOR_WHITE);
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2304      	movs	r3, #4
 8000c58:	2205      	movs	r2, #5
 8000c5a:	2178      	movs	r1, #120	; 0x78
 8000c5c:	2089      	movs	r0, #137	; 0x89
 8000c5e:	f002 f8f7 	bl	8002e50 <UTIL_LCD_FillRect>

				 //A
				 UTIL_LCD_FillRect(100+7, 135+4, 18,4, UTIL_LCD_COLOR_WHITE);
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2304      	movs	r3, #4
 8000c6a:	2212      	movs	r2, #18
 8000c6c:	218b      	movs	r1, #139	; 0x8b
 8000c6e:	206b      	movs	r0, #107	; 0x6b
 8000c70:	f002 f8ee 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7, 135+20, 18,4, UTIL_LCD_COLOR_WHITE);
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	2212      	movs	r2, #18
 8000c7e:	219b      	movs	r1, #155	; 0x9b
 8000c80:	206b      	movs	r0, #107	; 0x6b
 8000c82:	f002 f8e5 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18-2, 135+4, 4,20, UTIL_LCD_COLOR_WHITE);
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2314      	movs	r3, #20
 8000c8e:	2204      	movs	r2, #4
 8000c90:	218b      	movs	r1, #139	; 0x8b
 8000c92:	207b      	movs	r0, #123	; 0x7b
 8000c94:	f002 f8dc 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+2, 135+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	2205      	movs	r2, #5
 8000ca2:	218b      	movs	r1, #139	; 0x8b
 8000ca4:	207f      	movs	r0, #127	; 0x7f
 8000ca6:	f002 f8d3 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+7, 135+4+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	2205      	movs	r2, #5
 8000cb4:	218f      	movs	r1, #143	; 0x8f
 8000cb6:	2084      	movs	r0, #132	; 0x84
 8000cb8:	f002 f8ca 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+12, 135+4+8, 5,4, UTIL_LCD_COLOR_WHITE);
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	2193      	movs	r1, #147	; 0x93
 8000cc8:	2089      	movs	r0, #137	; 0x89
 8000cca:	f002 f8c1 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+7, 135+4+12, 5,4, UTIL_LCD_COLOR_WHITE);
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	2205      	movs	r2, #5
 8000cd8:	2197      	movs	r1, #151	; 0x97
 8000cda:	2084      	movs	r0, #132	; 0x84
 8000cdc:	f002 f8b8 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+2, 135+4+16, 5,4, UTIL_LCD_COLOR_WHITE);
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	2205      	movs	r2, #5
 8000cea:	219b      	movs	r1, #155	; 0x9b
 8000cec:	207f      	movs	r0, #127	; 0x7f
 8000cee:	f002 f8af 	bl	8002e50 <UTIL_LCD_FillRect>

				 //G
				 UTIL_LCD_FillRect(100+7, 139+24, 36,4, UTIL_LCD_COLOR_WHITE);
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	2224      	movs	r2, #36	; 0x24
 8000cfc:	21a3      	movs	r1, #163	; 0xa3
 8000cfe:	206b      	movs	r0, #107	; 0x6b
 8000d00:	f002 f8a6 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7, 139+24, 4,20, UTIL_LCD_COLOR_WHITE);
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	2314      	movs	r3, #20
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	21a3      	movs	r1, #163	; 0xa3
 8000d10:	206b      	movs	r0, #107	; 0x6b
 8000d12:	f002 f89d 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7, 139+24+16, 18,4, UTIL_LCD_COLOR_WHITE);
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	2212      	movs	r2, #18
 8000d20:	21b3      	movs	r1, #179	; 0xb3
 8000d22:	206b      	movs	r0, #107	; 0x6b
 8000d24:	f002 f894 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+16, 139+24+10, 4,10, UTIL_LCD_COLOR_WHITE);
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	230a      	movs	r3, #10
 8000d30:	2204      	movs	r2, #4
 8000d32:	21ad      	movs	r1, #173	; 0xad
 8000d34:	207b      	movs	r0, #123	; 0x7b
 8000d36:	f002 f88b 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+32, 139+24, 4,20, UTIL_LCD_COLOR_WHITE);
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2314      	movs	r3, #20
 8000d42:	2204      	movs	r2, #4
 8000d44:	21a3      	movs	r1, #163	; 0xa3
 8000d46:	208b      	movs	r0, #139	; 0x8b
 8000d48:	f002 f882 	bl	8002e50 <UTIL_LCD_FillRect>

				 //A
				 UTIL_LCD_FillRect(100+7, 183+4, 18,4, UTIL_LCD_COLOR_WHITE);
 8000d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2304      	movs	r3, #4
 8000d54:	2212      	movs	r2, #18
 8000d56:	21bb      	movs	r1, #187	; 0xbb
 8000d58:	206b      	movs	r0, #107	; 0x6b
 8000d5a:	f002 f879 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7, 183+20, 18,4, UTIL_LCD_COLOR_WHITE);
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2304      	movs	r3, #4
 8000d66:	2212      	movs	r2, #18
 8000d68:	21cb      	movs	r1, #203	; 0xcb
 8000d6a:	206b      	movs	r0, #107	; 0x6b
 8000d6c:	f002 f870 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18-2, 183+4, 4,20, UTIL_LCD_COLOR_WHITE);
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2314      	movs	r3, #20
 8000d78:	2204      	movs	r2, #4
 8000d7a:	21bb      	movs	r1, #187	; 0xbb
 8000d7c:	207b      	movs	r0, #123	; 0x7b
 8000d7e:	f002 f867 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+2, 183+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2304      	movs	r3, #4
 8000d8a:	2205      	movs	r2, #5
 8000d8c:	21bb      	movs	r1, #187	; 0xbb
 8000d8e:	207f      	movs	r0, #127	; 0x7f
 8000d90:	f002 f85e 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+7, 183+4+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	2205      	movs	r2, #5
 8000d9e:	21bf      	movs	r1, #191	; 0xbf
 8000da0:	2084      	movs	r0, #132	; 0x84
 8000da2:	f002 f855 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+12, 183+4+8, 5,4, UTIL_LCD_COLOR_WHITE);
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2304      	movs	r3, #4
 8000dae:	2205      	movs	r2, #5
 8000db0:	21c3      	movs	r1, #195	; 0xc3
 8000db2:	2089      	movs	r0, #137	; 0x89
 8000db4:	e004      	b.n	8000dc0 <main+0x714>
 8000db6:	bf00      	nop
 8000db8:	ffff0000 	.word	0xffff0000
 8000dbc:	ff0000ff 	.word	0xff0000ff
 8000dc0:	f002 f846 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+7, 183+4+12, 5,4, UTIL_LCD_COLOR_WHITE);
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2304      	movs	r3, #4
 8000dcc:	2205      	movs	r2, #5
 8000dce:	21c7      	movs	r1, #199	; 0xc7
 8000dd0:	2084      	movs	r0, #132	; 0x84
 8000dd2:	f002 f83d 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+18+2, 183+4+16, 5,4, UTIL_LCD_COLOR_WHITE);
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2304      	movs	r3, #4
 8000dde:	2205      	movs	r2, #5
 8000de0:	21cb      	movs	r1, #203	; 0xcb
 8000de2:	207f      	movs	r0, #127	; 0x7f
 8000de4:	f002 f834 	bl	8002e50 <UTIL_LCD_FillRect>

				 //I
				 UTIL_LCD_FillRect(100+7, 183+28, 36,4, UTIL_LCD_COLOR_WHITE);
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	2304      	movs	r3, #4
 8000df0:	2224      	movs	r2, #36	; 0x24
 8000df2:	21d3      	movs	r1, #211	; 0xd3
 8000df4:	206b      	movs	r0, #107	; 0x6b
 8000df6:	f002 f82b 	bl	8002e50 <UTIL_LCD_FillRect>

				 //N
				 UTIL_LCD_FillRect(100+7, 219, 36,4, UTIL_LCD_COLOR_WHITE);
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2304      	movs	r3, #4
 8000e02:	2224      	movs	r2, #36	; 0x24
 8000e04:	21db      	movs	r1, #219	; 0xdb
 8000e06:	206b      	movs	r0, #107	; 0x6b
 8000e08:	f002 f822 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7, 219+16, 36,4, UTIL_LCD_COLOR_WHITE);
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2304      	movs	r3, #4
 8000e14:	2224      	movs	r2, #36	; 0x24
 8000e16:	21eb      	movs	r1, #235	; 0xeb
 8000e18:	206b      	movs	r0, #107	; 0x6b
 8000e1a:	f002 f819 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+29-7, 219+4, 7,4, UTIL_LCD_COLOR_WHITE);
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2304      	movs	r3, #4
 8000e26:	2207      	movs	r2, #7
 8000e28:	21df      	movs	r1, #223	; 0xdf
 8000e2a:	2081      	movs	r0, #129	; 0x81
 8000e2c:	f002 f810 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+29-14, 219+8, 7,4, UTIL_LCD_COLOR_WHITE);
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2304      	movs	r3, #4
 8000e38:	2207      	movs	r2, #7
 8000e3a:	21e3      	movs	r1, #227	; 0xe3
 8000e3c:	207a      	movs	r0, #122	; 0x7a
 8000e3e:	f002 f807 	bl	8002e50 <UTIL_LCD_FillRect>
				 UTIL_LCD_FillRect(100+7+29-21, 219+12, 7,4, UTIL_LCD_COLOR_WHITE);
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2304      	movs	r3, #4
 8000e4a:	2207      	movs	r2, #7
 8000e4c:	21e7      	movs	r1, #231	; 0xe7
 8000e4e:	2073      	movs	r0, #115	; 0x73
 8000e50:	f001 fffe 	bl	8002e50 <UTIL_LCD_FillRect>

				 while(1) {
					 ts_status = BSP_TS_GetState(0, &TS_State);
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f005 f807 	bl	8005e6c <BSP_TS_GetState>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	623b      	str	r3, [r7, #32]
					 if (TS_State.TouchDetected) {
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d03f      	beq.n	8000ee8 <main+0x83c>
							 y = TS_State.TouchY;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
							 x = TS_State.TouchX;
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	84fb      	strh	r3, [r7, #38]	; 0x26
							if(x > 100 && x < 150 && y > 272/2-115 && y < 272/2+115){
 8000e70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e72:	2b64      	cmp	r3, #100	; 0x64
 8000e74:	d938      	bls.n	8000ee8 <main+0x83c>
 8000e76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e78:	2b95      	cmp	r3, #149	; 0x95
 8000e7a:	d835      	bhi.n	8000ee8 <main+0x83c>
 8000e7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e7e:	2b15      	cmp	r3, #21
 8000e80:	d932      	bls.n	8000ee8 <main+0x83c>
 8000e82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e84:	2bfa      	cmp	r3, #250	; 0xfa
 8000e86:	d82f      	bhi.n	8000ee8 <main+0x83c>
								ball_x = 330;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <main+0x848>)
 8000e8a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8000e8e:	801a      	strh	r2, [r3, #0]
								ball_y = 272 / 2;
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <main+0x84c>)
 8000e92:	2288      	movs	r2, #136	; 0x88
 8000e94:	801a      	strh	r2, [r3, #0]
								ball_dx = 3;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <main+0x850>)
 8000e98:	2203      	movs	r2, #3
 8000e9a:	801a      	strh	r2, [r3, #0]
								ball_dy = 3;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <main+0x854>)
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	801a      	strh	r2, [r3, #0]

								playerx = y_size / 2-RECT_HEIGHT/2;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <main+0x858>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	085a      	lsrs	r2, r3, #1
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <main+0x85c>)
 8000eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da00      	bge.n	8000eb4 <main+0x808>
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	105b      	asrs	r3, r3, #1
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <main+0x860>)
 8000ebc:	6013      	str	r3, [r2, #0]

								gameOver = false;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <main+0x864>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
								gameStart = false;
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <main+0x868>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]


								UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8000eca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000ece:	f001 fe21 	bl	8002b14 <UTIL_LCD_SetBackColor>
								UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000ed2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000ed6:	f001 fe9b 	bl	8002c10 <UTIL_LCD_Clear>
								rowsSelected = Display_InitialContent();
 8000eda:	f000 fc79 	bl	80017d0 <Display_InitialContent>
 8000ede:	62b8      	str	r0, [r7, #40]	; 0x28

								bricksBroken = 0;
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <main+0x86c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]

								break;
 8000ee6:	e003      	b.n	8000ef0 <main+0x844>
							}

						 }
						 HAL_Delay(50);
 8000ee8:	2032      	movs	r0, #50	; 0x32
 8000eea:	f005 f9c9 	bl	8006280 <HAL_Delay>
					 ts_status = BSP_TS_GetState(0, &TS_State);
 8000eee:	e7b1      	b.n	8000e54 <main+0x7a8>
				 UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8000ef0:	e456      	b.n	80007a0 <main+0xf4>
 8000ef2:	bf00      	nop
 8000ef4:	240001e8 	.word	0x240001e8
 8000ef8:	240001ea 	.word	0x240001ea
 8000efc:	240001ec 	.word	0x240001ec
 8000f00:	240001ee 	.word	0x240001ee
 8000f04:	240000d8 	.word	0x240000d8
 8000f08:	24000000 	.word	0x24000000
 8000f0c:	240000dc 	.word	0x240000dc
 8000f10:	240001f1 	.word	0x240001f1
 8000f14:	240001f0 	.word	0x240001f0
 8000f18:	240000e0 	.word	0x240000e0
					 }

			}
		}

	if(gameOver){
 8000f1c:	4bcf      	ldr	r3, [pc, #828]	; (800125c <main+0xbb0>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 83a3 	beq.w	800166c <main+0xfc0>
		 UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8000f26:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f2a:	f001 fdf3 	bl	8002b14 <UTIL_LCD_SetBackColor>
		 UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000f2e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f32:	f001 fe6d 	bl	8002c10 <UTIL_LCD_Clear>

		 // g 8 a 8 m 8 e

		 //G
		 UTIL_LCD_FillRect(350, 44, 80,8, UTIL_LCD_COLOR_RED);
 8000f36:	4bca      	ldr	r3, [pc, #808]	; (8001260 <main+0xbb4>)
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	2250      	movs	r2, #80	; 0x50
 8000f3e:	212c      	movs	r1, #44	; 0x2c
 8000f40:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000f44:	f001 ff84 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(350, 44, 8,40, UTIL_LCD_COLOR_RED);
 8000f48:	4bc5      	ldr	r3, [pc, #788]	; (8001260 <main+0xbb4>)
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2328      	movs	r3, #40	; 0x28
 8000f4e:	2208      	movs	r2, #8
 8000f50:	212c      	movs	r1, #44	; 0x2c
 8000f52:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000f56:	f001 ff7b 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390-4, 62, 8, 22, UTIL_LCD_COLOR_RED);
 8000f5a:	4bc1      	ldr	r3, [pc, #772]	; (8001260 <main+0xbb4>)
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2316      	movs	r3, #22
 8000f60:	2208      	movs	r2, #8
 8000f62:	213e      	movs	r1, #62	; 0x3e
 8000f64:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8000f68:	f001 ff72 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(430-8, 44, 8, 40, UTIL_LCD_COLOR_RED);
 8000f6c:	4bbc      	ldr	r3, [pc, #752]	; (8001260 <main+0xbb4>)
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2328      	movs	r3, #40	; 0x28
 8000f72:	2208      	movs	r2, #8
 8000f74:	212c      	movs	r1, #44	; 0x2c
 8000f76:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8000f7a:	f001 ff69 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(350, 44+40-8, 40,8, UTIL_LCD_COLOR_RED);
 8000f7e:	4bb8      	ldr	r3, [pc, #736]	; (8001260 <main+0xbb4>)
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2308      	movs	r3, #8
 8000f84:	2228      	movs	r2, #40	; 0x28
 8000f86:	214c      	movs	r1, #76	; 0x4c
 8000f88:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000f8c:	f001 ff60 	bl	8002e50 <UTIL_LCD_FillRect>


		 //A
		 UTIL_LCD_FillRect(350, 44+40-8+48, 40,8, UTIL_LCD_COLOR_RED);
 8000f90:	4bb3      	ldr	r3, [pc, #716]	; (8001260 <main+0xbb4>)
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2308      	movs	r3, #8
 8000f96:	2228      	movs	r2, #40	; 0x28
 8000f98:	217c      	movs	r1, #124	; 0x7c
 8000f9a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000f9e:	f001 ff57 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(350, 44+48, 40,8, UTIL_LCD_COLOR_RED);
 8000fa2:	4baf      	ldr	r3, [pc, #700]	; (8001260 <main+0xbb4>)
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	2228      	movs	r2, #40	; 0x28
 8000faa:	215c      	movs	r1, #92	; 0x5c
 8000fac:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000fb0:	f001 ff4e 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390-4, 44+48, 8, 40, UTIL_LCD_COLOR_RED);
 8000fb4:	4baa      	ldr	r3, [pc, #680]	; (8001260 <main+0xbb4>)
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2328      	movs	r3, #40	; 0x28
 8000fba:	2208      	movs	r2, #8
 8000fbc:	215c      	movs	r1, #92	; 0x5c
 8000fbe:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8000fc2:	f001 ff45 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390+4, 44+48, 12, 8, UTIL_LCD_COLOR_RED);
 8000fc6:	4ba6      	ldr	r3, [pc, #664]	; (8001260 <main+0xbb4>)
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2308      	movs	r3, #8
 8000fcc:	220c      	movs	r2, #12
 8000fce:	215c      	movs	r1, #92	; 0x5c
 8000fd0:	f44f 70c5 	mov.w	r0, #394	; 0x18a
 8000fd4:	f001 ff3c 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390+4+12, 44+48+8, 12, 8, UTIL_LCD_COLOR_RED);
 8000fd8:	4ba1      	ldr	r3, [pc, #644]	; (8001260 <main+0xbb4>)
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2308      	movs	r3, #8
 8000fde:	220c      	movs	r2, #12
 8000fe0:	2164      	movs	r1, #100	; 0x64
 8000fe2:	f44f 70cb 	mov.w	r0, #406	; 0x196
 8000fe6:	f001 ff33 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390+4+12+12, 44+48+8+8, 12, 8, UTIL_LCD_COLOR_RED);
 8000fea:	4b9d      	ldr	r3, [pc, #628]	; (8001260 <main+0xbb4>)
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2308      	movs	r3, #8
 8000ff0:	220c      	movs	r2, #12
 8000ff2:	216c      	movs	r1, #108	; 0x6c
 8000ff4:	f44f 70d1 	mov.w	r0, #418	; 0x1a2
 8000ff8:	f001 ff2a 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390+4+12, 44+48+8+8+8, 12, 8, UTIL_LCD_COLOR_RED);
 8000ffc:	4b98      	ldr	r3, [pc, #608]	; (8001260 <main+0xbb4>)
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2308      	movs	r3, #8
 8001002:	220c      	movs	r2, #12
 8001004:	2174      	movs	r1, #116	; 0x74
 8001006:	f44f 70cb 	mov.w	r0, #406	; 0x196
 800100a:	f001 ff21 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390+4, 44+48+8+8+8+8, 12, 8, UTIL_LCD_COLOR_RED);
 800100e:	4b94      	ldr	r3, [pc, #592]	; (8001260 <main+0xbb4>)
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2308      	movs	r3, #8
 8001014:	220c      	movs	r2, #12
 8001016:	217c      	movs	r1, #124	; 0x7c
 8001018:	f44f 70c5 	mov.w	r0, #394	; 0x18a
 800101c:	f001 ff18 	bl	8002e50 <UTIL_LCD_FillRect>


		 //M
		 UTIL_LCD_FillRect(350, 44+48+48, 80,8, UTIL_LCD_COLOR_RED);
 8001020:	4b8f      	ldr	r3, [pc, #572]	; (8001260 <main+0xbb4>)
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2308      	movs	r3, #8
 8001026:	2250      	movs	r2, #80	; 0x50
 8001028:	218c      	movs	r1, #140	; 0x8c
 800102a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800102e:	f001 ff0f 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(350, 44+48+80, 80,8, UTIL_LCD_COLOR_RED);
 8001032:	4b8b      	ldr	r3, [pc, #556]	; (8001260 <main+0xbb4>)
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2308      	movs	r3, #8
 8001038:	2250      	movs	r2, #80	; 0x50
 800103a:	21ac      	movs	r1, #172	; 0xac
 800103c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001040:	f001 ff06 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390+4+24, 70+22+48, 12, 8, UTIL_LCD_COLOR_RED);
 8001044:	4b86      	ldr	r3, [pc, #536]	; (8001260 <main+0xbb4>)
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2308      	movs	r3, #8
 800104a:	220c      	movs	r2, #12
 800104c:	218c      	movs	r1, #140	; 0x8c
 800104e:	f44f 70d1 	mov.w	r0, #418	; 0x1a2
 8001052:	f001 fefd 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390+4+12, 70+22+48+8, 12, 8, UTIL_LCD_COLOR_RED);
 8001056:	4b82      	ldr	r3, [pc, #520]	; (8001260 <main+0xbb4>)
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2308      	movs	r3, #8
 800105c:	220c      	movs	r2, #12
 800105e:	2194      	movs	r1, #148	; 0x94
 8001060:	f44f 70cb 	mov.w	r0, #406	; 0x196
 8001064:	f001 fef4 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390+4, 48+44+48+8+8, 12, 8, UTIL_LCD_COLOR_RED);
 8001068:	4b7d      	ldr	r3, [pc, #500]	; (8001260 <main+0xbb4>)
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2308      	movs	r3, #8
 800106e:	220c      	movs	r2, #12
 8001070:	219c      	movs	r1, #156	; 0x9c
 8001072:	f44f 70c5 	mov.w	r0, #394	; 0x18a
 8001076:	f001 feeb 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390+4+12, 48+44+48+8+8+8, 12, 8, UTIL_LCD_COLOR_RED);
 800107a:	4b79      	ldr	r3, [pc, #484]	; (8001260 <main+0xbb4>)
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2308      	movs	r3, #8
 8001080:	220c      	movs	r2, #12
 8001082:	21a4      	movs	r1, #164	; 0xa4
 8001084:	f44f 70cb 	mov.w	r0, #406	; 0x196
 8001088:	f001 fee2 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390+4+24, 48+44+48+8+8+8+8, 12, 8, UTIL_LCD_COLOR_RED);
 800108c:	4b74      	ldr	r3, [pc, #464]	; (8001260 <main+0xbb4>)
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2308      	movs	r3, #8
 8001092:	220c      	movs	r2, #12
 8001094:	21ac      	movs	r1, #172	; 0xac
 8001096:	f44f 70d1 	mov.w	r0, #418	; 0x1a2
 800109a:	f001 fed9 	bl	8002e50 <UTIL_LCD_FillRect>

		 //E
		 UTIL_LCD_FillRect(350, 44+48+48+48, 80,8, UTIL_LCD_COLOR_RED);
 800109e:	4b70      	ldr	r3, [pc, #448]	; (8001260 <main+0xbb4>)
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2308      	movs	r3, #8
 80010a4:	2250      	movs	r2, #80	; 0x50
 80010a6:	21bc      	movs	r1, #188	; 0xbc
 80010a8:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80010ac:	f001 fed0 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390-4, 44+48+48+48, 8, 40, UTIL_LCD_COLOR_RED);
 80010b0:	4b6b      	ldr	r3, [pc, #428]	; (8001260 <main+0xbb4>)
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2328      	movs	r3, #40	; 0x28
 80010b6:	2208      	movs	r2, #8
 80010b8:	21bc      	movs	r1, #188	; 0xbc
 80010ba:	f44f 70c1 	mov.w	r0, #386	; 0x182
 80010be:	f001 fec7 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(350, 44+48+48+48, 8, 40, UTIL_LCD_COLOR_RED);
 80010c2:	4b67      	ldr	r3, [pc, #412]	; (8001260 <main+0xbb4>)
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2328      	movs	r3, #40	; 0x28
 80010c8:	2208      	movs	r2, #8
 80010ca:	21bc      	movs	r1, #188	; 0xbc
 80010cc:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80010d0:	f001 febe 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(430-8, 44+48+48+48, 8, 40, UTIL_LCD_COLOR_RED);
 80010d4:	4b62      	ldr	r3, [pc, #392]	; (8001260 <main+0xbb4>)
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2328      	movs	r3, #40	; 0x28
 80010da:	2208      	movs	r2, #8
 80010dc:	21bc      	movs	r1, #188	; 0xbc
 80010de:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 80010e2:	f001 feb5 	bl	8002e50 <UTIL_LCD_FillRect>


		 //O
		 UTIL_LCD_FillRect(262+8, 44, 80-16,8, UTIL_LCD_COLOR_RED);
 80010e6:	4b5e      	ldr	r3, [pc, #376]	; (8001260 <main+0xbb4>)
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2308      	movs	r3, #8
 80010ec:	2240      	movs	r2, #64	; 0x40
 80010ee:	212c      	movs	r1, #44	; 0x2c
 80010f0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80010f4:	f001 feac 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(262+8, 44+32, 80-16,8, UTIL_LCD_COLOR_RED);
 80010f8:	4b59      	ldr	r3, [pc, #356]	; (8001260 <main+0xbb4>)
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2308      	movs	r3, #8
 80010fe:	2240      	movs	r2, #64	; 0x40
 8001100:	214c      	movs	r1, #76	; 0x4c
 8001102:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8001106:	f001 fea3 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(350-88, 44+8, 8, 40-16, UTIL_LCD_COLOR_RED);
 800110a:	4b55      	ldr	r3, [pc, #340]	; (8001260 <main+0xbb4>)
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2318      	movs	r3, #24
 8001110:	2208      	movs	r2, #8
 8001112:	2134      	movs	r1, #52	; 0x34
 8001114:	f44f 7083 	mov.w	r0, #262	; 0x106
 8001118:	f001 fe9a 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(430-8-88, 44+8, 8, 40-16, UTIL_LCD_COLOR_RED);
 800111c:	4b50      	ldr	r3, [pc, #320]	; (8001260 <main+0xbb4>)
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2318      	movs	r3, #24
 8001122:	2208      	movs	r2, #8
 8001124:	2134      	movs	r1, #52	; 0x34
 8001126:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800112a:	f001 fe91 	bl	8002e50 <UTIL_LCD_FillRect>

		 //V
		 UTIL_LCD_FillRect(430-8-35-80, 44+48, 27+8,8, UTIL_LCD_COLOR_RED);
 800112e:	4b4c      	ldr	r3, [pc, #304]	; (8001260 <main+0xbb4>)
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2308      	movs	r3, #8
 8001134:	2223      	movs	r2, #35	; 0x23
 8001136:	215c      	movs	r1, #92	; 0x5c
 8001138:	f240 1033 	movw	r0, #307	; 0x133
 800113c:	f001 fe88 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(430-8-35-80-35, 44+48+8, 27+8,8, UTIL_LCD_COLOR_RED);
 8001140:	4b47      	ldr	r3, [pc, #284]	; (8001260 <main+0xbb4>)
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2308      	movs	r3, #8
 8001146:	2223      	movs	r2, #35	; 0x23
 8001148:	2164      	movs	r1, #100	; 0x64
 800114a:	f44f 7088 	mov.w	r0, #272	; 0x110
 800114e:	f001 fe7f 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(430-8-35-80-35-11, 44+48+8+8, 11,8, UTIL_LCD_COLOR_RED);
 8001152:	4b43      	ldr	r3, [pc, #268]	; (8001260 <main+0xbb4>)
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2308      	movs	r3, #8
 8001158:	220b      	movs	r2, #11
 800115a:	216c      	movs	r1, #108	; 0x6c
 800115c:	f240 1005 	movw	r0, #261	; 0x105
 8001160:	f001 fe76 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(430-8-35-80-35, 44+48+8+8+8, 27+8,8, UTIL_LCD_COLOR_RED);
 8001164:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <main+0xbb4>)
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2308      	movs	r3, #8
 800116a:	2223      	movs	r2, #35	; 0x23
 800116c:	2174      	movs	r1, #116	; 0x74
 800116e:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001172:	f001 fe6d 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(430-8-35-80, 44+48+8+8+8+8, 27+8,8, UTIL_LCD_COLOR_RED);
 8001176:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <main+0xbb4>)
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2308      	movs	r3, #8
 800117c:	2223      	movs	r2, #35	; 0x23
 800117e:	217c      	movs	r1, #124	; 0x7c
 8001180:	f240 1033 	movw	r0, #307	; 0x133
 8001184:	f001 fe64 	bl	8002e50 <UTIL_LCD_FillRect>

		 //E
		 UTIL_LCD_FillRect(262, 44+48+48, 80,8, UTIL_LCD_COLOR_RED);
 8001188:	4b35      	ldr	r3, [pc, #212]	; (8001260 <main+0xbb4>)
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2308      	movs	r3, #8
 800118e:	2250      	movs	r2, #80	; 0x50
 8001190:	218c      	movs	r1, #140	; 0x8c
 8001192:	f44f 7083 	mov.w	r0, #262	; 0x106
 8001196:	f001 fe5b 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390-4-88, 44+48+48, 8, 40, UTIL_LCD_COLOR_RED);
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <main+0xbb4>)
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2328      	movs	r3, #40	; 0x28
 80011a0:	2208      	movs	r2, #8
 80011a2:	218c      	movs	r1, #140	; 0x8c
 80011a4:	f44f 7095 	mov.w	r0, #298	; 0x12a
 80011a8:	f001 fe52 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(350-88, 44+48+48, 8, 40, UTIL_LCD_COLOR_RED);
 80011ac:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <main+0xbb4>)
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2328      	movs	r3, #40	; 0x28
 80011b2:	2208      	movs	r2, #8
 80011b4:	218c      	movs	r1, #140	; 0x8c
 80011b6:	f44f 7083 	mov.w	r0, #262	; 0x106
 80011ba:	f001 fe49 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(430-8-88, 44+48+48, 8, 40, UTIL_LCD_COLOR_RED);
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <main+0xbb4>)
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2328      	movs	r3, #40	; 0x28
 80011c4:	2208      	movs	r2, #8
 80011c6:	218c      	movs	r1, #140	; 0x8c
 80011c8:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 80011cc:	f001 fe40 	bl	8002e50 <UTIL_LCD_FillRect>

		 //R
		 UTIL_LCD_FillRect(262, 44+48+48+48, 80,8, UTIL_LCD_COLOR_RED);
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <main+0xbb4>)
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2308      	movs	r3, #8
 80011d6:	2250      	movs	r2, #80	; 0x50
 80011d8:	21bc      	movs	r1, #188	; 0xbc
 80011da:	f44f 7083 	mov.w	r0, #262	; 0x106
 80011de:	f001 fe37 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390-4-88, 44+48+48+48, 8, 40, UTIL_LCD_COLOR_RED);
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <main+0xbb4>)
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2328      	movs	r3, #40	; 0x28
 80011e8:	2208      	movs	r2, #8
 80011ea:	21bc      	movs	r1, #188	; 0xbc
 80011ec:	f44f 7095 	mov.w	r0, #298	; 0x12a
 80011f0:	f001 fe2e 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(430-8-88, 44+48+48+48, 8, 40, UTIL_LCD_COLOR_RED);
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <main+0xbb4>)
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2328      	movs	r3, #40	; 0x28
 80011fa:	2208      	movs	r2, #8
 80011fc:	21bc      	movs	r1, #188	; 0xbc
 80011fe:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 8001202:	f001 fe25 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390-4-88, 44+48+48+48+32, 40, 8, UTIL_LCD_COLOR_RED);
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <main+0xbb4>)
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2308      	movs	r3, #8
 800120c:	2228      	movs	r2, #40	; 0x28
 800120e:	21dc      	movs	r1, #220	; 0xdc
 8001210:	f44f 7095 	mov.w	r0, #298	; 0x12a
 8001214:	f001 fe1c 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390-4-80-16, 44+48+48+48+8, 8, 8, UTIL_LCD_COLOR_RED);
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <main+0xbb4>)
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2308      	movs	r3, #8
 800121e:	2208      	movs	r2, #8
 8001220:	21c4      	movs	r1, #196	; 0xc4
 8001222:	f44f 7091 	mov.w	r0, #290	; 0x122
 8001226:	f001 fe13 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390-4-80-24, 44+48+48+48+16, 8, 8, UTIL_LCD_COLOR_RED);
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <main+0xbb4>)
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2308      	movs	r3, #8
 8001230:	2208      	movs	r2, #8
 8001232:	21cc      	movs	r1, #204	; 0xcc
 8001234:	f44f 708d 	mov.w	r0, #282	; 0x11a
 8001238:	f001 fe0a 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390-4-80-32, 44+48+48+48+24, 8, 8, UTIL_LCD_COLOR_RED);
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <main+0xbb4>)
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2308      	movs	r3, #8
 8001242:	2208      	movs	r2, #8
 8001244:	21d4      	movs	r1, #212	; 0xd4
 8001246:	f44f 7089 	mov.w	r0, #274	; 0x112
 800124a:	f001 fe01 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(390-4-80-40, 44+48+48+48+32, 8, 8, UTIL_LCD_COLOR_RED);
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <main+0xbb4>)
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2308      	movs	r3, #8
 8001254:	2208      	movs	r2, #8
 8001256:	21dc      	movs	r1, #220	; 0xdc
 8001258:	e004      	b.n	8001264 <main+0xbb8>
 800125a:	bf00      	nop
 800125c:	240001f1 	.word	0x240001f1
 8001260:	ffff0000 	.word	0xffff0000
 8001264:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8001268:	f001 fdf2 	bl	8002e50 <UTIL_LCD_FillRect>


		 UTIL_LCD_FillRect(100, 272/2-115, 50, 230, UTIL_LCD_COLOR_BLUE);
 800126c:	4bd7      	ldr	r3, [pc, #860]	; (80015cc <main+0xf20>)
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	23e6      	movs	r3, #230	; 0xe6
 8001272:	2232      	movs	r2, #50	; 0x32
 8001274:	2115      	movs	r1, #21
 8001276:	2064      	movs	r0, #100	; 0x64
 8001278:	f001 fdea 	bl	8002e50 <UTIL_LCD_FillRect>
		 //P 4 L 4 A 4 Y 15 A 4 G 4 A 4 I 4 N
		 //text 164
		 //43

		 //P
		 UTIL_LCD_FillRect(100+7, 32, 36,4, UTIL_LCD_COLOR_WHITE);
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2304      	movs	r3, #4
 8001284:	2224      	movs	r2, #36	; 0x24
 8001286:	2120      	movs	r1, #32
 8001288:	206b      	movs	r0, #107	; 0x6b
 800128a:	f001 fde1 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+36-4, 32, 4,20, UTIL_LCD_COLOR_WHITE);
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2314      	movs	r3, #20
 8001296:	2204      	movs	r2, #4
 8001298:	2120      	movs	r1, #32
 800129a:	208b      	movs	r0, #139	; 0x8b
 800129c:	f001 fdd8 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18-2, 32, 4,20, UTIL_LCD_COLOR_WHITE);
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2314      	movs	r3, #20
 80012a8:	2204      	movs	r2, #4
 80012aa:	2120      	movs	r1, #32
 80012ac:	207b      	movs	r0, #123	; 0x7b
 80012ae:	f001 fdcf 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18-2, 32+16, 18,4, UTIL_LCD_COLOR_WHITE);
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2304      	movs	r3, #4
 80012ba:	2212      	movs	r2, #18
 80012bc:	2130      	movs	r1, #48	; 0x30
 80012be:	207b      	movs	r0, #123	; 0x7b
 80012c0:	f001 fdc6 	bl	8002e50 <UTIL_LCD_FillRect>

		 //L
		 UTIL_LCD_FillRect(100+7, 32+24, 36,4, UTIL_LCD_COLOR_WHITE);
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2304      	movs	r3, #4
 80012cc:	2224      	movs	r2, #36	; 0x24
 80012ce:	2138      	movs	r1, #56	; 0x38
 80012d0:	206b      	movs	r0, #107	; 0x6b
 80012d2:	f001 fdbd 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7, 32+24, 4,20, UTIL_LCD_COLOR_WHITE);
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2314      	movs	r3, #20
 80012de:	2204      	movs	r2, #4
 80012e0:	2138      	movs	r1, #56	; 0x38
 80012e2:	206b      	movs	r0, #107	; 0x6b
 80012e4:	f001 fdb4 	bl	8002e50 <UTIL_LCD_FillRect>

		 //A
		 UTIL_LCD_FillRect(100+7, 76+4, 18,4, UTIL_LCD_COLOR_WHITE);
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2304      	movs	r3, #4
 80012f0:	2212      	movs	r2, #18
 80012f2:	2150      	movs	r1, #80	; 0x50
 80012f4:	206b      	movs	r0, #107	; 0x6b
 80012f6:	f001 fdab 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7, 76+20, 18,4, UTIL_LCD_COLOR_WHITE);
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2304      	movs	r3, #4
 8001302:	2212      	movs	r2, #18
 8001304:	2160      	movs	r1, #96	; 0x60
 8001306:	206b      	movs	r0, #107	; 0x6b
 8001308:	f001 fda2 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18-2, 76+4, 4,20, UTIL_LCD_COLOR_WHITE);
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2314      	movs	r3, #20
 8001314:	2204      	movs	r2, #4
 8001316:	2150      	movs	r1, #80	; 0x50
 8001318:	207b      	movs	r0, #123	; 0x7b
 800131a:	f001 fd99 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+2, 76+4, 5,4, UTIL_LCD_COLOR_WHITE);
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2304      	movs	r3, #4
 8001326:	2205      	movs	r2, #5
 8001328:	2150      	movs	r1, #80	; 0x50
 800132a:	207f      	movs	r0, #127	; 0x7f
 800132c:	f001 fd90 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+7, 76+4+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2304      	movs	r3, #4
 8001338:	2205      	movs	r2, #5
 800133a:	2154      	movs	r1, #84	; 0x54
 800133c:	2084      	movs	r0, #132	; 0x84
 800133e:	f001 fd87 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+12, 76+4+8, 5,4, UTIL_LCD_COLOR_WHITE);
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2304      	movs	r3, #4
 800134a:	2205      	movs	r2, #5
 800134c:	2158      	movs	r1, #88	; 0x58
 800134e:	2089      	movs	r0, #137	; 0x89
 8001350:	f001 fd7e 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+7, 76+4+12, 5,4, UTIL_LCD_COLOR_WHITE);
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2304      	movs	r3, #4
 800135c:	2205      	movs	r2, #5
 800135e:	215c      	movs	r1, #92	; 0x5c
 8001360:	2084      	movs	r0, #132	; 0x84
 8001362:	f001 fd75 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+2, 76+4+16, 5,4, UTIL_LCD_COLOR_WHITE);
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2304      	movs	r3, #4
 800136e:	2205      	movs	r2, #5
 8001370:	2160      	movs	r1, #96	; 0x60
 8001372:	207f      	movs	r0, #127	; 0x7f
 8001374:	f001 fd6c 	bl	8002e50 <UTIL_LCD_FillRect>

		 //Y
		 UTIL_LCD_FillRect(100+7, 104+10-2, 22,4, UTIL_LCD_COLOR_WHITE);
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2304      	movs	r3, #4
 8001380:	2216      	movs	r2, #22
 8001382:	2170      	movs	r1, #112	; 0x70
 8001384:	206b      	movs	r0, #107	; 0x6b
 8001386:	f001 fd63 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+12, 104, 5,4, UTIL_LCD_COLOR_WHITE);
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2304      	movs	r3, #4
 8001392:	2205      	movs	r2, #5
 8001394:	2168      	movs	r1, #104	; 0x68
 8001396:	2089      	movs	r0, #137	; 0x89
 8001398:	f001 fd5a 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+7, 104+4, 5,4, UTIL_LCD_COLOR_WHITE);
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2304      	movs	r3, #4
 80013a4:	2205      	movs	r2, #5
 80013a6:	216c      	movs	r1, #108	; 0x6c
 80013a8:	2084      	movs	r0, #132	; 0x84
 80013aa:	f001 fd51 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+2, 104+8, 5,4, UTIL_LCD_COLOR_WHITE);
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2304      	movs	r3, #4
 80013b6:	2205      	movs	r2, #5
 80013b8:	2170      	movs	r1, #112	; 0x70
 80013ba:	207f      	movs	r0, #127	; 0x7f
 80013bc:	f001 fd48 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+7, 104+12, 5,4, UTIL_LCD_COLOR_WHITE);
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2304      	movs	r3, #4
 80013c8:	2205      	movs	r2, #5
 80013ca:	2174      	movs	r1, #116	; 0x74
 80013cc:	2084      	movs	r0, #132	; 0x84
 80013ce:	f001 fd3f 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+12, 104+16, 5,4, UTIL_LCD_COLOR_WHITE);
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2304      	movs	r3, #4
 80013da:	2205      	movs	r2, #5
 80013dc:	2178      	movs	r1, #120	; 0x78
 80013de:	2089      	movs	r0, #137	; 0x89
 80013e0:	f001 fd36 	bl	8002e50 <UTIL_LCD_FillRect>

		 //A
		 UTIL_LCD_FillRect(100+7, 135+4, 18,4, UTIL_LCD_COLOR_WHITE);
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2304      	movs	r3, #4
 80013ec:	2212      	movs	r2, #18
 80013ee:	218b      	movs	r1, #139	; 0x8b
 80013f0:	206b      	movs	r0, #107	; 0x6b
 80013f2:	f001 fd2d 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7, 135+20, 18,4, UTIL_LCD_COLOR_WHITE);
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2304      	movs	r3, #4
 80013fe:	2212      	movs	r2, #18
 8001400:	219b      	movs	r1, #155	; 0x9b
 8001402:	206b      	movs	r0, #107	; 0x6b
 8001404:	f001 fd24 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18-2, 135+4, 4,20, UTIL_LCD_COLOR_WHITE);
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2314      	movs	r3, #20
 8001410:	2204      	movs	r2, #4
 8001412:	218b      	movs	r1, #139	; 0x8b
 8001414:	207b      	movs	r0, #123	; 0x7b
 8001416:	f001 fd1b 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+2, 135+4, 5,4, UTIL_LCD_COLOR_WHITE);
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2304      	movs	r3, #4
 8001422:	2205      	movs	r2, #5
 8001424:	218b      	movs	r1, #139	; 0x8b
 8001426:	207f      	movs	r0, #127	; 0x7f
 8001428:	f001 fd12 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+7, 135+4+4, 5,4, UTIL_LCD_COLOR_WHITE);
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2304      	movs	r3, #4
 8001434:	2205      	movs	r2, #5
 8001436:	218f      	movs	r1, #143	; 0x8f
 8001438:	2084      	movs	r0, #132	; 0x84
 800143a:	f001 fd09 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+12, 135+4+8, 5,4, UTIL_LCD_COLOR_WHITE);
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2304      	movs	r3, #4
 8001446:	2205      	movs	r2, #5
 8001448:	2193      	movs	r1, #147	; 0x93
 800144a:	2089      	movs	r0, #137	; 0x89
 800144c:	f001 fd00 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+7, 135+4+12, 5,4, UTIL_LCD_COLOR_WHITE);
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2304      	movs	r3, #4
 8001458:	2205      	movs	r2, #5
 800145a:	2197      	movs	r1, #151	; 0x97
 800145c:	2084      	movs	r0, #132	; 0x84
 800145e:	f001 fcf7 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+2, 135+4+16, 5,4, UTIL_LCD_COLOR_WHITE);
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2304      	movs	r3, #4
 800146a:	2205      	movs	r2, #5
 800146c:	219b      	movs	r1, #155	; 0x9b
 800146e:	207f      	movs	r0, #127	; 0x7f
 8001470:	f001 fcee 	bl	8002e50 <UTIL_LCD_FillRect>

		 //G
		 UTIL_LCD_FillRect(100+7, 139+24, 36,4, UTIL_LCD_COLOR_WHITE);
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2304      	movs	r3, #4
 800147c:	2224      	movs	r2, #36	; 0x24
 800147e:	21a3      	movs	r1, #163	; 0xa3
 8001480:	206b      	movs	r0, #107	; 0x6b
 8001482:	f001 fce5 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7, 139+24, 4,20, UTIL_LCD_COLOR_WHITE);
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2314      	movs	r3, #20
 800148e:	2204      	movs	r2, #4
 8001490:	21a3      	movs	r1, #163	; 0xa3
 8001492:	206b      	movs	r0, #107	; 0x6b
 8001494:	f001 fcdc 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7, 139+24+16, 18,4, UTIL_LCD_COLOR_WHITE);
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2304      	movs	r3, #4
 80014a0:	2212      	movs	r2, #18
 80014a2:	21b3      	movs	r1, #179	; 0xb3
 80014a4:	206b      	movs	r0, #107	; 0x6b
 80014a6:	f001 fcd3 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+16, 139+24+10, 4,10, UTIL_LCD_COLOR_WHITE);
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	230a      	movs	r3, #10
 80014b2:	2204      	movs	r2, #4
 80014b4:	21ad      	movs	r1, #173	; 0xad
 80014b6:	207b      	movs	r0, #123	; 0x7b
 80014b8:	f001 fcca 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+32, 139+24, 4,20, UTIL_LCD_COLOR_WHITE);
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2314      	movs	r3, #20
 80014c4:	2204      	movs	r2, #4
 80014c6:	21a3      	movs	r1, #163	; 0xa3
 80014c8:	208b      	movs	r0, #139	; 0x8b
 80014ca:	f001 fcc1 	bl	8002e50 <UTIL_LCD_FillRect>

		 //A
		 UTIL_LCD_FillRect(100+7, 183+4, 18,4, UTIL_LCD_COLOR_WHITE);
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2304      	movs	r3, #4
 80014d6:	2212      	movs	r2, #18
 80014d8:	21bb      	movs	r1, #187	; 0xbb
 80014da:	206b      	movs	r0, #107	; 0x6b
 80014dc:	f001 fcb8 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7, 183+20, 18,4, UTIL_LCD_COLOR_WHITE);
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2304      	movs	r3, #4
 80014e8:	2212      	movs	r2, #18
 80014ea:	21cb      	movs	r1, #203	; 0xcb
 80014ec:	206b      	movs	r0, #107	; 0x6b
 80014ee:	f001 fcaf 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18-2, 183+4, 4,20, UTIL_LCD_COLOR_WHITE);
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2314      	movs	r3, #20
 80014fa:	2204      	movs	r2, #4
 80014fc:	21bb      	movs	r1, #187	; 0xbb
 80014fe:	207b      	movs	r0, #123	; 0x7b
 8001500:	f001 fca6 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+2, 183+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2304      	movs	r3, #4
 800150c:	2205      	movs	r2, #5
 800150e:	21bb      	movs	r1, #187	; 0xbb
 8001510:	207f      	movs	r0, #127	; 0x7f
 8001512:	f001 fc9d 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+7, 183+4+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2304      	movs	r3, #4
 800151e:	2205      	movs	r2, #5
 8001520:	21bf      	movs	r1, #191	; 0xbf
 8001522:	2084      	movs	r0, #132	; 0x84
 8001524:	f001 fc94 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+12, 183+4+8, 5,4, UTIL_LCD_COLOR_WHITE);
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2304      	movs	r3, #4
 8001530:	2205      	movs	r2, #5
 8001532:	21c3      	movs	r1, #195	; 0xc3
 8001534:	2089      	movs	r0, #137	; 0x89
 8001536:	f001 fc8b 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+7, 183+4+12, 5,4, UTIL_LCD_COLOR_WHITE);
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2304      	movs	r3, #4
 8001542:	2205      	movs	r2, #5
 8001544:	21c7      	movs	r1, #199	; 0xc7
 8001546:	2084      	movs	r0, #132	; 0x84
 8001548:	f001 fc82 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+18+2, 183+4+16, 5,4, UTIL_LCD_COLOR_WHITE);
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2304      	movs	r3, #4
 8001554:	2205      	movs	r2, #5
 8001556:	21cb      	movs	r1, #203	; 0xcb
 8001558:	207f      	movs	r0, #127	; 0x7f
 800155a:	f001 fc79 	bl	8002e50 <UTIL_LCD_FillRect>

		 //I
		 UTIL_LCD_FillRect(100+7, 183+28, 36,4, UTIL_LCD_COLOR_WHITE);
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2304      	movs	r3, #4
 8001566:	2224      	movs	r2, #36	; 0x24
 8001568:	21d3      	movs	r1, #211	; 0xd3
 800156a:	206b      	movs	r0, #107	; 0x6b
 800156c:	f001 fc70 	bl	8002e50 <UTIL_LCD_FillRect>

		 //N
		 UTIL_LCD_FillRect(100+7, 219, 36,4, UTIL_LCD_COLOR_WHITE);
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2304      	movs	r3, #4
 8001578:	2224      	movs	r2, #36	; 0x24
 800157a:	21db      	movs	r1, #219	; 0xdb
 800157c:	206b      	movs	r0, #107	; 0x6b
 800157e:	f001 fc67 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7, 219+16, 36,4, UTIL_LCD_COLOR_WHITE);
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2304      	movs	r3, #4
 800158a:	2224      	movs	r2, #36	; 0x24
 800158c:	21eb      	movs	r1, #235	; 0xeb
 800158e:	206b      	movs	r0, #107	; 0x6b
 8001590:	f001 fc5e 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+29-7, 219+4, 7,4, UTIL_LCD_COLOR_WHITE);
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2304      	movs	r3, #4
 800159c:	2207      	movs	r2, #7
 800159e:	21df      	movs	r1, #223	; 0xdf
 80015a0:	2081      	movs	r0, #129	; 0x81
 80015a2:	f001 fc55 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+29-14, 219+8, 7,4, UTIL_LCD_COLOR_WHITE);
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2304      	movs	r3, #4
 80015ae:	2207      	movs	r2, #7
 80015b0:	21e3      	movs	r1, #227	; 0xe3
 80015b2:	207a      	movs	r0, #122	; 0x7a
 80015b4:	f001 fc4c 	bl	8002e50 <UTIL_LCD_FillRect>
		 UTIL_LCD_FillRect(100+7+29-21, 219+12, 7,4, UTIL_LCD_COLOR_WHITE);
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2304      	movs	r3, #4
 80015c0:	2207      	movs	r2, #7
 80015c2:	21e7      	movs	r1, #231	; 0xe7
 80015c4:	2073      	movs	r0, #115	; 0x73
 80015c6:	f001 fc43 	bl	8002e50 <UTIL_LCD_FillRect>
 80015ca:	e001      	b.n	80015d0 <main+0xf24>
 80015cc:	ff0000ff 	.word	0xff0000ff


		 while(1) {
			 ts_status = BSP_TS_GetState(0, &TS_State);
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4619      	mov	r1, r3
 80015d4:	2000      	movs	r0, #0
 80015d6:	f004 fc49 	bl	8005e6c <BSP_TS_GetState>
 80015da:	4603      	mov	r3, r0
 80015dc:	623b      	str	r3, [r7, #32]

			 if (TS_State.TouchDetected) {
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d03f      	beq.n	8001664 <main+0xfb8>
				y = TS_State.TouchY;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
				x = TS_State.TouchX;
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	84fb      	strh	r3, [r7, #38]	; 0x26
				if(x > 100 && x < 150 && y > 272/2-115 && y < 272/2+115){
 80015ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d938      	bls.n	8001664 <main+0xfb8>
 80015f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015f4:	2b95      	cmp	r3, #149	; 0x95
 80015f6:	d835      	bhi.n	8001664 <main+0xfb8>
 80015f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015fa:	2b15      	cmp	r3, #21
 80015fc:	d932      	bls.n	8001664 <main+0xfb8>
 80015fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001600:	2bfa      	cmp	r3, #250	; 0xfa
 8001602:	d82f      	bhi.n	8001664 <main+0xfb8>
					ball_x = 330;
 8001604:	4b66      	ldr	r3, [pc, #408]	; (80017a0 <main+0x10f4>)
 8001606:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800160a:	801a      	strh	r2, [r3, #0]
					ball_y = 272 / 2;
 800160c:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <main+0x10f8>)
 800160e:	2288      	movs	r2, #136	; 0x88
 8001610:	801a      	strh	r2, [r3, #0]
					ball_dx = 3;
 8001612:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <main+0x10fc>)
 8001614:	2203      	movs	r2, #3
 8001616:	801a      	strh	r2, [r3, #0]
					ball_dy = 3;
 8001618:	4b64      	ldr	r3, [pc, #400]	; (80017ac <main+0x1100>)
 800161a:	2203      	movs	r2, #3
 800161c:	801a      	strh	r2, [r3, #0]

					playerx = y_size / 2-RECT_HEIGHT/2;
 800161e:	4b64      	ldr	r3, [pc, #400]	; (80017b0 <main+0x1104>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	085a      	lsrs	r2, r3, #1
 8001624:	4b63      	ldr	r3, [pc, #396]	; (80017b4 <main+0x1108>)
 8001626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162a:	2b00      	cmp	r3, #0
 800162c:	da00      	bge.n	8001630 <main+0xf84>
 800162e:	3301      	adds	r3, #1
 8001630:	105b      	asrs	r3, r3, #1
 8001632:	b21b      	sxth	r3, r3
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	4a60      	ldr	r2, [pc, #384]	; (80017b8 <main+0x110c>)
 8001638:	6013      	str	r3, [r2, #0]

					gameOver = false;
 800163a:	4b60      	ldr	r3, [pc, #384]	; (80017bc <main+0x1110>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
					gameStart = false;
 8001640:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <main+0x1114>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]


					UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8001646:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800164a:	f001 fa63 	bl	8002b14 <UTIL_LCD_SetBackColor>
					UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800164e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001652:	f001 fadd 	bl	8002c10 <UTIL_LCD_Clear>
					rowsSelected = Display_InitialContent();
 8001656:	f000 f8bb 	bl	80017d0 <Display_InitialContent>
 800165a:	62b8      	str	r0, [r7, #40]	; 0x28

					bricksBroken = 0;
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <main+0x1118>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

					break;
 8001662:	e003      	b.n	800166c <main+0xfc0>
				}

			 }
			 HAL_Delay(50);
 8001664:	2032      	movs	r0, #50	; 0x32
 8001666:	f004 fe0b 	bl	8006280 <HAL_Delay>
			 ts_status = BSP_TS_GetState(0, &TS_State);
 800166a:	e7b1      	b.n	80015d0 <main+0xf24>
		 }
	}



    if (TS_State.TouchDetected) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d064      	beq.n	800173c <main+0x1090>
    	y = TS_State.TouchY;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	85fb      	strh	r3, [r7, #46]	; 0x2e
    	if(y != last_y){
 8001676:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001678:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800167a:	429a      	cmp	r2, r3
 800167c:	d05c      	beq.n	8001738 <main+0x108c>
			gameStart = true;
 800167e:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <main+0x1114>)
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
			if(y < RECT_HEIGHT / 2){
 8001684:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001686:	4b4b      	ldr	r3, [pc, #300]	; (80017b4 <main+0x1108>)
 8001688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168c:	2b00      	cmp	r3, #0
 800168e:	da00      	bge.n	8001692 <main+0xfe6>
 8001690:	3301      	adds	r3, #1
 8001692:	105b      	asrs	r3, r3, #1
 8001694:	b21b      	sxth	r3, r3
 8001696:	429a      	cmp	r2, r3
 8001698:	da08      	bge.n	80016ac <main+0x1000>
				y = RECT_HEIGHT / 2;
 800169a:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <main+0x1108>)
 800169c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da00      	bge.n	80016a6 <main+0xffa>
 80016a4:	3301      	adds	r3, #1
 80016a6:	105b      	asrs	r3, r3, #1
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
			}

			if(y > y_size - RECT_HEIGHT / 2){
 80016ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80016ae:	4b40      	ldr	r3, [pc, #256]	; (80017b0 <main+0x1104>)
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	4b40      	ldr	r3, [pc, #256]	; (80017b4 <main+0x1108>)
 80016b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	da00      	bge.n	80016be <main+0x1012>
 80016bc:	3301      	adds	r3, #1
 80016be:	105b      	asrs	r3, r3, #1
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	1acb      	subs	r3, r1, r3
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d90d      	bls.n	80016e4 <main+0x1038>
				y = y_size - RECT_HEIGHT / 2;
 80016c8:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <main+0x1104>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <main+0x1108>)
 80016d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	da00      	bge.n	80016da <main+0x102e>
 80016d8:	3301      	adds	r3, #1
 80016da:	105b      	asrs	r3, r3, #1
 80016dc:	b21b      	sxth	r3, r3
 80016de:	b29b      	uxth	r3, r3
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
			}
			playerx = y;
 80016e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016e6:	4a34      	ldr	r2, [pc, #208]	; (80017b8 <main+0x110c>)
 80016e8:	6013      	str	r3, [r2, #0]
			UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 80016ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80016ee:	f001 fa11 	bl	8002b14 <UTIL_LCD_SetBackColor>
			UTIL_LCD_FillRect(20, 0, RECT_WIDTH, y_size, UTIL_LCD_COLOR_BLACK);
 80016f2:	4b2f      	ldr	r3, [pc, #188]	; (80017b0 <main+0x1104>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80016fa:	9200      	str	r2, [sp, #0]
 80016fc:	2214      	movs	r2, #20
 80016fe:	2100      	movs	r1, #0
 8001700:	2014      	movs	r0, #20
 8001702:	f001 fba5 	bl	8002e50 <UTIL_LCD_FillRect>
			UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8001706:	4830      	ldr	r0, [pc, #192]	; (80017c8 <main+0x111c>)
 8001708:	f001 f9f0 	bl	8002aec <UTIL_LCD_SetTextColor>
			UTIL_LCD_FillRect(20, y - RECT_HEIGHT / 2, RECT_WIDTH, RECT_HEIGHT, UTIL_LCD_COLOR_BLUE);
 800170c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800170e:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <main+0x1108>)
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	2b00      	cmp	r3, #0
 8001716:	da00      	bge.n	800171a <main+0x106e>
 8001718:	3301      	adds	r3, #1
 800171a:	105b      	asrs	r3, r3, #1
 800171c:	b21b      	sxth	r3, r3
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	4619      	mov	r1, r3
 8001722:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <main+0x1108>)
 8001724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001728:	461a      	mov	r2, r3
 800172a:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <main+0x111c>)
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	4613      	mov	r3, r2
 8001730:	2214      	movs	r2, #20
 8001732:	2014      	movs	r0, #20
 8001734:	f001 fb8c 	bl	8002e50 <UTIL_LCD_FillRect>
    	}
    	last_y = y;
 8001738:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800173a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }


    if (CheckForUserInput() > 0) {
 800173c:	f000 fe90 	bl	8002460 <CheckForUserInput>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00f      	beq.n	8001766 <main+0x10ba>
      ButtonState = 0;
 8001746:	4b21      	ldr	r3, [pc, #132]	; (80017cc <main+0x1120>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_OUT_Stop(0);
 800174c:	2000      	movs	r0, #0
 800174e:	f002 fc75 	bl	800403c <BSP_AUDIO_OUT_Stop>
      BSP_AUDIO_OUT_DeInit(0);
 8001752:	2000      	movs	r0, #0
 8001754:	f002 fc2e 	bl	8003fb4 <BSP_AUDIO_OUT_DeInit>
      BSP_AUDIO_IN_Stop(1);
 8001758:	2001      	movs	r0, #1
 800175a:	f002 fd5f 	bl	800421c <BSP_AUDIO_IN_Stop>
      BSP_AUDIO_IN_DeInit(1);
 800175e:	2001      	movs	r0, #1
 8001760:	f002 fce2 	bl	8004128 <BSP_AUDIO_IN_DeInit>
      return;
 8001764:	e017      	b.n	8001796 <main+0x10ea>
    }

    HAL_Delay(17);
 8001766:	2011      	movs	r0, #17
 8001768:	f004 fd8a 	bl	8006280 <HAL_Delay>

    if (CheckForUserInput() > 0){
 800176c:	f000 fe78 	bl	8002460 <CheckForUserInput>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	f43f a801 	beq.w	800077a <main+0xce>
      ButtonState = 0;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <main+0x1120>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_OUT_Stop(0);
 800177e:	2000      	movs	r0, #0
 8001780:	f002 fc5c 	bl	800403c <BSP_AUDIO_OUT_Stop>
      BSP_AUDIO_OUT_DeInit(0);
 8001784:	2000      	movs	r0, #0
 8001786:	f002 fc15 	bl	8003fb4 <BSP_AUDIO_OUT_DeInit>
      BSP_AUDIO_IN_Stop(1);
 800178a:	2001      	movs	r0, #1
 800178c:	f002 fd46 	bl	800421c <BSP_AUDIO_IN_Stop>
      BSP_AUDIO_IN_DeInit(1);
 8001790:	2001      	movs	r0, #1
 8001792:	f002 fcc9 	bl	8004128 <BSP_AUDIO_IN_DeInit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001796:	4618      	mov	r0, r3
 8001798:	3730      	adds	r7, #48	; 0x30
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	240001e8 	.word	0x240001e8
 80017a4:	240001ea 	.word	0x240001ea
 80017a8:	240001ec 	.word	0x240001ec
 80017ac:	240001ee 	.word	0x240001ee
 80017b0:	240000d8 	.word	0x240000d8
 80017b4:	24000000 	.word	0x24000000
 80017b8:	240000dc 	.word	0x240000dc
 80017bc:	240001f1 	.word	0x240001f1
 80017c0:	240001f0 	.word	0x240001f0
 80017c4:	240000e0 	.word	0x240000e0
 80017c8:	ff0000ff 	.word	0xff0000ff
 80017cc:	240000d0 	.word	0x240000d0

080017d0 <Display_InitialContent>:
  * @brief  Display main demo messages
  * @param  None
  * @retval None
  */
int Display_InitialContent(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af02      	add	r7, sp, #8
  BSP_LCD_GetXSize(0, &x_size);
 80017d6:	49d5      	ldr	r1, [pc, #852]	; (8001b2c <Display_InitialContent+0x35c>)
 80017d8:	2000      	movs	r0, #0
 80017da:	f003 fbe5 	bl	8004fa8 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 80017de:	49d4      	ldr	r1, [pc, #848]	; (8001b30 <Display_InitialContent+0x360>)
 80017e0:	2000      	movs	r0, #0
 80017e2:	f003 fbff 	bl	8004fe4 <BSP_LCD_GetYSize>

  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 80017e6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80017ea:	f001 f993 	bl	8002b14 <UTIL_LCD_SetBackColor>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80017ee:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80017f2:	f001 fa0d 	bl	8002c10 <UTIL_LCD_Clear>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80017f6:	f04f 30ff 	mov.w	r0, #4294967295
 80017fa:	f001 f977 	bl	8002aec <UTIL_LCD_SetTextColor>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 80017fe:	48cd      	ldr	r0, [pc, #820]	; (8001b34 <Display_InitialContent+0x364>)
 8001800:	f001 f974 	bl	8002aec <UTIL_LCD_SetTextColor>


  UTIL_LCD_FillRect(50, 272 / 2 - 100, 50, 200, UTIL_LCD_COLOR_BLUE);
 8001804:	4bcb      	ldr	r3, [pc, #812]	; (8001b34 <Display_InitialContent+0x364>)
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	23c8      	movs	r3, #200	; 0xc8
 800180a:	2232      	movs	r2, #50	; 0x32
 800180c:	2124      	movs	r1, #36	; 0x24
 800180e:	2032      	movs	r0, #50	; 0x32
 8001810:	f001 fb1e 	bl	8002e50 <UTIL_LCD_FillRect>
  UTIL_LCD_FillRect(150, 272 / 2 - 100, 50, 200, UTIL_LCD_COLOR_BLUE);
 8001814:	4bc7      	ldr	r3, [pc, #796]	; (8001b34 <Display_InitialContent+0x364>)
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	23c8      	movs	r3, #200	; 0xc8
 800181a:	2232      	movs	r2, #50	; 0x32
 800181c:	2124      	movs	r1, #36	; 0x24
 800181e:	2096      	movs	r0, #150	; 0x96
 8001820:	f001 fb16 	bl	8002e50 <UTIL_LCD_FillRect>
  UTIL_LCD_FillRect(250, 272 / 2 - 100, 50, 200, UTIL_LCD_COLOR_BLUE);
 8001824:	4bc3      	ldr	r3, [pc, #780]	; (8001b34 <Display_InitialContent+0x364>)
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	23c8      	movs	r3, #200	; 0xc8
 800182a:	2232      	movs	r2, #50	; 0x32
 800182c:	2124      	movs	r1, #36	; 0x24
 800182e:	20fa      	movs	r0, #250	; 0xfa
 8001830:	f001 fb0e 	bl	8002e50 <UTIL_LCD_FillRect>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f001 f958 	bl	8002aec <UTIL_LCD_SetTextColor>
     UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 800183c:	48bd      	ldr	r0, [pc, #756]	; (8001b34 <Display_InitialContent+0x364>)
 800183e:	f001 f969 	bl	8002b14 <UTIL_LCD_SetBackColor>

     //B
     UTIL_LCD_FillRect(350, 22, 8, 32, UTIL_LCD_COLOR_RED);
 8001842:	4bbd      	ldr	r3, [pc, #756]	; (8001b38 <Display_InitialContent+0x368>)
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2320      	movs	r3, #32
 8001848:	2208      	movs	r2, #8
 800184a:	2116      	movs	r1, #22
 800184c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001850:	f001 fafe 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(350, 22, 80,8, UTIL_LCD_COLOR_RED);
 8001854:	4bb8      	ldr	r3, [pc, #736]	; (8001b38 <Display_InitialContent+0x368>)
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2308      	movs	r3, #8
 800185a:	2250      	movs	r2, #80	; 0x50
 800185c:	2116      	movs	r1, #22
 800185e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001862:	f001 faf5 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(350+8, 62-8, 64,8, UTIL_LCD_COLOR_RED);
 8001866:	4bb4      	ldr	r3, [pc, #720]	; (8001b38 <Display_InitialContent+0x368>)
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2308      	movs	r3, #8
 800186c:	2240      	movs	r2, #64	; 0x40
 800186e:	2136      	movs	r1, #54	; 0x36
 8001870:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001874:	f001 faec 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(390-4, 22, 8, 32, UTIL_LCD_COLOR_RED);
 8001878:	4baf      	ldr	r3, [pc, #700]	; (8001b38 <Display_InitialContent+0x368>)
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2320      	movs	r3, #32
 800187e:	2208      	movs	r2, #8
 8001880:	2116      	movs	r1, #22
 8001882:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8001886:	f001 fae3 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(430-8, 22, 8, 32, UTIL_LCD_COLOR_RED);
 800188a:	4bab      	ldr	r3, [pc, #684]	; (8001b38 <Display_InitialContent+0x368>)
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2320      	movs	r3, #32
 8001890:	2208      	movs	r2, #8
 8001892:	2116      	movs	r1, #22
 8001894:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8001898:	f001 fada 	bl	8002e50 <UTIL_LCD_FillRect>

     UTIL_LCD_FillRect(390-4, 62-8, 8, 8, UTIL_LCD_COLOR_BLACK);
 800189c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2308      	movs	r3, #8
 80018a4:	2208      	movs	r2, #8
 80018a6:	2136      	movs	r1, #54	; 0x36
 80018a8:	f44f 70c1 	mov.w	r0, #386	; 0x182
 80018ac:	f001 fad0 	bl	8002e50 <UTIL_LCD_FillRect>


     //R
     UTIL_LCD_FillRect(350, 22+44, 80,8, UTIL_LCD_COLOR_RED);
 80018b0:	4ba1      	ldr	r3, [pc, #644]	; (8001b38 <Display_InitialContent+0x368>)
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2308      	movs	r3, #8
 80018b6:	2250      	movs	r2, #80	; 0x50
 80018b8:	2142      	movs	r1, #66	; 0x42
 80018ba:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80018be:	f001 fac7 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(390-4, 22+44, 8, 40, UTIL_LCD_COLOR_RED);
 80018c2:	4b9d      	ldr	r3, [pc, #628]	; (8001b38 <Display_InitialContent+0x368>)
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2328      	movs	r3, #40	; 0x28
 80018c8:	2208      	movs	r2, #8
 80018ca:	2142      	movs	r1, #66	; 0x42
 80018cc:	f44f 70c1 	mov.w	r0, #386	; 0x182
 80018d0:	f001 fabe 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(430-8, 22+44, 8, 40, UTIL_LCD_COLOR_RED);
 80018d4:	4b98      	ldr	r3, [pc, #608]	; (8001b38 <Display_InitialContent+0x368>)
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2328      	movs	r3, #40	; 0x28
 80018da:	2208      	movs	r2, #8
 80018dc:	2142      	movs	r1, #66	; 0x42
 80018de:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 80018e2:	f001 fab5 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(390, 66+40-8, 40,8, UTIL_LCD_COLOR_RED);
 80018e6:	4b94      	ldr	r3, [pc, #592]	; (8001b38 <Display_InitialContent+0x368>)
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2308      	movs	r3, #8
 80018ec:	2228      	movs	r2, #40	; 0x28
 80018ee:	2162      	movs	r1, #98	; 0x62
 80018f0:	f44f 70c3 	mov.w	r0, #390	; 0x186
 80018f4:	f001 faac 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(390-4-8, 22+44+8, 8, 8, UTIL_LCD_COLOR_RED);
 80018f8:	4b8f      	ldr	r3, [pc, #572]	; (8001b38 <Display_InitialContent+0x368>)
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2308      	movs	r3, #8
 80018fe:	2208      	movs	r2, #8
 8001900:	214a      	movs	r1, #74	; 0x4a
 8001902:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 8001906:	f001 faa3 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(390-4-8*2, 22+44+8*2, 8, 8, UTIL_LCD_COLOR_RED);
 800190a:	4b8b      	ldr	r3, [pc, #556]	; (8001b38 <Display_InitialContent+0x368>)
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2308      	movs	r3, #8
 8001910:	2208      	movs	r2, #8
 8001912:	2152      	movs	r1, #82	; 0x52
 8001914:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8001918:	f001 fa9a 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(390-4-8*3, 22+44+8*3, 8, 8, UTIL_LCD_COLOR_RED);
 800191c:	4b86      	ldr	r3, [pc, #536]	; (8001b38 <Display_InitialContent+0x368>)
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2308      	movs	r3, #8
 8001922:	2208      	movs	r2, #8
 8001924:	215a      	movs	r1, #90	; 0x5a
 8001926:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 800192a:	f001 fa91 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(390-4-8*4, 22+44+8*4, 8, 8, UTIL_LCD_COLOR_RED);
 800192e:	4b82      	ldr	r3, [pc, #520]	; (8001b38 <Display_InitialContent+0x368>)
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2308      	movs	r3, #8
 8001934:	2208      	movs	r2, #8
 8001936:	2162      	movs	r1, #98	; 0x62
 8001938:	f44f 70b1 	mov.w	r0, #354	; 0x162
 800193c:	f001 fa88 	bl	8002e50 <UTIL_LCD_FillRect>

     //I
     UTIL_LCD_FillRect(350, 22+40*2+4*2, 80,8, UTIL_LCD_COLOR_RED);
 8001940:	4b7d      	ldr	r3, [pc, #500]	; (8001b38 <Display_InitialContent+0x368>)
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2308      	movs	r3, #8
 8001946:	2250      	movs	r2, #80	; 0x50
 8001948:	216e      	movs	r1, #110	; 0x6e
 800194a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800194e:	f001 fa7f 	bl	8002e50 <UTIL_LCD_FillRect>

     //C
     UTIL_LCD_FillRect(350, 22+40*2+4*3+8, 80,8, UTIL_LCD_COLOR_RED);
 8001952:	4b79      	ldr	r3, [pc, #484]	; (8001b38 <Display_InitialContent+0x368>)
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2308      	movs	r3, #8
 8001958:	2250      	movs	r2, #80	; 0x50
 800195a:	217a      	movs	r1, #122	; 0x7a
 800195c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001960:	f001 fa76 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(350, 22+40*2+4*3+8, 8, 40, UTIL_LCD_COLOR_RED);
 8001964:	4b74      	ldr	r3, [pc, #464]	; (8001b38 <Display_InitialContent+0x368>)
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2328      	movs	r3, #40	; 0x28
 800196a:	2208      	movs	r2, #8
 800196c:	217a      	movs	r1, #122	; 0x7a
 800196e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001972:	f001 fa6d 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(430-8, 22+40*2+4*3+8, 8, 40, UTIL_LCD_COLOR_RED);
 8001976:	4b70      	ldr	r3, [pc, #448]	; (8001b38 <Display_InitialContent+0x368>)
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2328      	movs	r3, #40	; 0x28
 800197c:	2208      	movs	r2, #8
 800197e:	217a      	movs	r1, #122	; 0x7a
 8001980:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8001984:	f001 fa64 	bl	8002e50 <UTIL_LCD_FillRect>

     //K
     UTIL_LCD_FillRect(350, 22+40*3+4*4+8, 80,8, UTIL_LCD_COLOR_RED);
 8001988:	4b6b      	ldr	r3, [pc, #428]	; (8001b38 <Display_InitialContent+0x368>)
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2308      	movs	r3, #8
 800198e:	2250      	movs	r2, #80	; 0x50
 8001990:	21a6      	movs	r1, #166	; 0xa6
 8001992:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001996:	f001 fa5b 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(390-4-4, 22+40*3+4*4+8+8, 11, 8, UTIL_LCD_COLOR_RED);
 800199a:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <Display_InitialContent+0x368>)
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2308      	movs	r3, #8
 80019a0:	220b      	movs	r2, #11
 80019a2:	21ae      	movs	r1, #174	; 0xae
 80019a4:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 80019a8:	f001 fa52 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(390-8-11*1, 22+40*3+4*4+8+8*2, 11, 8, UTIL_LCD_COLOR_RED);
 80019ac:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <Display_InitialContent+0x368>)
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2308      	movs	r3, #8
 80019b2:	220b      	movs	r2, #11
 80019b4:	21b6      	movs	r1, #182	; 0xb6
 80019b6:	f240 1073 	movw	r0, #371	; 0x173
 80019ba:	f001 fa49 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(390-8-11*2, 22+40*3+4*4+8+8*3, 11, 8, UTIL_LCD_COLOR_RED);
 80019be:	4b5e      	ldr	r3, [pc, #376]	; (8001b38 <Display_InitialContent+0x368>)
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2308      	movs	r3, #8
 80019c4:	220b      	movs	r2, #11
 80019c6:	21be      	movs	r1, #190	; 0xbe
 80019c8:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80019cc:	f001 fa40 	bl	8002e50 <UTIL_LCD_FillRect>
	 UTIL_LCD_FillRect(390-8-11*3, 22+40*3+4*4+8+8*4, 11, 8, UTIL_LCD_COLOR_RED);
 80019d0:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <Display_InitialContent+0x368>)
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2308      	movs	r3, #8
 80019d6:	220b      	movs	r2, #11
 80019d8:	21c6      	movs	r1, #198	; 0xc6
 80019da:	f240 105d 	movw	r0, #349	; 0x15d
 80019de:	f001 fa37 	bl	8002e50 <UTIL_LCD_FillRect>
	 UTIL_LCD_FillRect(390-4+4, 22+40*3+4*4+8+8, 8, 8, UTIL_LCD_COLOR_RED);
 80019e2:	4b55      	ldr	r3, [pc, #340]	; (8001b38 <Display_InitialContent+0x368>)
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2308      	movs	r3, #8
 80019e8:	2208      	movs	r2, #8
 80019ea:	21ae      	movs	r1, #174	; 0xae
 80019ec:	f44f 70c3 	mov.w	r0, #390	; 0x186
 80019f0:	f001 fa2e 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(390-8+11*1+4, 22+40*3+4*4+8+8*2, 11, 8, UTIL_LCD_COLOR_RED);
 80019f4:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <Display_InitialContent+0x368>)
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2308      	movs	r3, #8
 80019fa:	220b      	movs	r2, #11
 80019fc:	21b6      	movs	r1, #182	; 0xb6
 80019fe:	f240 108d 	movw	r0, #397	; 0x18d
 8001a02:	f001 fa25 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(390-8+11*2+4, 22+40*3+4*4+8+8*3, 11, 8, UTIL_LCD_COLOR_RED);
 8001a06:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <Display_InitialContent+0x368>)
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	220b      	movs	r2, #11
 8001a0e:	21be      	movs	r1, #190	; 0xbe
 8001a10:	f44f 70cc 	mov.w	r0, #408	; 0x198
 8001a14:	f001 fa1c 	bl	8002e50 <UTIL_LCD_FillRect>
	 UTIL_LCD_FillRect(390-8+11*3+4, 22+40*3+4*4+8+8*4, 11, 8, UTIL_LCD_COLOR_RED);
 8001a18:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <Display_InitialContent+0x368>)
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	220b      	movs	r2, #11
 8001a20:	21c6      	movs	r1, #198	; 0xc6
 8001a22:	f240 10a3 	movw	r0, #419	; 0x1a3
 8001a26:	f001 fa13 	bl	8002e50 <UTIL_LCD_FillRect>

	 //S
     UTIL_LCD_FillRect(390, 22+40*4+5*4+8, 40,8, UTIL_LCD_COLOR_RED);
 8001a2a:	4b43      	ldr	r3, [pc, #268]	; (8001b38 <Display_InitialContent+0x368>)
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2308      	movs	r3, #8
 8001a30:	2228      	movs	r2, #40	; 0x28
 8001a32:	21d2      	movs	r1, #210	; 0xd2
 8001a34:	f44f 70c3 	mov.w	r0, #390	; 0x186
 8001a38:	f001 fa0a 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(350, 22+40*4+5*4+8+40-8, 40,8, UTIL_LCD_COLOR_RED);
 8001a3c:	4b3e      	ldr	r3, [pc, #248]	; (8001b38 <Display_InitialContent+0x368>)
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2308      	movs	r3, #8
 8001a42:	2228      	movs	r2, #40	; 0x28
 8001a44:	21f2      	movs	r1, #242	; 0xf2
 8001a46:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001a4a:	f001 fa01 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(350, 22+40*4+5*4+8, 8, 40, UTIL_LCD_COLOR_RED);
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <Display_InitialContent+0x368>)
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2328      	movs	r3, #40	; 0x28
 8001a54:	2208      	movs	r2, #8
 8001a56:	21d2      	movs	r1, #210	; 0xd2
 8001a58:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001a5c:	f001 f9f8 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(430-8, 22+40*4+5*4+8, 8, 40, UTIL_LCD_COLOR_RED);
 8001a60:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <Display_InitialContent+0x368>)
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2328      	movs	r3, #40	; 0x28
 8001a66:	2208      	movs	r2, #8
 8001a68:	21d2      	movs	r1, #210	; 0xd2
 8001a6a:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8001a6e:	f001 f9ef 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(390-4, 22+40*4+5*4+8, 8, 40, UTIL_LCD_COLOR_RED);
 8001a72:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <Display_InitialContent+0x368>)
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2328      	movs	r3, #40	; 0x28
 8001a78:	2208      	movs	r2, #8
 8001a7a:	21d2      	movs	r1, #210	; 0xd2
 8001a7c:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8001a80:	f001 f9e6 	bl	8002e50 <UTIL_LCD_FillRect>


     //E
     UTIL_LCD_FillRect(50+7, 90, 36,4, UTIL_LCD_COLOR_WHITE);
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	2224      	movs	r2, #36	; 0x24
 8001a8e:	215a      	movs	r1, #90	; 0x5a
 8001a90:	2039      	movs	r0, #57	; 0x39
 8001a92:	f001 f9dd 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7, 90, 4,20, UTIL_LCD_COLOR_WHITE);
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2314      	movs	r3, #20
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	215a      	movs	r1, #90	; 0x5a
 8001aa2:	2039      	movs	r0, #57	; 0x39
 8001aa4:	f001 f9d4 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+36-4, 90, 4,20, UTIL_LCD_COLOR_WHITE);
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2314      	movs	r3, #20
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	215a      	movs	r1, #90	; 0x5a
 8001ab4:	2059      	movs	r0, #89	; 0x59
 8001ab6:	f001 f9cb 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+18-2, 90, 4,20, UTIL_LCD_COLOR_WHITE);
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2314      	movs	r3, #20
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	215a      	movs	r1, #90	; 0x5a
 8001ac6:	2049      	movs	r0, #73	; 0x49
 8001ac8:	f001 f9c2 	bl	8002e50 <UTIL_LCD_FillRect>

     //A
     UTIL_LCD_FillRect(50+7, 110+4, 18,4, UTIL_LCD_COLOR_WHITE);
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	2212      	movs	r2, #18
 8001ad6:	2172      	movs	r1, #114	; 0x72
 8001ad8:	2039      	movs	r0, #57	; 0x39
 8001ada:	f001 f9b9 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7, 130, 18,4, UTIL_LCD_COLOR_WHITE);
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	2212      	movs	r2, #18
 8001ae8:	2182      	movs	r1, #130	; 0x82
 8001aea:	2039      	movs	r0, #57	; 0x39
 8001aec:	f001 f9b0 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+18-2, 110+4, 4,20, UTIL_LCD_COLOR_WHITE);
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2314      	movs	r3, #20
 8001af8:	2204      	movs	r2, #4
 8001afa:	2172      	movs	r1, #114	; 0x72
 8001afc:	2049      	movs	r0, #73	; 0x49
 8001afe:	f001 f9a7 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+18+2, 110+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2304      	movs	r3, #4
 8001b0a:	2205      	movs	r2, #5
 8001b0c:	2172      	movs	r1, #114	; 0x72
 8001b0e:	204d      	movs	r0, #77	; 0x4d
 8001b10:	f001 f99e 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+18+7, 110+4+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	2205      	movs	r2, #5
 8001b1e:	2176      	movs	r1, #118	; 0x76
 8001b20:	2052      	movs	r0, #82	; 0x52
 8001b22:	f001 f995 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+18+12, 110+4+8, 5,4, UTIL_LCD_COLOR_WHITE);
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e007      	b.n	8001b3c <Display_InitialContent+0x36c>
 8001b2c:	240000d4 	.word	0x240000d4
 8001b30:	240000d8 	.word	0x240000d8
 8001b34:	ff0000ff 	.word	0xff0000ff
 8001b38:	ffff0000 	.word	0xffff0000
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2304      	movs	r3, #4
 8001b40:	2205      	movs	r2, #5
 8001b42:	217a      	movs	r1, #122	; 0x7a
 8001b44:	2057      	movs	r0, #87	; 0x57
 8001b46:	f001 f983 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+18+7, 110+4+12, 5,4, UTIL_LCD_COLOR_WHITE);
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2304      	movs	r3, #4
 8001b52:	2205      	movs	r2, #5
 8001b54:	217e      	movs	r1, #126	; 0x7e
 8001b56:	2052      	movs	r0, #82	; 0x52
 8001b58:	f001 f97a 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+18+2, 110+4+16, 5,4, UTIL_LCD_COLOR_WHITE);
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2304      	movs	r3, #4
 8001b64:	2205      	movs	r2, #5
 8001b66:	2182      	movs	r1, #130	; 0x82
 8001b68:	204d      	movs	r0, #77	; 0x4d
 8001b6a:	f001 f971 	bl	8002e50 <UTIL_LCD_FillRect>

     //S
     UTIL_LCD_FillRect(50+7, 130+8, 4,20, UTIL_LCD_COLOR_WHITE);
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2314      	movs	r3, #20
 8001b76:	2204      	movs	r2, #4
 8001b78:	218a      	movs	r1, #138	; 0x8a
 8001b7a:	2039      	movs	r0, #57	; 0x39
 8001b7c:	f001 f968 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+36-4, 130+8, 4,20, UTIL_LCD_COLOR_WHITE);
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2314      	movs	r3, #20
 8001b88:	2204      	movs	r2, #4
 8001b8a:	218a      	movs	r1, #138	; 0x8a
 8001b8c:	2059      	movs	r0, #89	; 0x59
 8001b8e:	f001 f95f 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+18-2, 130+8, 4,20, UTIL_LCD_COLOR_WHITE);
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2314      	movs	r3, #20
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	218a      	movs	r1, #138	; 0x8a
 8001b9e:	2049      	movs	r0, #73	; 0x49
 8001ba0:	f001 f956 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7, 130+8+16, 18,4, UTIL_LCD_COLOR_WHITE);
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2304      	movs	r3, #4
 8001bac:	2212      	movs	r2, #18
 8001bae:	219a      	movs	r1, #154	; 0x9a
 8001bb0:	2039      	movs	r0, #57	; 0x39
 8001bb2:	f001 f94d 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+16, 130+8, 18,4, UTIL_LCD_COLOR_WHITE);
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	2212      	movs	r2, #18
 8001bc0:	218a      	movs	r1, #138	; 0x8a
 8001bc2:	2049      	movs	r0, #73	; 0x49
 8001bc4:	f001 f944 	bl	8002e50 <UTIL_LCD_FillRect>


     //Y
     UTIL_LCD_FillRect(50+7, 150+12+10-2, 22,4, UTIL_LCD_COLOR_WHITE);
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2304      	movs	r3, #4
 8001bd0:	2216      	movs	r2, #22
 8001bd2:	21aa      	movs	r1, #170	; 0xaa
 8001bd4:	2039      	movs	r0, #57	; 0x39
 8001bd6:	f001 f93b 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+18+12, 150+12, 5,4, UTIL_LCD_COLOR_WHITE);
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2304      	movs	r3, #4
 8001be2:	2205      	movs	r2, #5
 8001be4:	21a2      	movs	r1, #162	; 0xa2
 8001be6:	2057      	movs	r0, #87	; 0x57
 8001be8:	f001 f932 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+18+7, 150+12+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	2205      	movs	r2, #5
 8001bf6:	21a6      	movs	r1, #166	; 0xa6
 8001bf8:	2052      	movs	r0, #82	; 0x52
 8001bfa:	f001 f929 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+18+2, 150+12+8, 5,4, UTIL_LCD_COLOR_WHITE);
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2304      	movs	r3, #4
 8001c06:	2205      	movs	r2, #5
 8001c08:	21aa      	movs	r1, #170	; 0xaa
 8001c0a:	204d      	movs	r0, #77	; 0x4d
 8001c0c:	f001 f920 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+18+7, 150+12+12, 5,4, UTIL_LCD_COLOR_WHITE);
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2304      	movs	r3, #4
 8001c18:	2205      	movs	r2, #5
 8001c1a:	21ae      	movs	r1, #174	; 0xae
 8001c1c:	2052      	movs	r0, #82	; 0x52
 8001c1e:	f001 f917 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(50+7+18+12, 150+12+16, 5,4, UTIL_LCD_COLOR_WHITE);
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2304      	movs	r3, #4
 8001c2a:	2205      	movs	r2, #5
 8001c2c:	21b2      	movs	r1, #178	; 0xb2
 8001c2e:	2057      	movs	r0, #87	; 0x57
 8001c30:	f001 f90e 	bl	8002e50 <UTIL_LCD_FillRect>



     //H
     UTIL_LCD_FillRect(250+7, 90, 36,4, UTIL_LCD_COLOR_WHITE);
 8001c34:	f04f 33ff 	mov.w	r3, #4294967295
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	2224      	movs	r2, #36	; 0x24
 8001c3e:	215a      	movs	r1, #90	; 0x5a
 8001c40:	f240 1001 	movw	r0, #257	; 0x101
 8001c44:	f001 f904 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7+18-2, 90, 4,20, UTIL_LCD_COLOR_WHITE);
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2314      	movs	r3, #20
 8001c50:	2204      	movs	r2, #4
 8001c52:	215a      	movs	r1, #90	; 0x5a
 8001c54:	f240 1011 	movw	r0, #273	; 0x111
 8001c58:	f001 f8fa 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7, 90+20-4, 36,4, UTIL_LCD_COLOR_WHITE);
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2304      	movs	r3, #4
 8001c64:	2224      	movs	r2, #36	; 0x24
 8001c66:	216a      	movs	r1, #106	; 0x6a
 8001c68:	f240 1001 	movw	r0, #257	; 0x101
 8001c6c:	f001 f8f0 	bl	8002e50 <UTIL_LCD_FillRect>


     //A
     UTIL_LCD_FillRect(250+7, 110+4, 18,4, UTIL_LCD_COLOR_WHITE);
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2304      	movs	r3, #4
 8001c78:	2212      	movs	r2, #18
 8001c7a:	2172      	movs	r1, #114	; 0x72
 8001c7c:	f240 1001 	movw	r0, #257	; 0x101
 8001c80:	f001 f8e6 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7, 130, 18,4, UTIL_LCD_COLOR_WHITE);
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	2212      	movs	r2, #18
 8001c8e:	2182      	movs	r1, #130	; 0x82
 8001c90:	f240 1001 	movw	r0, #257	; 0x101
 8001c94:	f001 f8dc 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7+18-2, 110+4, 4,20, UTIL_LCD_COLOR_WHITE);
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2314      	movs	r3, #20
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	2172      	movs	r1, #114	; 0x72
 8001ca4:	f240 1011 	movw	r0, #273	; 0x111
 8001ca8:	f001 f8d2 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7+18+2, 110+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	2205      	movs	r2, #5
 8001cb6:	2172      	movs	r1, #114	; 0x72
 8001cb8:	f240 1015 	movw	r0, #277	; 0x115
 8001cbc:	f001 f8c8 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7+18+7, 110+4+4, 5,4, UTIL_LCD_COLOR_WHITE);
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	2205      	movs	r2, #5
 8001cca:	2176      	movs	r1, #118	; 0x76
 8001ccc:	f44f 708d 	mov.w	r0, #282	; 0x11a
 8001cd0:	f001 f8be 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7+18+12, 110+4+8, 5,4, UTIL_LCD_COLOR_WHITE);
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2304      	movs	r3, #4
 8001cdc:	2205      	movs	r2, #5
 8001cde:	217a      	movs	r1, #122	; 0x7a
 8001ce0:	f240 101f 	movw	r0, #287	; 0x11f
 8001ce4:	f001 f8b4 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7+18+7, 110+4+12, 5,4, UTIL_LCD_COLOR_WHITE);
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	2304      	movs	r3, #4
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	217e      	movs	r1, #126	; 0x7e
 8001cf4:	f44f 708d 	mov.w	r0, #282	; 0x11a
 8001cf8:	f001 f8aa 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7+18+2, 110+4+16, 5,4, UTIL_LCD_COLOR_WHITE);
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2304      	movs	r3, #4
 8001d04:	2205      	movs	r2, #5
 8001d06:	2182      	movs	r1, #130	; 0x82
 8001d08:	f240 1015 	movw	r0, #277	; 0x115
 8001d0c:	f001 f8a0 	bl	8002e50 <UTIL_LCD_FillRect>


     //R
     UTIL_LCD_FillRect(250+7+18-2, 130+8, 4,20, UTIL_LCD_COLOR_WHITE);
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2314      	movs	r3, #20
 8001d18:	2204      	movs	r2, #4
 8001d1a:	218a      	movs	r1, #138	; 0x8a
 8001d1c:	f240 1011 	movw	r0, #273	; 0x111
 8001d20:	f001 f896 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7+36-4, 130+8, 4,20, UTIL_LCD_COLOR_WHITE);
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2314      	movs	r3, #20
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	218a      	movs	r1, #138	; 0x8a
 8001d30:	f240 1021 	movw	r0, #289	; 0x121
 8001d34:	f001 f88c 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7+18-2, 130+8+16, 18,4, UTIL_LCD_COLOR_WHITE);
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2304      	movs	r3, #4
 8001d40:	2212      	movs	r2, #18
 8001d42:	219a      	movs	r1, #154	; 0x9a
 8001d44:	f240 1011 	movw	r0, #273	; 0x111
 8001d48:	f001 f882 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7, 130+8, 36,4, UTIL_LCD_COLOR_WHITE);
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2304      	movs	r3, #4
 8001d54:	2224      	movs	r2, #36	; 0x24
 8001d56:	218a      	movs	r1, #138	; 0x8a
 8001d58:	f240 1001 	movw	r0, #257	; 0x101
 8001d5c:	f001 f878 	bl	8002e50 <UTIL_LCD_FillRect>

     UTIL_LCD_FillRect(250+7+18-2-4, 130+8+4, 4,4, UTIL_LCD_COLOR_WHITE);
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2304      	movs	r3, #4
 8001d68:	2204      	movs	r2, #4
 8001d6a:	218e      	movs	r1, #142	; 0x8e
 8001d6c:	f240 100d 	movw	r0, #269	; 0x10d
 8001d70:	f001 f86e 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7+18-2-8, 130+8+8, 4,4, UTIL_LCD_COLOR_WHITE);
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	2192      	movs	r1, #146	; 0x92
 8001d80:	f240 1009 	movw	r0, #265	; 0x109
 8001d84:	f001 f864 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7+18-2-12, 130+8+12, 4,4, UTIL_LCD_COLOR_WHITE);
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	2304      	movs	r3, #4
 8001d90:	2204      	movs	r2, #4
 8001d92:	2196      	movs	r1, #150	; 0x96
 8001d94:	f240 1005 	movw	r0, #261	; 0x105
 8001d98:	f001 f85a 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7+18-2-16, 130+8+16, 4,4, UTIL_LCD_COLOR_WHITE);
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2304      	movs	r3, #4
 8001da4:	2204      	movs	r2, #4
 8001da6:	219a      	movs	r1, #154	; 0x9a
 8001da8:	f240 1001 	movw	r0, #257	; 0x101
 8001dac:	f001 f850 	bl	8002e50 <UTIL_LCD_FillRect>


     //D
     UTIL_LCD_FillRect(250+7, 150+12, 36,4, UTIL_LCD_COLOR_WHITE);
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2304      	movs	r3, #4
 8001db8:	2224      	movs	r2, #36	; 0x24
 8001dba:	21a2      	movs	r1, #162	; 0xa2
 8001dbc:	f240 1001 	movw	r0, #257	; 0x101
 8001dc0:	f001 f846 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7+4, 150+12+16, 28,4, UTIL_LCD_COLOR_WHITE);
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2304      	movs	r3, #4
 8001dcc:	221c      	movs	r2, #28
 8001dce:	21b2      	movs	r1, #178	; 0xb2
 8001dd0:	f240 1005 	movw	r0, #261	; 0x105
 8001dd4:	f001 f83c 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7+36-4, 150+12, 4,16, UTIL_LCD_COLOR_WHITE);
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2310      	movs	r3, #16
 8001de0:	2204      	movs	r2, #4
 8001de2:	21a2      	movs	r1, #162	; 0xa2
 8001de4:	f240 1021 	movw	r0, #289	; 0x121
 8001de8:	f001 f832 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(250+7, 150+12, 4,16, UTIL_LCD_COLOR_WHITE);
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2310      	movs	r3, #16
 8001df4:	2204      	movs	r2, #4
 8001df6:	21a2      	movs	r1, #162	; 0xa2
 8001df8:	f240 1001 	movw	r0, #257	; 0x101
 8001dfc:	f001 f828 	bl	8002e50 <UTIL_LCD_FillRect>


     //M
     UTIL_LCD_FillRect(150+7, 74, 36,4, UTIL_LCD_COLOR_WHITE);
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2304      	movs	r3, #4
 8001e08:	2224      	movs	r2, #36	; 0x24
 8001e0a:	214a      	movs	r1, #74	; 0x4a
 8001e0c:	209d      	movs	r0, #157	; 0x9d
 8001e0e:	f001 f81f 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(150+7, 90, 36,4, UTIL_LCD_COLOR_WHITE);
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2304      	movs	r3, #4
 8001e1a:	2224      	movs	r2, #36	; 0x24
 8001e1c:	215a      	movs	r1, #90	; 0x5a
 8001e1e:	209d      	movs	r0, #157	; 0x9d
 8001e20:	f001 f816 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(150+7+28, 78, 4,4, UTIL_LCD_COLOR_WHITE);
 8001e24:	f04f 33ff 	mov.w	r3, #4294967295
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	214e      	movs	r1, #78	; 0x4e
 8001e30:	20b9      	movs	r0, #185	; 0xb9
 8001e32:	f001 f80d 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(150+7+24, 82, 4,4, UTIL_LCD_COLOR_WHITE);
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	2204      	movs	r2, #4
 8001e40:	2152      	movs	r1, #82	; 0x52
 8001e42:	20b5      	movs	r0, #181	; 0xb5
 8001e44:	f001 f804 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(150+7+28, 78+8, 4,4, UTIL_LCD_COLOR_WHITE);
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2304      	movs	r3, #4
 8001e50:	2204      	movs	r2, #4
 8001e52:	2156      	movs	r1, #86	; 0x56
 8001e54:	20b9      	movs	r0, #185	; 0xb9
 8001e56:	f000 fffb 	bl	8002e50 <UTIL_LCD_FillRect>


     //E
     UTIL_LCD_FillRect(150+7, 98, 36,4, UTIL_LCD_COLOR_WHITE);
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2304      	movs	r3, #4
 8001e62:	2224      	movs	r2, #36	; 0x24
 8001e64:	2162      	movs	r1, #98	; 0x62
 8001e66:	209d      	movs	r0, #157	; 0x9d
 8001e68:	f000 fff2 	bl	8002e50 <UTIL_LCD_FillRect>
     UTIL_LCD_FillRect(150+7, 98, 4,20, UTIL_LCD_COLOR_WHITE);
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2314      	movs	r3, #20
 8001e74:	2204      	movs	r2, #4
 8001e76:	2162      	movs	r1, #98	; 0x62
 8001e78:	209d      	movs	r0, #157	; 0x9d
 8001e7a:	f000 ffe9 	bl	8002e50 <UTIL_LCD_FillRect>
	 UTIL_LCD_FillRect(150+7+36-4, 98, 4,20, UTIL_LCD_COLOR_WHITE);
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2314      	movs	r3, #20
 8001e86:	2204      	movs	r2, #4
 8001e88:	2162      	movs	r1, #98	; 0x62
 8001e8a:	20bd      	movs	r0, #189	; 0xbd
 8001e8c:	f000 ffe0 	bl	8002e50 <UTIL_LCD_FillRect>
	 UTIL_LCD_FillRect(150+7+18-2, 98, 4,20, UTIL_LCD_COLOR_WHITE);
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2314      	movs	r3, #20
 8001e98:	2204      	movs	r2, #4
 8001e9a:	2162      	movs	r1, #98	; 0x62
 8001e9c:	20ad      	movs	r0, #173	; 0xad
 8001e9e:	f000 ffd7 	bl	8002e50 <UTIL_LCD_FillRect>



	 //D
	 UTIL_LCD_FillRect(150+7, 98+24, 36,4, UTIL_LCD_COLOR_WHITE);
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	2224      	movs	r2, #36	; 0x24
 8001eac:	217a      	movs	r1, #122	; 0x7a
 8001eae:	209d      	movs	r0, #157	; 0x9d
 8001eb0:	f000 ffce 	bl	8002e50 <UTIL_LCD_FillRect>
	 UTIL_LCD_FillRect(150+7+4, 98+24+16, 28,4, UTIL_LCD_COLOR_WHITE);
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2304      	movs	r3, #4
 8001ebc:	221c      	movs	r2, #28
 8001ebe:	218a      	movs	r1, #138	; 0x8a
 8001ec0:	20a1      	movs	r0, #161	; 0xa1
 8001ec2:	f000 ffc5 	bl	8002e50 <UTIL_LCD_FillRect>
	 UTIL_LCD_FillRect(150+7+36-4, 98+24, 4,16, UTIL_LCD_COLOR_WHITE);
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2310      	movs	r3, #16
 8001ece:	2204      	movs	r2, #4
 8001ed0:	217a      	movs	r1, #122	; 0x7a
 8001ed2:	20bd      	movs	r0, #189	; 0xbd
 8001ed4:	f000 ffbc 	bl	8002e50 <UTIL_LCD_FillRect>
	 UTIL_LCD_FillRect(150+7, 98+24, 4,16, UTIL_LCD_COLOR_WHITE);
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	2310      	movs	r3, #16
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	217a      	movs	r1, #122	; 0x7a
 8001ee4:	209d      	movs	r0, #157	; 0x9d
 8001ee6:	f000 ffb3 	bl	8002e50 <UTIL_LCD_FillRect>

	 //I
	 UTIL_LCD_FillRect(150+7, 98+24+24, 36,4, UTIL_LCD_COLOR_WHITE);
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	2224      	movs	r2, #36	; 0x24
 8001ef4:	2192      	movs	r1, #146	; 0x92
 8001ef6:	209d      	movs	r0, #157	; 0x9d
 8001ef8:	f000 ffaa 	bl	8002e50 <UTIL_LCD_FillRect>

	 //U
	 UTIL_LCD_FillRect(150+7+4, 98+24+24+8, 32,4, UTIL_LCD_COLOR_WHITE);
 8001efc:	f04f 33ff 	mov.w	r3, #4294967295
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2304      	movs	r3, #4
 8001f04:	2220      	movs	r2, #32
 8001f06:	219a      	movs	r1, #154	; 0x9a
 8001f08:	20a1      	movs	r0, #161	; 0xa1
 8001f0a:	f000 ffa1 	bl	8002e50 <UTIL_LCD_FillRect>
	 UTIL_LCD_FillRect(150+7+4, 98+24+24+8+16, 32,4, UTIL_LCD_COLOR_WHITE);
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2304      	movs	r3, #4
 8001f16:	2220      	movs	r2, #32
 8001f18:	21aa      	movs	r1, #170	; 0xaa
 8001f1a:	20a1      	movs	r0, #161	; 0xa1
 8001f1c:	f000 ff98 	bl	8002e50 <UTIL_LCD_FillRect>
	 UTIL_LCD_FillRect(150+7, 98+24+24+12, 4,12, UTIL_LCD_COLOR_WHITE);
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	230c      	movs	r3, #12
 8001f28:	2204      	movs	r2, #4
 8001f2a:	219e      	movs	r1, #158	; 0x9e
 8001f2c:	209d      	movs	r0, #157	; 0x9d
 8001f2e:	f000 ff8f 	bl	8002e50 <UTIL_LCD_FillRect>

	 //M
	 UTIL_LCD_FillRect(150+7, 98+24+24+24+8, 36,4, UTIL_LCD_COLOR_WHITE);
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2304      	movs	r3, #4
 8001f3a:	2224      	movs	r2, #36	; 0x24
 8001f3c:	21b2      	movs	r1, #178	; 0xb2
 8001f3e:	209d      	movs	r0, #157	; 0x9d
 8001f40:	f000 ff86 	bl	8002e50 <UTIL_LCD_FillRect>
	 UTIL_LCD_FillRect(150+7, 98+24+24+24+8+16, 36,4, UTIL_LCD_COLOR_WHITE);
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	2224      	movs	r2, #36	; 0x24
 8001f4e:	21c2      	movs	r1, #194	; 0xc2
 8001f50:	209d      	movs	r0, #157	; 0x9d
 8001f52:	f000 ff7d 	bl	8002e50 <UTIL_LCD_FillRect>
	 UTIL_LCD_FillRect(150+7+28, 98+24+24+24+8+4, 4,4, UTIL_LCD_COLOR_WHITE);
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	2204      	movs	r2, #4
 8001f60:	21b6      	movs	r1, #182	; 0xb6
 8001f62:	20b9      	movs	r0, #185	; 0xb9
 8001f64:	f000 ff74 	bl	8002e50 <UTIL_LCD_FillRect>
	 UTIL_LCD_FillRect(150+7+24, 98+24+24+24+8+8, 4,4, UTIL_LCD_COLOR_WHITE);
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2304      	movs	r3, #4
 8001f70:	2204      	movs	r2, #4
 8001f72:	21ba      	movs	r1, #186	; 0xba
 8001f74:	20b5      	movs	r0, #181	; 0xb5
 8001f76:	f000 ff6b 	bl	8002e50 <UTIL_LCD_FillRect>
	 UTIL_LCD_FillRect(150+7+28, 98+24+24+24+8+12, 4,4, UTIL_LCD_COLOR_WHITE);
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2304      	movs	r3, #4
 8001f82:	2204      	movs	r2, #4
 8001f84:	21be      	movs	r1, #190	; 0xbe
 8001f86:	20b9      	movs	r0, #185	; 0xb9
 8001f88:	f000 ff62 	bl	8002e50 <UTIL_LCD_FillRect>


  TS_State_t TS_State;
    while (1){
      BSP_TS_GetState(0, &TS_State);
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4619      	mov	r1, r3
 8001f90:	2000      	movs	r0, #0
 8001f92:	f003 ff6b 	bl	8005e6c <BSP_TS_GetState>
      if (TS_State.TouchDetected){
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 81a8 	beq.w	80022ee <Display_InitialContent+0xb1e>
    	  uint16_t y = TS_State.TouchY;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	81fb      	strh	r3, [r7, #14]
    	  uint16_t x = TS_State.TouchX;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	81bb      	strh	r3, [r7, #12]
    	  if(y > 272 / 2 - 100 && y < 271 / 2 + 100){
 8001fa6:	89fb      	ldrh	r3, [r7, #14]
 8001fa8:	2b24      	cmp	r3, #36	; 0x24
 8001faa:	f240 81a0 	bls.w	80022ee <Display_InitialContent+0xb1e>
 8001fae:	89fb      	ldrh	r3, [r7, #14]
 8001fb0:	2bea      	cmp	r3, #234	; 0xea
 8001fb2:	f200 819c 	bhi.w	80022ee <Display_InitialContent+0xb1e>
    		  if(x > 50 && x < 100){
 8001fb6:	89bb      	ldrh	r3, [r7, #12]
 8001fb8:	2b32      	cmp	r3, #50	; 0x32
 8001fba:	f240 8085 	bls.w	80020c8 <Display_InitialContent+0x8f8>
 8001fbe:	89bb      	ldrh	r3, [r7, #12]
 8001fc0:	2b63      	cmp	r3, #99	; 0x63
 8001fc2:	f200 8081 	bhi.w	80020c8 <Display_InitialContent+0x8f8>
    			  RECT_HEIGHT = 80;
 8001fc6:	4bce      	ldr	r3, [pc, #824]	; (8002300 <Display_InitialContent+0xb30>)
 8001fc8:	2250      	movs	r2, #80	; 0x50
 8001fca:	801a      	strh	r2, [r3, #0]
    			  gameMode = 1;
 8001fcc:	4bcd      	ldr	r3, [pc, #820]	; (8002304 <Display_InitialContent+0xb34>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	801a      	strh	r2, [r3, #0]

    			  setupScreen();
 8001fd2:	f000 f99b 	bl	800230c <setupScreen>

    			  UTIL_LCD_FillRect(200, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 8001fd6:	4bcc      	ldr	r3, [pc, #816]	; (8002308 <Display_InitialContent+0xb38>)
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2328      	movs	r3, #40	; 0x28
 8001fdc:	220a      	movs	r2, #10
 8001fde:	2174      	movs	r1, #116	; 0x74
 8001fe0:	20c8      	movs	r0, #200	; 0xc8
 8001fe2:	f000 ff35 	bl	8002e50 <UTIL_LCD_FillRect>
    			  UTIL_LCD_FillRect(175, 272/2-10, 10, 30, UTIL_LCD_COLOR_RED);
 8001fe6:	4bc8      	ldr	r3, [pc, #800]	; (8002308 <Display_InitialContent+0xb38>)
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	231e      	movs	r3, #30
 8001fec:	220a      	movs	r2, #10
 8001fee:	217e      	movs	r1, #126	; 0x7e
 8001ff0:	20af      	movs	r0, #175	; 0xaf
 8001ff2:	f000 ff2d 	bl	8002e50 <UTIL_LCD_FillRect>
    			  UTIL_LCD_FillRect(150, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 8001ff6:	4bc4      	ldr	r3, [pc, #784]	; (8002308 <Display_InitialContent+0xb38>)
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2328      	movs	r3, #40	; 0x28
 8001ffc:	220a      	movs	r2, #10
 8001ffe:	2174      	movs	r1, #116	; 0x74
 8002000:	2096      	movs	r0, #150	; 0x96
 8002002:	f000 ff25 	bl	8002e50 <UTIL_LCD_FillRect>
    			  UTIL_LCD_FillRect(150, 272/2+10, 50, 10, UTIL_LCD_COLOR_RED);
 8002006:	4bc0      	ldr	r3, [pc, #768]	; (8002308 <Display_InitialContent+0xb38>)
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	230a      	movs	r3, #10
 800200c:	2232      	movs	r2, #50	; 0x32
 800200e:	2192      	movs	r1, #146	; 0x92
 8002010:	2096      	movs	r0, #150	; 0x96
 8002012:	f000 ff1d 	bl	8002e50 <UTIL_LCD_FillRect>

    			  HAL_Delay(1000);
 8002016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800201a:	f004 f931 	bl	8006280 <HAL_Delay>

    			  UTIL_LCD_FillRect(150, 272/2-20, 60, 60, UTIL_LCD_COLOR_BLACK);
 800201e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	233c      	movs	r3, #60	; 0x3c
 8002026:	223c      	movs	r2, #60	; 0x3c
 8002028:	2174      	movs	r1, #116	; 0x74
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f000 ff10 	bl	8002e50 <UTIL_LCD_FillRect>
    			  UTIL_LCD_FillRect(200, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 8002030:	4bb5      	ldr	r3, [pc, #724]	; (8002308 <Display_InitialContent+0xb38>)
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2328      	movs	r3, #40	; 0x28
 8002036:	220a      	movs	r2, #10
 8002038:	2174      	movs	r1, #116	; 0x74
 800203a:	20c8      	movs	r0, #200	; 0xc8
 800203c:	f000 ff08 	bl	8002e50 <UTIL_LCD_FillRect>
    			  UTIL_LCD_FillRect(175, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 8002040:	4bb1      	ldr	r3, [pc, #708]	; (8002308 <Display_InitialContent+0xb38>)
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2328      	movs	r3, #40	; 0x28
 8002046:	220a      	movs	r2, #10
 8002048:	2174      	movs	r1, #116	; 0x74
 800204a:	20af      	movs	r0, #175	; 0xaf
 800204c:	f000 ff00 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(150, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 8002050:	4bad      	ldr	r3, [pc, #692]	; (8002308 <Display_InitialContent+0xb38>)
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2328      	movs	r3, #40	; 0x28
 8002056:	220a      	movs	r2, #10
 8002058:	2174      	movs	r1, #116	; 0x74
 800205a:	2096      	movs	r0, #150	; 0x96
 800205c:	f000 fef8 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(150, 272/2-20, 25, 10, UTIL_LCD_COLOR_RED);
 8002060:	4ba9      	ldr	r3, [pc, #676]	; (8002308 <Display_InitialContent+0xb38>)
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	230a      	movs	r3, #10
 8002066:	2219      	movs	r2, #25
 8002068:	2174      	movs	r1, #116	; 0x74
 800206a:	2096      	movs	r0, #150	; 0x96
 800206c:	f000 fef0 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(175, 272/2+10, 25, 10, UTIL_LCD_COLOR_RED);
 8002070:	4ba5      	ldr	r3, [pc, #660]	; (8002308 <Display_InitialContent+0xb38>)
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	230a      	movs	r3, #10
 8002076:	2219      	movs	r2, #25
 8002078:	2192      	movs	r1, #146	; 0x92
 800207a:	20af      	movs	r0, #175	; 0xaf
 800207c:	f000 fee8 	bl	8002e50 <UTIL_LCD_FillRect>

    			  HAL_Delay(1000);
 8002080:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002084:	f004 f8fc 	bl	8006280 <HAL_Delay>

    			  UTIL_LCD_FillRect(150, 272/2-20, 60, 60, UTIL_LCD_COLOR_BLACK);
 8002088:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	233c      	movs	r3, #60	; 0x3c
 8002090:	223c      	movs	r2, #60	; 0x3c
 8002092:	2174      	movs	r1, #116	; 0x74
 8002094:	2096      	movs	r0, #150	; 0x96
 8002096:	f000 fedb 	bl	8002e50 <UTIL_LCD_FillRect>
    			  UTIL_LCD_FillRect(150, 272/2+10, 60, 10, UTIL_LCD_COLOR_RED);
 800209a:	4b9b      	ldr	r3, [pc, #620]	; (8002308 <Display_InitialContent+0xb38>)
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	230a      	movs	r3, #10
 80020a0:	223c      	movs	r2, #60	; 0x3c
 80020a2:	2192      	movs	r1, #146	; 0x92
 80020a4:	2096      	movs	r0, #150	; 0x96
 80020a6:	f000 fed3 	bl	8002e50 <UTIL_LCD_FillRect>

    			  HAL_Delay(1000);
 80020aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020ae:	f004 f8e7 	bl	8006280 <HAL_Delay>

    			  UTIL_LCD_FillRect(150, 272/2-20, 60, 60, UTIL_LCD_COLOR_BLACK);
 80020b2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	233c      	movs	r3, #60	; 0x3c
 80020ba:	223c      	movs	r2, #60	; 0x3c
 80020bc:	2174      	movs	r1, #116	; 0x74
 80020be:	2096      	movs	r0, #150	; 0x96
 80020c0:	f000 fec6 	bl	8002e50 <UTIL_LCD_FillRect>


    			  return 5;
 80020c4:	2305      	movs	r3, #5
 80020c6:	e116      	b.n	80022f6 <Display_InitialContent+0xb26>
    		  }
    		  else if(x > 150 && x < 200){
 80020c8:	89bb      	ldrh	r3, [r7, #12]
 80020ca:	2b96      	cmp	r3, #150	; 0x96
 80020cc:	f240 8085 	bls.w	80021da <Display_InitialContent+0xa0a>
 80020d0:	89bb      	ldrh	r3, [r7, #12]
 80020d2:	2bc7      	cmp	r3, #199	; 0xc7
 80020d4:	f200 8081 	bhi.w	80021da <Display_InitialContent+0xa0a>
    			  RECT_HEIGHT = 50;
 80020d8:	4b89      	ldr	r3, [pc, #548]	; (8002300 <Display_InitialContent+0xb30>)
 80020da:	2232      	movs	r2, #50	; 0x32
 80020dc:	801a      	strh	r2, [r3, #0]
				  gameMode = 2;
 80020de:	4b89      	ldr	r3, [pc, #548]	; (8002304 <Display_InitialContent+0xb34>)
 80020e0:	2202      	movs	r2, #2
 80020e2:	801a      	strh	r2, [r3, #0]

    			  setupScreen();
 80020e4:	f000 f912 	bl	800230c <setupScreen>

				  UTIL_LCD_FillRect(200, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 80020e8:	4b87      	ldr	r3, [pc, #540]	; (8002308 <Display_InitialContent+0xb38>)
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2328      	movs	r3, #40	; 0x28
 80020ee:	220a      	movs	r2, #10
 80020f0:	2174      	movs	r1, #116	; 0x74
 80020f2:	20c8      	movs	r0, #200	; 0xc8
 80020f4:	f000 feac 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(175, 272/2-10, 10, 30, UTIL_LCD_COLOR_RED);
 80020f8:	4b83      	ldr	r3, [pc, #524]	; (8002308 <Display_InitialContent+0xb38>)
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	231e      	movs	r3, #30
 80020fe:	220a      	movs	r2, #10
 8002100:	217e      	movs	r1, #126	; 0x7e
 8002102:	20af      	movs	r0, #175	; 0xaf
 8002104:	f000 fea4 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(150, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 8002108:	4b7f      	ldr	r3, [pc, #508]	; (8002308 <Display_InitialContent+0xb38>)
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2328      	movs	r3, #40	; 0x28
 800210e:	220a      	movs	r2, #10
 8002110:	2174      	movs	r1, #116	; 0x74
 8002112:	2096      	movs	r0, #150	; 0x96
 8002114:	f000 fe9c 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(150, 272/2+10, 50, 10, UTIL_LCD_COLOR_RED);
 8002118:	4b7b      	ldr	r3, [pc, #492]	; (8002308 <Display_InitialContent+0xb38>)
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	230a      	movs	r3, #10
 800211e:	2232      	movs	r2, #50	; 0x32
 8002120:	2192      	movs	r1, #146	; 0x92
 8002122:	2096      	movs	r0, #150	; 0x96
 8002124:	f000 fe94 	bl	8002e50 <UTIL_LCD_FillRect>

				  HAL_Delay(1000);
 8002128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800212c:	f004 f8a8 	bl	8006280 <HAL_Delay>

				  UTIL_LCD_FillRect(150, 272/2-20, 60, 60, UTIL_LCD_COLOR_BLACK);
 8002130:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	233c      	movs	r3, #60	; 0x3c
 8002138:	223c      	movs	r2, #60	; 0x3c
 800213a:	2174      	movs	r1, #116	; 0x74
 800213c:	2096      	movs	r0, #150	; 0x96
 800213e:	f000 fe87 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(200, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 8002142:	4b71      	ldr	r3, [pc, #452]	; (8002308 <Display_InitialContent+0xb38>)
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2328      	movs	r3, #40	; 0x28
 8002148:	220a      	movs	r2, #10
 800214a:	2174      	movs	r1, #116	; 0x74
 800214c:	20c8      	movs	r0, #200	; 0xc8
 800214e:	f000 fe7f 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(175, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 8002152:	4b6d      	ldr	r3, [pc, #436]	; (8002308 <Display_InitialContent+0xb38>)
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2328      	movs	r3, #40	; 0x28
 8002158:	220a      	movs	r2, #10
 800215a:	2174      	movs	r1, #116	; 0x74
 800215c:	20af      	movs	r0, #175	; 0xaf
 800215e:	f000 fe77 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(150, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 8002162:	4b69      	ldr	r3, [pc, #420]	; (8002308 <Display_InitialContent+0xb38>)
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2328      	movs	r3, #40	; 0x28
 8002168:	220a      	movs	r2, #10
 800216a:	2174      	movs	r1, #116	; 0x74
 800216c:	2096      	movs	r0, #150	; 0x96
 800216e:	f000 fe6f 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(150, 272/2-20, 25, 10, UTIL_LCD_COLOR_RED);
 8002172:	4b65      	ldr	r3, [pc, #404]	; (8002308 <Display_InitialContent+0xb38>)
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	230a      	movs	r3, #10
 8002178:	2219      	movs	r2, #25
 800217a:	2174      	movs	r1, #116	; 0x74
 800217c:	2096      	movs	r0, #150	; 0x96
 800217e:	f000 fe67 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(175, 272/2+10, 25, 10, UTIL_LCD_COLOR_RED);
 8002182:	4b61      	ldr	r3, [pc, #388]	; (8002308 <Display_InitialContent+0xb38>)
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	230a      	movs	r3, #10
 8002188:	2219      	movs	r2, #25
 800218a:	2192      	movs	r1, #146	; 0x92
 800218c:	20af      	movs	r0, #175	; 0xaf
 800218e:	f000 fe5f 	bl	8002e50 <UTIL_LCD_FillRect>

				  HAL_Delay(1000);
 8002192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002196:	f004 f873 	bl	8006280 <HAL_Delay>

				  UTIL_LCD_FillRect(150, 272/2-20, 60, 60, UTIL_LCD_COLOR_BLACK);
 800219a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	233c      	movs	r3, #60	; 0x3c
 80021a2:	223c      	movs	r2, #60	; 0x3c
 80021a4:	2174      	movs	r1, #116	; 0x74
 80021a6:	2096      	movs	r0, #150	; 0x96
 80021a8:	f000 fe52 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(150, 272/2+10, 60, 10, UTIL_LCD_COLOR_RED);
 80021ac:	4b56      	ldr	r3, [pc, #344]	; (8002308 <Display_InitialContent+0xb38>)
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	230a      	movs	r3, #10
 80021b2:	223c      	movs	r2, #60	; 0x3c
 80021b4:	2192      	movs	r1, #146	; 0x92
 80021b6:	2096      	movs	r0, #150	; 0x96
 80021b8:	f000 fe4a 	bl	8002e50 <UTIL_LCD_FillRect>

				  HAL_Delay(1000);
 80021bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021c0:	f004 f85e 	bl	8006280 <HAL_Delay>

				  UTIL_LCD_FillRect(150, 272/2-20, 60, 60, UTIL_LCD_COLOR_BLACK);
 80021c4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	233c      	movs	r3, #60	; 0x3c
 80021cc:	223c      	movs	r2, #60	; 0x3c
 80021ce:	2174      	movs	r1, #116	; 0x74
 80021d0:	2096      	movs	r0, #150	; 0x96
 80021d2:	f000 fe3d 	bl	8002e50 <UTIL_LCD_FillRect>


				  return 6;
 80021d6:	2306      	movs	r3, #6
 80021d8:	e08d      	b.n	80022f6 <Display_InitialContent+0xb26>
    		  }
    		  else if(x > 250 && x < 300){
 80021da:	89bb      	ldrh	r3, [r7, #12]
 80021dc:	2bfa      	cmp	r3, #250	; 0xfa
 80021de:	f240 8086 	bls.w	80022ee <Display_InitialContent+0xb1e>
 80021e2:	89bb      	ldrh	r3, [r7, #12]
 80021e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80021e8:	f080 8081 	bcs.w	80022ee <Display_InitialContent+0xb1e>
    			  RECT_HEIGHT = 30;
 80021ec:	4b44      	ldr	r3, [pc, #272]	; (8002300 <Display_InitialContent+0xb30>)
 80021ee:	221e      	movs	r2, #30
 80021f0:	801a      	strh	r2, [r3, #0]
				  gameMode = 3;
 80021f2:	4b44      	ldr	r3, [pc, #272]	; (8002304 <Display_InitialContent+0xb34>)
 80021f4:	2203      	movs	r2, #3
 80021f6:	801a      	strh	r2, [r3, #0]
    			  setupScreen();
 80021f8:	f000 f888 	bl	800230c <setupScreen>

				  UTIL_LCD_FillRect(200, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 80021fc:	4b42      	ldr	r3, [pc, #264]	; (8002308 <Display_InitialContent+0xb38>)
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2328      	movs	r3, #40	; 0x28
 8002202:	220a      	movs	r2, #10
 8002204:	2174      	movs	r1, #116	; 0x74
 8002206:	20c8      	movs	r0, #200	; 0xc8
 8002208:	f000 fe22 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(175, 272/2-10, 10, 30, UTIL_LCD_COLOR_RED);
 800220c:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <Display_InitialContent+0xb38>)
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	231e      	movs	r3, #30
 8002212:	220a      	movs	r2, #10
 8002214:	217e      	movs	r1, #126	; 0x7e
 8002216:	20af      	movs	r0, #175	; 0xaf
 8002218:	f000 fe1a 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(150, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 800221c:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <Display_InitialContent+0xb38>)
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2328      	movs	r3, #40	; 0x28
 8002222:	220a      	movs	r2, #10
 8002224:	2174      	movs	r1, #116	; 0x74
 8002226:	2096      	movs	r0, #150	; 0x96
 8002228:	f000 fe12 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(150, 272/2+10, 50, 10, UTIL_LCD_COLOR_RED);
 800222c:	4b36      	ldr	r3, [pc, #216]	; (8002308 <Display_InitialContent+0xb38>)
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	230a      	movs	r3, #10
 8002232:	2232      	movs	r2, #50	; 0x32
 8002234:	2192      	movs	r1, #146	; 0x92
 8002236:	2096      	movs	r0, #150	; 0x96
 8002238:	f000 fe0a 	bl	8002e50 <UTIL_LCD_FillRect>

				  HAL_Delay(1000);
 800223c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002240:	f004 f81e 	bl	8006280 <HAL_Delay>

				  UTIL_LCD_FillRect(150, 272/2-20, 60, 60, UTIL_LCD_COLOR_BLACK);
 8002244:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	233c      	movs	r3, #60	; 0x3c
 800224c:	223c      	movs	r2, #60	; 0x3c
 800224e:	2174      	movs	r1, #116	; 0x74
 8002250:	2096      	movs	r0, #150	; 0x96
 8002252:	f000 fdfd 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(200, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 8002256:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <Display_InitialContent+0xb38>)
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2328      	movs	r3, #40	; 0x28
 800225c:	220a      	movs	r2, #10
 800225e:	2174      	movs	r1, #116	; 0x74
 8002260:	20c8      	movs	r0, #200	; 0xc8
 8002262:	f000 fdf5 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(175, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 8002266:	4b28      	ldr	r3, [pc, #160]	; (8002308 <Display_InitialContent+0xb38>)
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2328      	movs	r3, #40	; 0x28
 800226c:	220a      	movs	r2, #10
 800226e:	2174      	movs	r1, #116	; 0x74
 8002270:	20af      	movs	r0, #175	; 0xaf
 8002272:	f000 fded 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(150, 272/2-20, 10, 40, UTIL_LCD_COLOR_RED);
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <Display_InitialContent+0xb38>)
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2328      	movs	r3, #40	; 0x28
 800227c:	220a      	movs	r2, #10
 800227e:	2174      	movs	r1, #116	; 0x74
 8002280:	2096      	movs	r0, #150	; 0x96
 8002282:	f000 fde5 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(150, 272/2-20, 25, 10, UTIL_LCD_COLOR_RED);
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <Display_InitialContent+0xb38>)
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	230a      	movs	r3, #10
 800228c:	2219      	movs	r2, #25
 800228e:	2174      	movs	r1, #116	; 0x74
 8002290:	2096      	movs	r0, #150	; 0x96
 8002292:	f000 fddd 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(175, 272/2+10, 25, 10, UTIL_LCD_COLOR_RED);
 8002296:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <Display_InitialContent+0xb38>)
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	230a      	movs	r3, #10
 800229c:	2219      	movs	r2, #25
 800229e:	2192      	movs	r1, #146	; 0x92
 80022a0:	20af      	movs	r0, #175	; 0xaf
 80022a2:	f000 fdd5 	bl	8002e50 <UTIL_LCD_FillRect>

				  HAL_Delay(1000);
 80022a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022aa:	f003 ffe9 	bl	8006280 <HAL_Delay>

				  UTIL_LCD_FillRect(150, 272/2-20, 60, 60, UTIL_LCD_COLOR_BLACK);
 80022ae:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	233c      	movs	r3, #60	; 0x3c
 80022b6:	223c      	movs	r2, #60	; 0x3c
 80022b8:	2174      	movs	r1, #116	; 0x74
 80022ba:	2096      	movs	r0, #150	; 0x96
 80022bc:	f000 fdc8 	bl	8002e50 <UTIL_LCD_FillRect>
				  UTIL_LCD_FillRect(150, 272/2+10, 60, 10, UTIL_LCD_COLOR_RED);
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <Display_InitialContent+0xb38>)
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	230a      	movs	r3, #10
 80022c6:	223c      	movs	r2, #60	; 0x3c
 80022c8:	2192      	movs	r1, #146	; 0x92
 80022ca:	2096      	movs	r0, #150	; 0x96
 80022cc:	f000 fdc0 	bl	8002e50 <UTIL_LCD_FillRect>

				  HAL_Delay(1000);
 80022d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022d4:	f003 ffd4 	bl	8006280 <HAL_Delay>

				  UTIL_LCD_FillRect(150, 272/2-20, 60, 60, UTIL_LCD_COLOR_BLACK);
 80022d8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	233c      	movs	r3, #60	; 0x3c
 80022e0:	223c      	movs	r2, #60	; 0x3c
 80022e2:	2174      	movs	r1, #116	; 0x74
 80022e4:	2096      	movs	r0, #150	; 0x96
 80022e6:	f000 fdb3 	bl	8002e50 <UTIL_LCD_FillRect>


				  return 7;
 80022ea:	2307      	movs	r3, #7
 80022ec:	e003      	b.n	80022f6 <Display_InitialContent+0xb26>


    	  }

      }
      HAL_Delay(50);
 80022ee:	2032      	movs	r0, #50	; 0x32
 80022f0:	f003 ffc6 	bl	8006280 <HAL_Delay>
      BSP_TS_GetState(0, &TS_State);
 80022f4:	e64a      	b.n	8001f8c <Display_InitialContent+0x7bc>
    }




}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	24000000 	.word	0x24000000
 8002304:	240001f2 	.word	0x240001f2
 8002308:	ffff0000 	.word	0xffff0000

0800230c <setupScreen>:

void setupScreen(){
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af02      	add	r7, sp, #8

	int brick_rows = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]

	if (gameMode == 1) {
 8002316:	4b4b      	ldr	r3, [pc, #300]	; (8002444 <setupScreen+0x138>)
 8002318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d102      	bne.n	8002326 <setupScreen+0x1a>
		brick_rows = EASY_MODE_BRICKS_ROWS;
 8002320:	2305      	movs	r3, #5
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	e00e      	b.n	8002344 <setupScreen+0x38>
	}
	else if (gameMode == 2) {
 8002326:	4b47      	ldr	r3, [pc, #284]	; (8002444 <setupScreen+0x138>)
 8002328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800232c:	2b02      	cmp	r3, #2
 800232e:	d102      	bne.n	8002336 <setupScreen+0x2a>
		brick_rows = MEDIUM_MODE_BRICKS_ROWS;
 8002330:	2306      	movs	r3, #6
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	e006      	b.n	8002344 <setupScreen+0x38>
	}
	else if (gameMode == 3) {
 8002336:	4b43      	ldr	r3, [pc, #268]	; (8002444 <setupScreen+0x138>)
 8002338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d101      	bne.n	8002344 <setupScreen+0x38>
		brick_rows = HARD_MODE_BRICKS_ROWS;
 8002340:	2307      	movs	r3, #7
 8002342:	607b      	str	r3, [r7, #4]
	}

	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8002344:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002348:	f000 fbe4 	bl	8002b14 <UTIL_LCD_SetBackColor>
	UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800234c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002350:	f000 fc5e 	bl	8002c10 <UTIL_LCD_Clear>
	memset(bricks, 1, sizeof(bricks));
 8002354:	2223      	movs	r2, #35	; 0x23
 8002356:	2101      	movs	r1, #1
 8002358:	483b      	ldr	r0, [pc, #236]	; (8002448 <setupScreen+0x13c>)
 800235a:	f00e f8ba 	bl	80104d2 <memset>
	for (uint16_t i = 0; i < brick_rows; i++) {
 800235e:	2300      	movs	r3, #0
 8002360:	807b      	strh	r3, [r7, #2]
 8002362:	e027      	b.n	80023b4 <setupScreen+0xa8>
		for (uint16_t j = 0; j < BRICKS_ROWS; j++) {
 8002364:	2300      	movs	r3, #0
 8002366:	803b      	strh	r3, [r7, #0]
 8002368:	e01e      	b.n	80023a8 <setupScreen+0x9c>
			UTIL_LCD_FillRect(458 - BLOCK_WIDTH * (i + 1) - 2 * (i + 1), (2 * (j + 1)) + (BLOCK_HEIGHT * j), BLOCK_WIDTH, BLOCK_HEIGHT, UTIL_LCD_COLOR_RED);
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	3301      	adds	r3, #1
 800236e:	f06f 0213 	mvn.w	r2, #19
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	f503 72e5 	add.w	r2, r3, #458	; 0x1ca
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	3301      	adds	r3, #1
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	4618      	mov	r0, r3
 8002384:	883b      	ldrh	r3, [r7, #0]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	883b      	ldrh	r3, [r7, #0]
 800238a:	211a      	movs	r1, #26
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4619      	mov	r1, r3
 8002396:	4b2d      	ldr	r3, [pc, #180]	; (800244c <setupScreen+0x140>)
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2334      	movs	r3, #52	; 0x34
 800239c:	2214      	movs	r2, #20
 800239e:	f000 fd57 	bl	8002e50 <UTIL_LCD_FillRect>
		for (uint16_t j = 0; j < BRICKS_ROWS; j++) {
 80023a2:	883b      	ldrh	r3, [r7, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	803b      	strh	r3, [r7, #0]
 80023a8:	883b      	ldrh	r3, [r7, #0]
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d9dd      	bls.n	800236a <setupScreen+0x5e>
	for (uint16_t i = 0; i < brick_rows; i++) {
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	3301      	adds	r3, #1
 80023b2:	807b      	strh	r3, [r7, #2]
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	dcd3      	bgt.n	8002364 <setupScreen+0x58>
		}
	}
	if(gameMode == 2){
 80023bc:	4b21      	ldr	r3, [pc, #132]	; (8002444 <setupScreen+0x138>)
 80023be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d108      	bne.n	80023d8 <setupScreen+0xcc>
		ball_x = ball_x - BLOCK_WIDTH;
 80023c6:	4b22      	ldr	r3, [pc, #136]	; (8002450 <setupScreen+0x144>)
 80023c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b14      	subs	r3, #20
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	b21a      	sxth	r2, r3
 80023d4:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <setupScreen+0x144>)
 80023d6:	801a      	strh	r2, [r3, #0]
	}
	if(gameMode == 3){
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <setupScreen+0x138>)
 80023da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d108      	bne.n	80023f4 <setupScreen+0xe8>
		ball_x = ball_x - BLOCK_WIDTH*2;
 80023e2:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <setupScreen+0x144>)
 80023e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b28      	subs	r3, #40	; 0x28
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b21a      	sxth	r2, r3
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <setupScreen+0x144>)
 80023f2:	801a      	strh	r2, [r3, #0]
	}
	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 80023f4:	4817      	ldr	r0, [pc, #92]	; (8002454 <setupScreen+0x148>)
 80023f6:	f000 fb79 	bl	8002aec <UTIL_LCD_SetTextColor>
	UTIL_LCD_FillRect(20, 272/2 - RECT_HEIGHT / 2, RECT_WIDTH, RECT_HEIGHT, UTIL_LCD_COLOR_BLUE);
 80023fa:	4b17      	ldr	r3, [pc, #92]	; (8002458 <setupScreen+0x14c>)
 80023fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002400:	2b00      	cmp	r3, #0
 8002402:	da00      	bge.n	8002406 <setupScreen+0xfa>
 8002404:	3301      	adds	r3, #1
 8002406:	105b      	asrs	r3, r3, #1
 8002408:	b21b      	sxth	r3, r3
 800240a:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800240e:	4619      	mov	r1, r3
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <setupScreen+0x14c>)
 8002412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002416:	461a      	mov	r2, r3
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <setupScreen+0x148>)
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	2214      	movs	r2, #20
 8002420:	2014      	movs	r0, #20
 8002422:	f000 fd15 	bl	8002e50 <UTIL_LCD_FillRect>
	DrawBall(ball_x, ball_y, UTIL_LCD_COLOR_WHITE);
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <setupScreen+0x144>)
 8002428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800242c:	4a0b      	ldr	r2, [pc, #44]	; (800245c <setupScreen+0x150>)
 800242e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8002432:	f04f 32ff 	mov.w	r2, #4294967295
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f916 	bl	8002668 <DrawBall>
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	240001f2 	.word	0x240001f2
 8002448:	240001c4 	.word	0x240001c4
 800244c:	ffff0000 	.word	0xffff0000
 8002450:	240001e8 	.word	0x240001e8
 8002454:	ff0000ff 	.word	0xff0000ff
 8002458:	24000000 	.word	0x24000000
 800245c:	240001ea 	.word	0x240001ea

08002460 <CheckForUserInput>:
  * @brief  Check for user input
  * @param  None
  * @retval Input state (1 : active / 0 : Inactive)
  */
uint8_t CheckForUserInput(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return ButtonState;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <CheckForUserInput+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	240000d0 	.word	0x240000d0

08002478 <BSP_PB_Callback>:
* @brief  EXTI line detection callbacks.
* @param  GPIO_Pin: Specifies the pins connected EXTI line
* @retval None
*/
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  if(Button == BUTTON_USER)
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <BSP_PB_Callback+0x16>
  {
    ButtonState = 1;
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <BSP_PB_Callback+0x24>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]
  }
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	240000d0 	.word	0x240000d0

080024a0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b09e      	sub	sp, #120	; 0x78
 80024a4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80024ac:	2002      	movs	r0, #2
 80024ae:	f008 fa29 	bl	800a904 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	4b42      	ldr	r3, [pc, #264]	; (80025c0 <SystemClock_Config+0x120>)
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	4a41      	ldr	r2, [pc, #260]	; (80025c0 <SystemClock_Config+0x120>)
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80024c2:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <SystemClock_Config+0x120>)
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	4b3d      	ldr	r3, [pc, #244]	; (80025c4 <SystemClock_Config+0x124>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4a3c      	ldr	r2, [pc, #240]	; (80025c4 <SystemClock_Config+0x124>)
 80024d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d6:	6193      	str	r3, [r2, #24]
 80024d8:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <SystemClock_Config+0x124>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80024e4:	bf00      	nop
 80024e6:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <SystemClock_Config+0x124>)
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f2:	d1f8      	bne.n	80024e6 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024f4:	2301      	movs	r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024fc:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002506:	2302      	movs	r3, #2
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800250a:	2302      	movs	r3, #2
 800250c:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800250e:	2305      	movs	r3, #5
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002512:	23a0      	movs	r3, #160	; 0xa0
 8002514:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800251a:	2302      	movs	r3, #2
 800251c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800251e:	2302      	movs	r3, #2
 8002520:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002522:	2304      	movs	r3, #4
 8002524:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002526:	2300      	movs	r3, #0
 8002528:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800252a:	2308      	movs	r3, #8
 800252c:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	4618      	mov	r0, r3
 8002534:	f008 fa20 	bl	800a978 <HAL_RCC_OscConfig>
 8002538:	4603      	mov	r3, r0
 800253a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800253e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002546:	f000 f9c3 	bl	80028d0 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800254a:	233f      	movs	r3, #63	; 0x3f
 800254c:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800254e:	2303      	movs	r3, #3
 8002550:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002552:	2300      	movs	r3, #0
 8002554:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002556:	2308      	movs	r3, #8
 8002558:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800255a:	2340      	movs	r3, #64	; 0x40
 800255c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800255e:	2340      	movs	r3, #64	; 0x40
 8002560:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002566:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002568:	2340      	movs	r3, #64	; 0x40
 800256a:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800256c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002570:	2104      	movs	r1, #4
 8002572:	4618      	mov	r0, r3
 8002574:	f008 fe5a 	bl	800b22c <HAL_RCC_ClockConfig>
 8002578:	4603      	mov	r3, r0
 800257a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800257e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8002586:	f000 f9a3 	bl	80028d0 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <SystemClock_Config+0x128>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <SystemClock_Config+0x128>)
 8002590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002594:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <SystemClock_Config+0x128>)
 8002598:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800259c:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <SystemClock_Config+0x128>)
 800259e:	f043 0302 	orr.w	r3, r3, #2
 80025a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <SystemClock_Config+0x128>)
 80025a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 80025b4:	f003 fe94 	bl	80062e0 <HAL_EnableCompensationCell>
}
 80025b8:	bf00      	nop
 80025ba:	3778      	adds	r7, #120	; 0x78
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	58000400 	.word	0x58000400
 80025c4:	58024800 	.word	0x58024800
 80025c8:	58024400 	.word	0x58024400

080025cc <UpdateBallPosition>:
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
}

/* USER CODE BEGIN 4 */

void UpdateBallPosition(int rows) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	//izbrišemo prejšnjo poticijo
	DrawBall(ball_x, ball_y, UTIL_LCD_COLOR_BLACK);
 80025d4:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <UpdateBallPosition+0x88>)
 80025d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025da:	4a1f      	ldr	r2, [pc, #124]	; (8002658 <UpdateBallPosition+0x8c>)
 80025dc:	f9b2 1000 	ldrsh.w	r1, [r2]
 80025e0:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 f83f 	bl	8002668 <DrawBall>

	//posodobimo koordinate žoge
	ball_x += ball_dx;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <UpdateBallPosition+0x88>)
 80025ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <UpdateBallPosition+0x90>)
 80025f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	b21a      	sxth	r2, r3
 8002600:	4b14      	ldr	r3, [pc, #80]	; (8002654 <UpdateBallPosition+0x88>)
 8002602:	801a      	strh	r2, [r3, #0]
	ball_y += ball_dy;
 8002604:	4b14      	ldr	r3, [pc, #80]	; (8002658 <UpdateBallPosition+0x8c>)
 8002606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800260a:	b29a      	uxth	r2, r3
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <UpdateBallPosition+0x94>)
 800260e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002612:	b29b      	uxth	r3, r3
 8002614:	4413      	add	r3, r2
 8002616:	b29b      	uxth	r3, r3
 8002618:	b21a      	sxth	r2, r3
 800261a:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <UpdateBallPosition+0x8c>)
 800261c:	801a      	strh	r2, [r3, #0]

	//preverimo nove koordinate
	CheckCollisions(rows);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f83a 	bl	8002698 <CheckCollisions>

	//če zoga pade na tla se igra zaključi
	if(ball_x-BALL_RADIUS <= 0){
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <UpdateBallPosition+0x88>)
 8002626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262a:	2b05      	cmp	r3, #5
 800262c:	dc03      	bgt.n	8002636 <UpdateBallPosition+0x6a>
		gameOver = true;
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <UpdateBallPosition+0x98>)
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
		return;
 8002634:	e00a      	b.n	800264c <UpdateBallPosition+0x80>
	}

	//narišemo žogo na novih koordinatih
	DrawBall(ball_x, ball_y, UTIL_LCD_COLOR_WHITE);
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <UpdateBallPosition+0x88>)
 8002638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263c:	4a06      	ldr	r2, [pc, #24]	; (8002658 <UpdateBallPosition+0x8c>)
 800263e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8002642:	f04f 32ff 	mov.w	r2, #4294967295
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f80e 	bl	8002668 <DrawBall>
}
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	240001e8 	.word	0x240001e8
 8002658:	240001ea 	.word	0x240001ea
 800265c:	240001ec 	.word	0x240001ec
 8002660:	240001ee 	.word	0x240001ee
 8002664:	240001f1 	.word	0x240001f1

08002668 <DrawBall>:

void DrawBall(int16_t x, int16_t y, uint32_t color) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	603a      	str	r2, [r7, #0]
 8002672:	80fb      	strh	r3, [r7, #6]
 8002674:	460b      	mov	r3, r1
 8002676:	80bb      	strh	r3, [r7, #4]
  UTIL_LCD_SetTextColor(color);
 8002678:	6838      	ldr	r0, [r7, #0]
 800267a:	f000 fa37 	bl	8002aec <UTIL_LCD_SetTextColor>
  UTIL_LCD_FillCircle(x, y, BALL_RADIUS, color);
 800267e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002682:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2205      	movs	r2, #5
 800268a:	f000 fc1b 	bl	8002ec4 <UTIL_LCD_FillCircle>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <CheckCollisions>:


void CheckCollisions(int rows) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af02      	add	r7, sp, #8
 800269e:	6078      	str	r0, [r7, #4]
  if (ball_x <= BALL_RADIUS || ball_x >= x_size - BALL_RADIUS) {
 80026a0:	4b81      	ldr	r3, [pc, #516]	; (80028a8 <CheckCollisions+0x210>)
 80026a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	dd08      	ble.n	80026bc <CheckCollisions+0x24>
 80026aa:	4b7f      	ldr	r3, [pc, #508]	; (80028a8 <CheckCollisions+0x210>)
 80026ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b7e      	ldr	r3, [pc, #504]	; (80028ac <CheckCollisions+0x214>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3b05      	subs	r3, #5
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d308      	bcc.n	80026ce <CheckCollisions+0x36>
    ball_dx = -ball_dx;
 80026bc:	4b7c      	ldr	r3, [pc, #496]	; (80028b0 <CheckCollisions+0x218>)
 80026be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	425b      	negs	r3, r3
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	4b79      	ldr	r3, [pc, #484]	; (80028b0 <CheckCollisions+0x218>)
 80026cc:	801a      	strh	r2, [r3, #0]
  }
  if (ball_y <= BALL_RADIUS+BALL_RADIUS/2 || ball_y >= y_size - (BALL_RADIUS+BALL_RADIUS/2)) {
 80026ce:	4b79      	ldr	r3, [pc, #484]	; (80028b4 <CheckCollisions+0x21c>)
 80026d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d4:	2b07      	cmp	r3, #7
 80026d6:	dd08      	ble.n	80026ea <CheckCollisions+0x52>
 80026d8:	4b76      	ldr	r3, [pc, #472]	; (80028b4 <CheckCollisions+0x21c>)
 80026da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026de:	461a      	mov	r2, r3
 80026e0:	4b75      	ldr	r3, [pc, #468]	; (80028b8 <CheckCollisions+0x220>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	3b07      	subs	r3, #7
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d308      	bcc.n	80026fc <CheckCollisions+0x64>
    ball_dy = -ball_dy;
 80026ea:	4b74      	ldr	r3, [pc, #464]	; (80028bc <CheckCollisions+0x224>)
 80026ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	425b      	negs	r3, r3
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	b21a      	sxth	r2, r3
 80026f8:	4b70      	ldr	r3, [pc, #448]	; (80028bc <CheckCollisions+0x224>)
 80026fa:	801a      	strh	r2, [r3, #0]
  }


  if(ball_x < 20+RECT_WIDTH+BALL_RADIUS+BALL_RADIUS/2 && ball_y-BALL_RADIUS > playerx - RECT_HEIGHT / 2 && ball_y+BALL_RADIUS < playerx + RECT_HEIGHT / 2) {
 80026fc:	4b6a      	ldr	r3, [pc, #424]	; (80028a8 <CheckCollisions+0x210>)
 80026fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002702:	2b2e      	cmp	r3, #46	; 0x2e
 8002704:	dc2d      	bgt.n	8002762 <CheckCollisions+0xca>
 8002706:	4b6b      	ldr	r3, [pc, #428]	; (80028b4 <CheckCollisions+0x21c>)
 8002708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270c:	3b05      	subs	r3, #5
 800270e:	4619      	mov	r1, r3
 8002710:	4b6b      	ldr	r3, [pc, #428]	; (80028c0 <CheckCollisions+0x228>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b6b      	ldr	r3, [pc, #428]	; (80028c4 <CheckCollisions+0x22c>)
 8002716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800271a:	2b00      	cmp	r3, #0
 800271c:	da00      	bge.n	8002720 <CheckCollisions+0x88>
 800271e:	3301      	adds	r3, #1
 8002720:	105b      	asrs	r3, r3, #1
 8002722:	b21b      	sxth	r3, r3
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	4299      	cmp	r1, r3
 8002728:	d91b      	bls.n	8002762 <CheckCollisions+0xca>
 800272a:	4b62      	ldr	r3, [pc, #392]	; (80028b4 <CheckCollisions+0x21c>)
 800272c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002730:	3305      	adds	r3, #5
 8002732:	461a      	mov	r2, r3
 8002734:	4b63      	ldr	r3, [pc, #396]	; (80028c4 <CheckCollisions+0x22c>)
 8002736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800273a:	2b00      	cmp	r3, #0
 800273c:	da00      	bge.n	8002740 <CheckCollisions+0xa8>
 800273e:	3301      	adds	r3, #1
 8002740:	105b      	asrs	r3, r3, #1
 8002742:	b21b      	sxth	r3, r3
 8002744:	4619      	mov	r1, r3
 8002746:	4b5e      	ldr	r3, [pc, #376]	; (80028c0 <CheckCollisions+0x228>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	440b      	add	r3, r1
 800274c:	429a      	cmp	r2, r3
 800274e:	d208      	bcs.n	8002762 <CheckCollisions+0xca>
	  ball_dx = -ball_dx;
 8002750:	4b57      	ldr	r3, [pc, #348]	; (80028b0 <CheckCollisions+0x218>)
 8002752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002756:	b29b      	uxth	r3, r3
 8002758:	425b      	negs	r3, r3
 800275a:	b29b      	uxth	r3, r3
 800275c:	b21a      	sxth	r2, r3
 800275e:	4b54      	ldr	r3, [pc, #336]	; (80028b0 <CheckCollisions+0x218>)
 8002760:	801a      	strh	r2, [r3, #0]
  }


  for (uint16_t i = 0; i < rows; i++) {
 8002762:	2300      	movs	r3, #0
 8002764:	81fb      	strh	r3, [r7, #14]
 8002766:	e097      	b.n	8002898 <CheckCollisions+0x200>
  	    for (uint16_t j = 0; j < BRICKS_ROWS; j++) {
 8002768:	2300      	movs	r3, #0
 800276a:	81bb      	strh	r3, [r7, #12]
 800276c:	e08d      	b.n	800288a <CheckCollisions+0x1f2>
  	        if (bricks[i][j]) {
 800276e:	89fa      	ldrh	r2, [r7, #14]
 8002770:	89b9      	ldrh	r1, [r7, #12]
 8002772:	4855      	ldr	r0, [pc, #340]	; (80028c8 <CheckCollisions+0x230>)
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	4403      	add	r3, r0
 800277c:	440b      	add	r3, r1
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d07f      	beq.n	8002884 <CheckCollisions+0x1ec>

  	        	//ugotovimo, kje se opeka nahaja
  	        	uint16_t brick_x = 458 - BLOCK_WIDTH * (i + 1) - 2 * (i + 1);
 8002784:	89fb      	ldrh	r3, [r7, #14]
 8002786:	3301      	adds	r3, #1
 8002788:	b29b      	uxth	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	02d2      	lsls	r2, r2, #11
 800278e:	1ad2      	subs	r2, r2, r3
 8002790:	0092      	lsls	r2, r2, #2
 8002792:	441a      	add	r2, r3
 8002794:	0092      	lsls	r2, r2, #2
 8002796:	4413      	add	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	b29b      	uxth	r3, r3
 800279c:	f503 73e5 	add.w	r3, r3, #458	; 0x1ca
 80027a0:	817b      	strh	r3, [r7, #10]
  	        	uint16_t brick_y = (2 * (j + 1)) + (BLOCK_HEIGHT * j);
 80027a2:	89bb      	ldrh	r3, [r7, #12]
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	89bb      	ldrh	r3, [r7, #12]
 80027a8:	211a      	movs	r1, #26
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	813b      	strh	r3, [r7, #8]

  	        	//premerimo ali se je zgodil trk z njo
  				if (ball_x + BALL_RADIUS > brick_x && ball_x - BALL_RADIUS < brick_x + BLOCK_WIDTH &&
 80027b6:	4b3c      	ldr	r3, [pc, #240]	; (80028a8 <CheckCollisions+0x210>)
 80027b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027bc:	1d1a      	adds	r2, r3, #4
 80027be:	897b      	ldrh	r3, [r7, #10]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	db5f      	blt.n	8002884 <CheckCollisions+0x1ec>
 80027c4:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <CheckCollisions+0x210>)
 80027c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ca:	1f1a      	subs	r2, r3, #4
 80027cc:	897b      	ldrh	r3, [r7, #10]
 80027ce:	3314      	adds	r3, #20
 80027d0:	429a      	cmp	r2, r3
 80027d2:	dc57      	bgt.n	8002884 <CheckCollisions+0x1ec>
  					ball_y + BALL_RADIUS > brick_y && ball_y - BALL_RADIUS < brick_y + BLOCK_HEIGHT) {
 80027d4:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <CheckCollisions+0x21c>)
 80027d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027da:	1d1a      	adds	r2, r3, #4
 80027dc:	893b      	ldrh	r3, [r7, #8]
  				if (ball_x + BALL_RADIUS > brick_x && ball_x - BALL_RADIUS < brick_x + BLOCK_WIDTH &&
 80027de:	429a      	cmp	r2, r3
 80027e0:	db50      	blt.n	8002884 <CheckCollisions+0x1ec>
  					ball_y + BALL_RADIUS > brick_y && ball_y - BALL_RADIUS < brick_y + BLOCK_HEIGHT) {
 80027e2:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <CheckCollisions+0x21c>)
 80027e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e8:	1f1a      	subs	r2, r3, #4
 80027ea:	893b      	ldrh	r3, [r7, #8]
 80027ec:	3334      	adds	r3, #52	; 0x34
 80027ee:	429a      	cmp	r2, r3
 80027f0:	dc48      	bgt.n	8002884 <CheckCollisions+0x1ec>

  					//preverimo iz katere strani se je trk zgodil
  					if (ball_x < brick_x || ball_x > brick_x + BLOCK_WIDTH) {
 80027f2:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <CheckCollisions+0x210>)
 80027f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f8:	461a      	mov	r2, r3
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	db07      	blt.n	8002810 <CheckCollisions+0x178>
 8002800:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <CheckCollisions+0x210>)
 8002802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002806:	461a      	mov	r2, r3
 8002808:	897b      	ldrh	r3, [r7, #10]
 800280a:	3314      	adds	r3, #20
 800280c:	429a      	cmp	r2, r3
 800280e:	dd08      	ble.n	8002822 <CheckCollisions+0x18a>
  						ball_dx = -ball_dx;
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <CheckCollisions+0x218>)
 8002812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002816:	b29b      	uxth	r3, r3
 8002818:	425b      	negs	r3, r3
 800281a:	b29b      	uxth	r3, r3
 800281c:	b21a      	sxth	r2, r3
 800281e:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <CheckCollisions+0x218>)
 8002820:	801a      	strh	r2, [r3, #0]
  					}
  					if (ball_y < brick_y || ball_y > brick_y + BLOCK_HEIGHT) {
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <CheckCollisions+0x21c>)
 8002824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002828:	461a      	mov	r2, r3
 800282a:	893b      	ldrh	r3, [r7, #8]
 800282c:	429a      	cmp	r2, r3
 800282e:	db07      	blt.n	8002840 <CheckCollisions+0x1a8>
 8002830:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <CheckCollisions+0x21c>)
 8002832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002836:	461a      	mov	r2, r3
 8002838:	893b      	ldrh	r3, [r7, #8]
 800283a:	3334      	adds	r3, #52	; 0x34
 800283c:	429a      	cmp	r2, r3
 800283e:	dd08      	ble.n	8002852 <CheckCollisions+0x1ba>
  						ball_dy = -ball_dy;
 8002840:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <CheckCollisions+0x224>)
 8002842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002846:	b29b      	uxth	r3, r3
 8002848:	425b      	negs	r3, r3
 800284a:	b29b      	uxth	r3, r3
 800284c:	b21a      	sxth	r2, r3
 800284e:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <CheckCollisions+0x224>)
 8002850:	801a      	strh	r2, [r3, #0]
  					}

  					//odstranimo opeko
  					bricks[i][j] = 0;
 8002852:	89fa      	ldrh	r2, [r7, #14]
 8002854:	89b9      	ldrh	r1, [r7, #12]
 8002856:	481c      	ldr	r0, [pc, #112]	; (80028c8 <CheckCollisions+0x230>)
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	4403      	add	r3, r0
 8002860:	440b      	add	r3, r1
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
  					bricksBroken++;
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <CheckCollisions+0x234>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3301      	adds	r3, #1
 800286c:	4a17      	ldr	r2, [pc, #92]	; (80028cc <CheckCollisions+0x234>)
 800286e:	6013      	str	r3, [r2, #0]
  					UTIL_LCD_FillRect(brick_x, brick_y, BLOCK_WIDTH, BLOCK_HEIGHT, UTIL_LCD_COLOR_BLACK);
 8002870:	8978      	ldrh	r0, [r7, #10]
 8002872:	8939      	ldrh	r1, [r7, #8]
 8002874:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2334      	movs	r3, #52	; 0x34
 800287c:	2214      	movs	r2, #20
 800287e:	f000 fae7 	bl	8002e50 <UTIL_LCD_FillRect>

  					return;
 8002882:	e00e      	b.n	80028a2 <CheckCollisions+0x20a>
  	    for (uint16_t j = 0; j < BRICKS_ROWS; j++) {
 8002884:	89bb      	ldrh	r3, [r7, #12]
 8002886:	3301      	adds	r3, #1
 8002888:	81bb      	strh	r3, [r7, #12]
 800288a:	89bb      	ldrh	r3, [r7, #12]
 800288c:	2b04      	cmp	r3, #4
 800288e:	f67f af6e 	bls.w	800276e <CheckCollisions+0xd6>
  for (uint16_t i = 0; i < rows; i++) {
 8002892:	89fb      	ldrh	r3, [r7, #14]
 8002894:	3301      	adds	r3, #1
 8002896:	81fb      	strh	r3, [r7, #14]
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	429a      	cmp	r2, r3
 800289e:	f73f af63 	bgt.w	8002768 <CheckCollisions+0xd0>
  				}
  	        }
  	    }
  	}

}
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	240001e8 	.word	0x240001e8
 80028ac:	240000d4 	.word	0x240000d4
 80028b0:	240001ec 	.word	0x240001ec
 80028b4:	240001ea 	.word	0x240001ea
 80028b8:	240000d8 	.word	0x240000d8
 80028bc:	240001ee 	.word	0x240001ee
 80028c0:	240000dc 	.word	0x240000dc
 80028c4:	24000000 	.word	0x24000000
 80028c8:	240001c4 	.word	0x240001c4
 80028cc:	240000e0 	.word	0x240000e0

080028d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d4:	b672      	cpsid	i
}
 80028d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED_RED);
 80028d8:	2001      	movs	r0, #1
 80028da:	f001 faa3 	bl	8003e24 <BSP_LED_On>
  while (1)
 80028de:	e7fe      	b.n	80028de <Error_Handler+0xe>

080028e0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80028e8:	4a07      	ldr	r2, [pc, #28]	; (8002908 <RetargetInit+0x28>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <RetargetInit+0x2c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6898      	ldr	r0, [r3, #8]
 80028f4:	2300      	movs	r3, #0
 80028f6:	2202      	movs	r2, #2
 80028f8:	2100      	movs	r1, #0
 80028fa:	f00d fcf9 	bl	80102f0 <setvbuf>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	240001f4 	.word	0x240001f4
 800290c:	240000b0 	.word	0x240000b0

08002910 <_close>:

  errno = EBADF;
  return 0;
}

int _close(int fd) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	db04      	blt.n	8002928 <_close+0x18>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b02      	cmp	r3, #2
 8002922:	dc01      	bgt.n	8002928 <_close+0x18>
    return 0;
 8002924:	2300      	movs	r3, #0
 8002926:	e006      	b.n	8002936 <_close+0x26>

  errno = EBADF;
 8002928:	f00d fe22 	bl	8010570 <__errno>
 800292c:	4603      	mov	r3, r0
 800292e:	2209      	movs	r2, #9
 8002930:	601a      	str	r2, [r3, #0]
  return -1;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800294a:	f00d fe11 	bl	8010570 <__errno>
 800294e:	4603      	mov	r3, r0
 8002950:	2209      	movs	r2, #9
 8002952:	601a      	str	r2, [r3, #0]
  return -1;
 8002954:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <_fstat>:



int _fstat(int fd, struct stat* st) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	db08      	blt.n	8002982 <_fstat+0x22>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b02      	cmp	r3, #2
 8002974:	dc05      	bgt.n	8002982 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800297c:	605a      	str	r2, [r3, #4]
    return 0;
 800297e:	2300      	movs	r3, #0
 8002980:	e005      	b.n	800298e <_fstat+0x2e>
  }

  errno = EBADF;
 8002982:	f00d fdf5 	bl	8010570 <__errno>
 8002986:	4603      	mov	r3, r0
 8002988:	2209      	movs	r2, #9
 800298a:	601a      	str	r2, [r3, #0]
  return 0;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <_read>:


int _read(int fd, char* ptr, int len) {
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d110      	bne.n	80029cc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <_read+0x4c>)
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	2201      	movs	r2, #1
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	f00b fc3b 	bl	800e230 <HAL_UART_Receive>
 80029ba:	4603      	mov	r3, r0
 80029bc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80029be:	7dfb      	ldrb	r3, [r7, #23]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <_read+0x30>
      return 1;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e008      	b.n	80029da <_read+0x42>
    else
      return EIO;
 80029c8:	2305      	movs	r3, #5
 80029ca:	e006      	b.n	80029da <_read+0x42>
  }
  errno = EBADF;
 80029cc:	f00d fdd0 	bl	8010570 <__errno>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2209      	movs	r2, #9
 80029d4:	601a      	str	r2, [r3, #0]
  return -1;
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	240001f4 	.word	0x240001f4

080029e8 <_write>:

int _write(int fd, char* ptr, int len) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d002      	beq.n	8002a00 <_write+0x18>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d111      	bne.n	8002a24 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <_write+0x54>)
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	f00b fb81 	bl	800e114 <HAL_UART_Transmit>
 8002a12:	4603      	mov	r3, r0
 8002a14:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002a16:	7dfb      	ldrb	r3, [r7, #23]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <_write+0x38>
      return len;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	e008      	b.n	8002a32 <_write+0x4a>
    else
      return EIO;
 8002a20:	2305      	movs	r3, #5
 8002a22:	e006      	b.n	8002a32 <_write+0x4a>
  }
  errno = EBADF;
 8002a24:	f00d fda4 	bl	8010570 <__errno>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2209      	movs	r2, #9
 8002a2c:	601a      	str	r2, [r3, #0]
  return -1;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	240001f4 	.word	0x240001f4

08002a40 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <UTIL_LCD_SetFuncDriver+0x98>)
 8002a4e:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a20      	ldr	r2, [pc, #128]	; (8002ad8 <UTIL_LCD_SetFuncDriver+0x98>)
 8002a56:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4a1e      	ldr	r2, [pc, #120]	; (8002ad8 <UTIL_LCD_SetFuncDriver+0x98>)
 8002a5e:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <UTIL_LCD_SetFuncDriver+0x98>)
 8002a66:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	4a1a      	ldr	r2, [pc, #104]	; (8002ad8 <UTIL_LCD_SetFuncDriver+0x98>)
 8002a6e:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <UTIL_LCD_SetFuncDriver+0x98>)
 8002a76:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	4a16      	ldr	r2, [pc, #88]	; (8002ad8 <UTIL_LCD_SetFuncDriver+0x98>)
 8002a7e:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <UTIL_LCD_SetFuncDriver+0x98>)
 8002a86:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <UTIL_LCD_SetFuncDriver+0x98>)
 8002a8e:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <UTIL_LCD_SetFuncDriver+0x98>)
 8002a96:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <UTIL_LCD_SetFuncDriver+0x98>)
 8002a9e:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <UTIL_LCD_SetFuncDriver+0x9c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <UTIL_LCD_SetFuncDriver+0x9c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <UTIL_LCD_SetFuncDriver+0x98>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	4a0b      	ldr	r2, [pc, #44]	; (8002ae0 <UTIL_LCD_SetFuncDriver+0xa0>)
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8002ab8:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <UTIL_LCD_SetFuncDriver+0x98>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <UTIL_LCD_SetFuncDriver+0xa4>)
 8002abe:	4611      	mov	r1, r2
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <UTIL_LCD_SetFuncDriver+0x98>)
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	4a07      	ldr	r2, [pc, #28]	; (8002ae8 <UTIL_LCD_SetFuncDriver+0xa8>)
 8002aca:	4611      	mov	r1, r2
 8002acc:	2000      	movs	r0, #0
 8002ace:	4798      	blx	r3
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	24000238 	.word	0x24000238
 8002adc:	240001f8 	.word	0x240001f8
 8002ae0:	2400020c 	.word	0x2400020c
 8002ae4:	24000210 	.word	0x24000210
 8002ae8:	24000214 	.word	0x24000214

08002aec <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <UTIL_LCD_SetTextColor+0x24>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <UTIL_LCD_SetTextColor+0x24>)
 8002afa:	015b      	lsls	r3, r3, #5
 8002afc:	4413      	add	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	601a      	str	r2, [r3, #0]
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	240001f8 	.word	0x240001f8

08002b14 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <UTIL_LCD_SetBackColor+0x24>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <UTIL_LCD_SetBackColor+0x24>)
 8002b22:	015b      	lsls	r3, r3, #5
 8002b24:	4413      	add	r3, r2
 8002b26:	3304      	adds	r3, #4
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	601a      	str	r2, [r3, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	240001f8 	.word	0x240001f8

08002b3c <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <UTIL_LCD_DrawHLine+0x64>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d118      	bne.n	8002b84 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8002b52:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <UTIL_LCD_DrawHLine+0x68>)
 8002b54:	689c      	ldr	r4, [r3, #8]
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <UTIL_LCD_DrawHLine+0x64>)
 8002b58:	6918      	ldr	r0, [r3, #16]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	08db      	lsrs	r3, r3, #3
 8002b5e:	f003 021f 	and.w	r2, r3, #31
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	0a9b      	lsrs	r3, r3, #10
 8002b66:	015b      	lsls	r3, r3, #5
 8002b68:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	0cdb      	lsrs	r3, r3, #19
 8002b72:	02db      	lsls	r3, r3, #11
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	4313      	orrs	r3, r2
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	68f9      	ldr	r1, [r7, #12]
 8002b80:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8002b82:	e009      	b.n	8002b98 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <UTIL_LCD_DrawHLine+0x68>)
 8002b86:	689c      	ldr	r4, [r3, #8]
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <UTIL_LCD_DrawHLine+0x64>)
 8002b8a:	6918      	ldr	r0, [r3, #16]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	68f9      	ldr	r1, [r7, #12]
 8002b96:	47a0      	blx	r4
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd90      	pop	{r4, r7, pc}
 8002ba0:	240001f8 	.word	0x240001f8
 8002ba4:	24000238 	.word	0x24000238

08002ba8 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 8002ba8:	b5b0      	push	{r4, r5, r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	603a      	str	r2, [r7, #0]
 8002bb2:	80fb      	strh	r3, [r7, #6]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <UTIL_LCD_SetPixel+0x60>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d117      	bne.n	8002bf0 <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <UTIL_LCD_SetPixel+0x64>)
 8002bc2:	699c      	ldr	r4, [r3, #24]
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <UTIL_LCD_SetPixel+0x60>)
 8002bc6:	6918      	ldr	r0, [r3, #16]
 8002bc8:	88f9      	ldrh	r1, [r7, #6]
 8002bca:	88bd      	ldrh	r5, [r7, #4]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	08db      	lsrs	r3, r3, #3
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	0a9b      	lsrs	r3, r3, #10
 8002bd8:	015b      	lsls	r3, r3, #5
 8002bda:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002bde:	431a      	orrs	r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	0cdb      	lsrs	r3, r3, #19
 8002be4:	02db      	lsls	r3, r3, #11
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	4313      	orrs	r3, r2
 8002bea:	462a      	mov	r2, r5
 8002bec:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
 8002bee:	e007      	b.n	8002c00 <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <UTIL_LCD_SetPixel+0x64>)
 8002bf2:	699c      	ldr	r4, [r3, #24]
 8002bf4:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <UTIL_LCD_SetPixel+0x60>)
 8002bf6:	6918      	ldr	r0, [r3, #16]
 8002bf8:	88f9      	ldrh	r1, [r7, #6]
 8002bfa:	88ba      	ldrh	r2, [r7, #4]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	47a0      	blx	r4
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bdb0      	pop	{r4, r5, r7, pc}
 8002c08:	240001f8 	.word	0x240001f8
 8002c0c:	24000238 	.word	0x24000238

08002c10 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8002c18:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <UTIL_LCD_Clear+0x28>)
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <UTIL_LCD_Clear+0x28>)
 8002c1e:	6999      	ldr	r1, [r3, #24]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	460b      	mov	r3, r1
 8002c26:	2100      	movs	r1, #0
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f000 f911 	bl	8002e50 <UTIL_LCD_FillRect>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	240001f8 	.word	0x240001f8

08002c3c <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	f1c3 0303 	rsb	r3, r3, #3
 8002c52:	61fb      	str	r3, [r7, #28]
  current_x = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8002c5c:	e0eb      	b.n	8002e36 <UTIL_LCD_DrawCircle+0x1fa>
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	1ad2      	subs	r2, r2, r3
 8002c64:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <UTIL_LCD_DrawCircle+0x210>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d22d      	bcs.n	8002cc8 <UTIL_LCD_DrawCircle+0x8c>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	441a      	add	r2, r3
 8002c72:	4b76      	ldr	r3, [pc, #472]	; (8002e4c <UTIL_LCD_DrawCircle+0x210>)
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d20f      	bcs.n	8002c9a <UTIL_LCD_DrawCircle+0x5e>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	b298      	uxth	r0, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	4619      	mov	r1, r3
 8002c96:	f7ff ff87 	bl	8002ba8 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	4b6a      	ldr	r3, [pc, #424]	; (8002e4c <UTIL_LCD_DrawCircle+0x210>)
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d20f      	bcs.n	8002cc8 <UTIL_LCD_DrawCircle+0x8c>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	b298      	uxth	r0, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f7ff ff70 	bl	8002ba8 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	1ad2      	subs	r2, r2, r3
 8002cce:	4b5f      	ldr	r3, [pc, #380]	; (8002e4c <UTIL_LCD_DrawCircle+0x210>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d22d      	bcs.n	8002d32 <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	441a      	add	r2, r3
 8002cdc:	4b5b      	ldr	r3, [pc, #364]	; (8002e4c <UTIL_LCD_DrawCircle+0x210>)
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d20f      	bcs.n	8002d04 <UTIL_LCD_DrawCircle+0xc8>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	b298      	uxth	r0, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f7ff ff52 	bl	8002ba8 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	1ad2      	subs	r2, r2, r3
 8002d0a:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <UTIL_LCD_DrawCircle+0x210>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d20f      	bcs.n	8002d32 <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	b298      	uxth	r0, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f7ff ff3b 	bl	8002ba8 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	441a      	add	r2, r3
 8002d38:	4b44      	ldr	r3, [pc, #272]	; (8002e4c <UTIL_LCD_DrawCircle+0x210>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d22d      	bcs.n	8002d9c <UTIL_LCD_DrawCircle+0x160>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	441a      	add	r2, r3
 8002d46:	4b41      	ldr	r3, [pc, #260]	; (8002e4c <UTIL_LCD_DrawCircle+0x210>)
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d20f      	bcs.n	8002d6e <UTIL_LCD_DrawCircle+0x132>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	b298      	uxth	r0, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f7ff ff1d 	bl	8002ba8 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	1ad2      	subs	r2, r2, r3
 8002d74:	4b35      	ldr	r3, [pc, #212]	; (8002e4c <UTIL_LCD_DrawCircle+0x210>)
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d20f      	bcs.n	8002d9c <UTIL_LCD_DrawCircle+0x160>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	b298      	uxth	r0, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	4619      	mov	r1, r3
 8002d98:	f7ff ff06 	bl	8002ba8 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	441a      	add	r2, r3
 8002da2:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <UTIL_LCD_DrawCircle+0x210>)
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d22d      	bcs.n	8002e06 <UTIL_LCD_DrawCircle+0x1ca>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	441a      	add	r2, r3
 8002db0:	4b26      	ldr	r3, [pc, #152]	; (8002e4c <UTIL_LCD_DrawCircle+0x210>)
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d20f      	bcs.n	8002dd8 <UTIL_LCD_DrawCircle+0x19c>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	b298      	uxth	r0, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f7ff fee8 	bl	8002ba8 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	1ad2      	subs	r2, r2, r3
 8002dde:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <UTIL_LCD_DrawCircle+0x210>)
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d20f      	bcs.n	8002e06 <UTIL_LCD_DrawCircle+0x1ca>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	b298      	uxth	r0, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	4619      	mov	r1, r3
 8002e02:	f7ff fed1 	bl	8002ba8 <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	da06      	bge.n	8002e1a <UTIL_LCD_DrawCircle+0x1de>
    {
      decision += (current_x << 2) + 6;
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	009a      	lsls	r2, r3, #2
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	4413      	add	r3, r2
 8002e14:	3306      	adds	r3, #6
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	e00a      	b.n	8002e30 <UTIL_LCD_DrawCircle+0x1f4>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	009a      	lsls	r2, r3, #2
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	4413      	add	r3, r2
 8002e26:	330a      	adds	r3, #10
 8002e28:	61fb      	str	r3, [r7, #28]
      current_y--;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	3301      	adds	r3, #1
 8002e34:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	f67f af0f 	bls.w	8002c5e <UTIL_LCD_DrawCircle+0x22>
  }
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	240001f8 	.word	0x240001f8

08002e50 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <UTIL_LCD_FillRect+0x6c>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d11a      	bne.n	8002e9c <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <UTIL_LCD_FillRect+0x70>)
 8002e68:	691c      	ldr	r4, [r3, #16]
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <UTIL_LCD_FillRect+0x6c>)
 8002e6c:	6918      	ldr	r0, [r3, #16]
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	08db      	lsrs	r3, r3, #3
 8002e72:	f003 021f 	and.w	r2, r3, #31
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	0a9b      	lsrs	r3, r3, #10
 8002e7a:	015b      	lsls	r3, r3, #5
 8002e7c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002e80:	431a      	orrs	r2, r3
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	0cdb      	lsrs	r3, r3, #19
 8002e86:	02db      	lsls	r3, r3, #11
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	68f9      	ldr	r1, [r7, #12]
 8002e98:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8002e9a:	e00b      	b.n	8002eb4 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <UTIL_LCD_FillRect+0x70>)
 8002e9e:	691c      	ldr	r4, [r3, #16]
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <UTIL_LCD_FillRect+0x6c>)
 8002ea2:	6918      	ldr	r0, [r3, #16]
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	68f9      	ldr	r1, [r7, #12]
 8002eb2:	47a0      	blx	r4
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd90      	pop	{r4, r7, pc}
 8002ebc:	240001f8 	.word	0x240001f8
 8002ec0:	24000238 	.word	0x24000238

08002ec4 <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	f1c3 0303 	rsb	r3, r3, #3
 8002eda:	61fb      	str	r3, [r7, #28]

  current_x = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8002ee4:	e08b      	b.n	8002ffe <UTIL_LCD_FillCircle+0x13a>
  {
    if(current_y > 0)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d036      	beq.n	8002f5a <UTIL_LCD_FillCircle+0x96>
    {
      if(current_y >= Xpos)
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d31c      	bcc.n	8002f2e <UTIL_LCD_FillCircle+0x6a>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	18d0      	adds	r0, r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	005a      	lsls	r2, r3, #1
 8002efe:	68f9      	ldr	r1, [r7, #12]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	1acb      	subs	r3, r1, r3
 8002f04:	441a      	add	r2, r3
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	4601      	mov	r1, r0
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7ff fe16 	bl	8002b3c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	1ad0      	subs	r0, r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	005a      	lsls	r2, r3, #1
 8002f1a:	68f9      	ldr	r1, [r7, #12]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	1acb      	subs	r3, r1, r3
 8002f20:	441a      	add	r2, r3
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	4601      	mov	r1, r0
 8002f26:	2000      	movs	r0, #0
 8002f28:	f7ff fe08 	bl	8002b3c <UTIL_LCD_DrawHLine>
 8002f2c:	e015      	b.n	8002f5a <UTIL_LCD_FillCircle+0x96>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	1ad0      	subs	r0, r2, r3
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	18d1      	adds	r1, r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	005a      	lsls	r2, r3, #1
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f7ff fdfc 	bl	8002b3c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	1ad0      	subs	r0, r2, r3
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	1ad1      	subs	r1, r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	005a      	lsls	r2, r3, #1
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	f7ff fdf1 	bl	8002b3c <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d036      	beq.n	8002fce <UTIL_LCD_FillCircle+0x10a>
    {
      if(current_x >= Xpos)
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d31c      	bcc.n	8002fa2 <UTIL_LCD_FillCircle+0xde>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	1ad0      	subs	r0, r2, r3
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	005a      	lsls	r2, r3, #1
 8002f72:	68f9      	ldr	r1, [r7, #12]
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	1acb      	subs	r3, r1, r3
 8002f78:	441a      	add	r2, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	4601      	mov	r1, r0
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7ff fddc 	bl	8002b3c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	18d0      	adds	r0, r2, r3
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	005a      	lsls	r2, r3, #1
 8002f8e:	68f9      	ldr	r1, [r7, #12]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	1acb      	subs	r3, r1, r3
 8002f94:	441a      	add	r2, r3
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	4601      	mov	r1, r0
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f7ff fdce 	bl	8002b3c <UTIL_LCD_DrawHLine>
 8002fa0:	e015      	b.n	8002fce <UTIL_LCD_FillCircle+0x10a>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	1ad0      	subs	r0, r2, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	1ad1      	subs	r1, r2, r3
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	005a      	lsls	r2, r3, #1
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	f7ff fdc2 	bl	8002b3c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	1ad0      	subs	r0, r2, r3
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	18d1      	adds	r1, r2, r3
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	005a      	lsls	r2, r3, #1
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f7ff fdb7 	bl	8002b3c <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da06      	bge.n	8002fe2 <UTIL_LCD_FillCircle+0x11e>
    {
      decision += (current_x << 2) + 6;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	009a      	lsls	r2, r3, #2
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	4413      	add	r3, r2
 8002fdc:	3306      	adds	r3, #6
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	e00a      	b.n	8002ff8 <UTIL_LCD_FillCircle+0x134>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	009a      	lsls	r2, r3, #2
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4413      	add	r3, r2
 8002fee:	330a      	adds	r3, #10
 8002ff0:	61fb      	str	r3, [r7, #28]
      current_y--;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	429a      	cmp	r2, r3
 8003004:	f67f af6f 	bls.w	8002ee6 <UTIL_LCD_FillCircle+0x22>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff fe14 	bl	8002c3c <UTIL_LCD_DrawCircle>
}
 8003014:	bf00      	nop
 8003016:	3720      	adds	r7, #32
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_MspInit+0x74>)
 8003024:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003028:	4a19      	ldr	r2, [pc, #100]	; (8003090 <HAL_MspInit+0x74>)
 800302a:	f043 0302 	orr.w	r3, r3, #2
 800302e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003032:	4b17      	ldr	r3, [pc, #92]	; (8003090 <HAL_MspInit+0x74>)
 8003034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	68bb      	ldr	r3, [r7, #8]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003040:	2200      	movs	r2, #0
 8003042:	210f      	movs	r1, #15
 8003044:	f06f 0001 	mvn.w	r0, #1
 8003048:	f003 fa59 	bl	80064fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  // Init PE3:
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <HAL_MspInit+0x74>)
 800304e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003052:	4a0f      	ldr	r2, [pc, #60]	; (8003090 <HAL_MspInit+0x74>)
 8003054:	f043 0310 	orr.w	r3, r3, #16
 8003058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_MspInit+0x74>)
 800305e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800306a:	2308      	movs	r3, #8
 800306c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800306e:	2301      	movs	r3, #1
 8003070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800307a:	f107 030c 	add.w	r3, r7, #12
 800307e:	4619      	mov	r1, r3
 8003080:	4804      	ldr	r0, [pc, #16]	; (8003094 <HAL_MspInit+0x78>)
 8003082:	f005 fdbd 	bl	8008c00 <HAL_GPIO_Init>

  /* USER CODE END MspInit 1 */
}
 8003086:	bf00      	nop
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	58024400 	.word	0x58024400
 8003094:	58021000 	.word	0x58021000

08003098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b0ba      	sub	sp, #232	; 0xe8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030b0:	f107 0310 	add.w	r3, r7, #16
 80030b4:	22c0      	movs	r2, #192	; 0xc0
 80030b6:	2100      	movs	r1, #0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f00d fa0a 	bl	80104d2 <memset>
  if(huart->Instance==USART3)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a36      	ldr	r2, [pc, #216]	; (800319c <HAL_UART_MspInit+0x104>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d164      	bne.n	8003192 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80030c8:	f04f 0202 	mov.w	r2, #2
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030da:	f107 0310 	add.w	r3, r7, #16
 80030de:	4618      	mov	r0, r3
 80030e0:	f008 fc30 	bl	800b944 <HAL_RCCEx_PeriphCLKConfig>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80030ea:	f7ff fbf1 	bl	80028d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80030ee:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <HAL_UART_MspInit+0x108>)
 80030f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030f4:	4a2a      	ldr	r2, [pc, #168]	; (80031a0 <HAL_UART_MspInit+0x108>)
 80030f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030fe:	4b28      	ldr	r3, [pc, #160]	; (80031a0 <HAL_UART_MspInit+0x108>)
 8003100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800310c:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <HAL_UART_MspInit+0x108>)
 800310e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003112:	4a23      	ldr	r2, [pc, #140]	; (80031a0 <HAL_UART_MspInit+0x108>)
 8003114:	f043 0302 	orr.w	r3, r3, #2
 8003118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800311c:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_UART_MspInit+0x108>)
 800311e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA11     ------> USART3_RX
    PA10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800312a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800312e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	2302      	movs	r3, #2
 8003134:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313e:	2303      	movs	r3, #3
 8003140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003144:	2307      	movs	r3, #7
 8003146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800314e:	4619      	mov	r1, r3
 8003150:	4814      	ldr	r0, [pc, #80]	; (80031a4 <HAL_UART_MspInit+0x10c>)
 8003152:	f005 fd55 	bl	8008c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800315a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315e:	2302      	movs	r3, #2
 8003160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316a:	2300      	movs	r3, #0
 800316c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003170:	2307      	movs	r3, #7
 8003172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003176:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800317a:	4619      	mov	r1, r3
 800317c:	4809      	ldr	r0, [pc, #36]	; (80031a4 <HAL_UART_MspInit+0x10c>)
 800317e:	f005 fd3f 	bl	8008c00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	2100      	movs	r1, #0
 8003186:	2027      	movs	r0, #39	; 0x27
 8003188:	f003 f9b9 	bl	80064fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800318c:	2027      	movs	r0, #39	; 0x27
 800318e:	f003 f9d0 	bl	8006532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003192:	bf00      	nop
 8003194:	37e8      	adds	r7, #232	; 0xe8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40004800 	.word	0x40004800
 80031a0:	58024400 	.word	0x58024400
 80031a4:	58020400 	.word	0x58020400

080031a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031ac:	e7fe      	b.n	80031ac <NMI_Handler+0x4>

080031ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ae:	b480      	push	{r7}
 80031b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b2:	e7fe      	b.n	80031b2 <HardFault_Handler+0x4>

080031b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031b8:	e7fe      	b.n	80031b8 <MemManage_Handler+0x4>

080031ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031be:	e7fe      	b.n	80031be <BusFault_Handler+0x4>

080031c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c4:	e7fe      	b.n	80031c4 <UsageFault_Handler+0x4>

080031c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031d8:	f003 f832 	bl	8006240 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80031dc:	f00c ff34 	bl	8010048 <xTaskGetSchedulerState>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d001      	beq.n	80031ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80031e6:	f00c ff9f 	bl	8010128 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}

080031ee <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 80031f2:	2000      	movs	r0, #0
 80031f4:	f000 fec4 	bl	8003f80 <BSP_PB_IRQHandler>
}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}

080031fc <TIM3_IRQHandler>:
/**
  * @brief  This function handles TIM3 interrupt requests.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void){
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TIM3Handle);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <TIM3_IRQHandler+0x10>)
 8003202:	f00a fd2e 	bl	800dc62 <HAL_TIM_IRQHandler>
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	24000178 	.word	0x24000178

08003210 <USART3_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UART3Handle);
 8003214:	4802      	ldr	r0, [pc, #8]	; (8003220 <USART3_IRQHandler+0x10>)
 8003216:	f00b f8d3 	bl	800e3c0 <HAL_UART_IRQHandler>
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	240000e4 	.word	0x240000e4

08003224 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8003228:	2000      	movs	r0, #0
 800322a:	f000 ff69 	bl	8004100 <BSP_AUDIO_OUT_IRQHandler>
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <DMA2_Stream4_IRQHandler+0x14>)
 800323a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800323e:	4618      	mov	r0, r3
 8003240:	f004 f8ba 	bl	80073b8 <HAL_DMA_IRQHandler>
}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	24000344 	.word	0x24000344

0800324c <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 8003250:	2130      	movs	r1, #48	; 0x30
 8003252:	2001      	movs	r0, #1
 8003254:	f001 f824 	bl	80042a0 <BSP_AUDIO_IN_IRQHandler>

}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}

0800325c <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  BSP_SDRAM_IRQHandler(0);
 8003260:	2000      	movs	r0, #0
 8003262:	f002 fc49 	bl	8005af8 <BSP_SDRAM_IRQHandler>

}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <_sbrk+0x5c>)
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <_sbrk+0x60>)
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <_sbrk+0x64>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <_sbrk+0x64>)
 800328a:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <_sbrk+0x68>)
 800328c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <_sbrk+0x64>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	429a      	cmp	r2, r3
 800329a:	d207      	bcs.n	80032ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800329c:	f00d f968 	bl	8010570 <__errno>
 80032a0:	4603      	mov	r3, r0
 80032a2:	220c      	movs	r2, #12
 80032a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
 80032aa:	e009      	b.n	80032c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <_sbrk+0x64>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <_sbrk+0x64>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <_sbrk+0x64>)
 80032bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032be:	68fb      	ldr	r3, [r7, #12]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	24080000 	.word	0x24080000
 80032cc:	00000400 	.word	0x00000400
 80032d0:	24000264 	.word	0x24000264
 80032d4:	24001720 	.word	0x24001720

080032d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80032dc:	4b37      	ldr	r3, [pc, #220]	; (80033bc <SystemInit+0xe4>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	4a36      	ldr	r2, [pc, #216]	; (80033bc <SystemInit+0xe4>)
 80032e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80032ec:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <SystemInit+0xe8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	2b06      	cmp	r3, #6
 80032f6:	d807      	bhi.n	8003308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80032f8:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <SystemInit+0xe8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 030f 	bic.w	r3, r3, #15
 8003300:	4a2f      	ldr	r2, [pc, #188]	; (80033c0 <SystemInit+0xe8>)
 8003302:	f043 0307 	orr.w	r3, r3, #7
 8003306:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003308:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <SystemInit+0xec>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a2d      	ldr	r2, [pc, #180]	; (80033c4 <SystemInit+0xec>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003314:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <SystemInit+0xec>)
 8003316:	2200      	movs	r2, #0
 8003318:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800331a:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <SystemInit+0xec>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	4929      	ldr	r1, [pc, #164]	; (80033c4 <SystemInit+0xec>)
 8003320:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <SystemInit+0xf0>)
 8003322:	4013      	ands	r3, r2
 8003324:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003326:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <SystemInit+0xe8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d007      	beq.n	8003342 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003332:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <SystemInit+0xe8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 030f 	bic.w	r3, r3, #15
 800333a:	4a21      	ldr	r2, [pc, #132]	; (80033c0 <SystemInit+0xe8>)
 800333c:	f043 0307 	orr.w	r3, r3, #7
 8003340:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <SystemInit+0xec>)
 8003344:	2200      	movs	r2, #0
 8003346:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003348:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <SystemInit+0xec>)
 800334a:	2200      	movs	r2, #0
 800334c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800334e:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <SystemInit+0xec>)
 8003350:	2200      	movs	r2, #0
 8003352:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003354:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <SystemInit+0xec>)
 8003356:	4a1d      	ldr	r2, [pc, #116]	; (80033cc <SystemInit+0xf4>)
 8003358:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <SystemInit+0xec>)
 800335c:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <SystemInit+0xf8>)
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003360:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <SystemInit+0xec>)
 8003362:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <SystemInit+0xfc>)
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003366:	4b17      	ldr	r3, [pc, #92]	; (80033c4 <SystemInit+0xec>)
 8003368:	2200      	movs	r2, #0
 800336a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800336c:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <SystemInit+0xec>)
 800336e:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <SystemInit+0xfc>)
 8003370:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003372:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <SystemInit+0xec>)
 8003374:	2200      	movs	r2, #0
 8003376:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003378:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <SystemInit+0xec>)
 800337a:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <SystemInit+0xfc>)
 800337c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <SystemInit+0xec>)
 8003380:	2200      	movs	r2, #0
 8003382:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <SystemInit+0xec>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0e      	ldr	r2, [pc, #56]	; (80033c4 <SystemInit+0xec>)
 800338a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800338e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <SystemInit+0xec>)
 8003392:	2200      	movs	r2, #0
 8003394:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <SystemInit+0x100>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <SystemInit+0x104>)
 800339c:	4013      	ands	r3, r2
 800339e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033a2:	d202      	bcs.n	80033aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <SystemInit+0x108>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80033aa:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <SystemInit+0x10c>)
 80033ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80033b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80033b2:	bf00      	nop
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000ed00 	.word	0xe000ed00
 80033c0:	52002000 	.word	0x52002000
 80033c4:	58024400 	.word	0x58024400
 80033c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80033cc:	02020200 	.word	0x02020200
 80033d0:	01ff0000 	.word	0x01ff0000
 80033d4:	01010280 	.word	0x01010280
 80033d8:	5c001000 	.word	0x5c001000
 80033dc:	ffff0000 	.word	0xffff0000
 80033e0:	51008108 	.word	0x51008108
 80033e4:	52004000 	.word	0x52004000

080033e8 <USART3_Init>:
/* Private function prototypes -----------------------------------------------*/

/* Private functions ---------------------------------------------------------*/

HAL_StatusTypeDef USART3_Init(UART_HandleTypeDef* huart3)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]

  huart3->Instance = USART3;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a11      	ldr	r2, [pc, #68]	; (8003438 <USART3_Init+0x50>)
 80033f4:	601a      	str	r2, [r3, #0]
  huart3->Init.BaudRate = 115200;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033fc:	605a      	str	r2, [r3, #4]
  huart3->Init.WordLength = UART_WORDLENGTH_8B;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	609a      	str	r2, [r3, #8]
  huart3->Init.StopBits = UART_STOPBITS_1;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	60da      	str	r2, [r3, #12]
  huart3->Init.Parity = UART_PARITY_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]
  huart3->Init.Mode = UART_MODE_TX_RX;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	220c      	movs	r2, #12
 8003414:	615a      	str	r2, [r3, #20]
  huart3->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	619a      	str	r2, [r3, #24]
  //huart1->Init.OverSampling = UART_OVERSAMPLING_16;
  //huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  //huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(huart3) != HAL_OK)
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f00a fe29 	bl	800e074 <HAL_UART_Init>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <USART3_Init+0x44>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <USART3_Init+0x46>
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40004800 	.word	0x40004800

0800343c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800343c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003474 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003440:	f7ff ff4a 	bl	80032d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003444:	480c      	ldr	r0, [pc, #48]	; (8003478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003446:	490d      	ldr	r1, [pc, #52]	; (800347c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003448:	4a0d      	ldr	r2, [pc, #52]	; (8003480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800344a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800344c:	e002      	b.n	8003454 <LoopCopyDataInit>

0800344e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800344e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003452:	3304      	adds	r3, #4

08003454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003458:	d3f9      	bcc.n	800344e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800345a:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800345c:	4c0a      	ldr	r4, [pc, #40]	; (8003488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800345e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003460:	e001      	b.n	8003466 <LoopFillZerobss>

08003462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003464:	3204      	adds	r2, #4

08003466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003468:	d3fb      	bcc.n	8003462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800346a:	f00d f887 	bl	801057c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800346e:	f7fd f91d 	bl	80006ac <main>
  bx  lr
 8003472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003474:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003478:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800347c:	240000b4 	.word	0x240000b4
  ldr r2, =_sidata
 8003480:	08010acc 	.word	0x08010acc
  ldr r2, =_sbss
 8003484:	240000b4 	.word	0x240000b4
  ldr r4, =_ebss
 8003488:	24001720 	.word	0x24001720

0800348c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800348c:	e7fe      	b.n	800348c <ADC3_IRQHandler>
	...

08003490 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d103      	bne.n	80034a8 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 80034a0:	f04f 33ff 	mov.w	r3, #4294967295
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e02c      	b.n	8003502 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	891a      	ldrh	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a0c      	ldr	r2, [pc, #48]	; (800350c <FT5336_RegisterBusIO+0x7c>)
 80034dc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a0b      	ldr	r2, [pc, #44]	; (8003510 <FT5336_RegisterBusIO+0x80>)
 80034e2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4798      	blx	r3
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	e002      	b.n	8003502 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 80034fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003500:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	08003909 	.word	0x08003909
 8003510:	0800393d 	.word	0x0800393d

08003514 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2201      	movs	r2, #1
 8003522:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2201      	movs	r2, #1
 8003528:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2205      	movs	r2, #5
 800352e:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003536:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800353e:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10d      	bne.n	8003580 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f987 	bl	800387e <FT5336_DisableIT>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4413      	add	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
 800358a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800358c:	68fb      	ldr	r3, [r7, #12]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d103      	bne.n	80035b4 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 80035b4:	68fb      	ldr	r3, [r7, #12]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f103 0218 	add.w	r2, r3, #24
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f000 fa25 	bl	8003a2a <ft5336_radian_value>
 80035e0:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f103 0218 	add.w	r2, r3, #24
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f000 fa2b 	bl	8003a4c <ft5336_offset_left_right>
 80035f6:	4602      	mov	r2, r0
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4413      	add	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f103 0218 	add.w	r2, r3, #24
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	4619      	mov	r1, r3
 800360c:	4610      	mov	r0, r2
 800360e:	f000 fa2e 	bl	8003a6e <ft5336_offset_up_down>
 8003612:	4602      	mov	r2, r0
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f103 0218 	add.w	r2, r3, #24
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f000 fa31 	bl	8003a90 <ft5336_disatnce_left_right>
 800362e:	4602      	mov	r2, r0
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f103 0218 	add.w	r2, r3, #24
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	4619      	mov	r1, r3
 8003644:	4610      	mov	r0, r2
 8003646:	f000 fa34 	bl	8003ab2 <ft5336_distance_up_down>
 800364a:	4602      	mov	r2, r0
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f103 0218 	add.w	r2, r3, #24
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	4619      	mov	r1, r3
 8003660:	4610      	mov	r0, r2
 8003662:	f000 fa37 	bl	8003ad4 <ft5336_distance_zoom>
 8003666:	4602      	mov	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8003674:	f04f 33ff 	mov.w	r3, #4294967295
 8003678:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800367a:	68fb      	ldr	r3, [r7, #12]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3318      	adds	r3, #24
 8003692:	6839      	ldr	r1, [r7, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fa3f 	bl	8003b18 <ft5336_chip_id>
 800369a:	4603      	mov	r3, r0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f908 	bl	80038c8 <FT5336_DetectTouch>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f103 0018 	add.w	r0, r3, #24
 80036c6:	f107 0208 	add.w	r2, r7, #8
 80036ca:	2304      	movs	r3, #4
 80036cc:	2103      	movs	r1, #3
 80036ce:	f000 f94f 	bl	8003970 <ft5336_read_reg>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e00f      	b.n	8003700 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80036e0:	7a3b      	ldrb	r3, [r7, #8]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80036e8:	7a7a      	ldrb	r2, [r7, #9]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80036f0:	7abb      	ldrb	r3, [r7, #10]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80036f8:	7afa      	ldrb	r2, [r7, #11]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003700:	68fb      	ldr	r3, [r7, #12]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b08c      	sub	sp, #48	; 0x30
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f8d5 	bl	80038c8 <FT5336_DetectTouch>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f103 0018 	add.w	r0, r3, #24
 800372c:	f107 0208 	add.w	r2, r7, #8
 8003730:	231e      	movs	r3, #30
 8003732:	2103      	movs	r1, #3
 8003734:	f000 f91c 	bl	8003970 <ft5336_read_reg>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800373e:	f04f 33ff 	mov.w	r3, #4294967295
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003744:	e077      	b.n	8003836 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003746:	2300      	movs	r3, #0
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
 800374a:	e071      	b.n	8003830 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800374c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	3330      	adds	r3, #48	; 0x30
 8003758:	443b      	add	r3, r7
 800375a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8003764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	3301      	adds	r3, #1
 8003770:	3330      	adds	r3, #48	; 0x30
 8003772:	443b      	add	r3, r7
 8003774:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003778:	ea41 0203 	orr.w	r2, r1, r3
 800377c:	6839      	ldr	r1, [r7, #0]
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	3302      	adds	r3, #2
 8003792:	3330      	adds	r3, #48	; 0x30
 8003794:	443b      	add	r3, r7
 8003796:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 80037a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	3303      	adds	r3, #3
 80037ac:	3330      	adds	r3, #48	; 0x30
 80037ae:	443b      	add	r3, r7
 80037b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037b4:	4319      	orrs	r1, r3
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ba:	3206      	adds	r2, #6
 80037bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80037c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	3330      	adds	r3, #48	; 0x30
 80037cc:	443b      	add	r3, r7
 80037ce:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037d2:	099b      	lsrs	r3, r3, #6
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	4619      	mov	r1, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037dc:	3210      	adds	r2, #16
 80037de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80037e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e4:	4613      	mov	r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4413      	add	r3, r2
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	3304      	adds	r3, #4
 80037ee:	3330      	adds	r3, #48	; 0x30
 80037f0:	443b      	add	r3, r7
 80037f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037f6:	4619      	mov	r1, r3
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	330a      	adds	r3, #10
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8003804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003806:	4613      	mov	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4413      	add	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	3305      	adds	r3, #5
 8003810:	3330      	adds	r3, #48	; 0x30
 8003812:	443b      	add	r3, r7
 8003814:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	b2db      	uxtb	r3, r3
 800381c:	4619      	mov	r1, r3
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	3314      	adds	r3, #20
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	3301      	adds	r3, #1
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	2b04      	cmp	r3, #4
 8003834:	d98a      	bls.n	800374c <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003838:	4618      	mov	r0, r3
 800383a:	3730      	adds	r7, #48	; 0x30
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3318      	adds	r3, #24
 800384e:	6839      	ldr	r1, [r7, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f000 f8bb 	bl	80039cc <ft5336_gest_id>
 8003856:	4603      	mov	r3, r0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3318      	adds	r3, #24
 800386c:	2101      	movs	r1, #1
 800386e:	4618      	mov	r0, r3
 8003870:	f000 f941 	bl	8003af6 <ft5336_g_mode>
 8003874:	4603      	mov	r3, r0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3318      	adds	r3, #24
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f000 f932 	bl	8003af6 <ft5336_g_mode>
 8003892:	4603      	mov	r3, r0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3318      	adds	r3, #24
 80038d4:	f107 020b 	add.w	r2, r7, #11
 80038d8:	4611      	mov	r1, r2
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f886 	bl	80039ec <ft5336_td_status>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	e007      	b.n	80038fe <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80038ee:	7afb      	ldrb	r3, [r7, #11]
 80038f0:	2b05      	cmp	r3, #5
 80038f2:	d902      	bls.n	80038fa <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e001      	b.n	80038fe <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 80038fa:	7afb      	ldrb	r3, [r7, #11]
 80038fc:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80038fe:	68fb      	ldr	r3, [r7, #12]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	461a      	mov	r2, r3
 8003914:	460b      	mov	r3, r1
 8003916:	72fb      	strb	r3, [r7, #11]
 8003918:	4613      	mov	r3, r2
 800391a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	691c      	ldr	r4, [r3, #16]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	8918      	ldrh	r0, [r3, #8]
 8003928:	7afb      	ldrb	r3, [r7, #11]
 800392a:	b299      	uxth	r1, r3
 800392c:	893b      	ldrh	r3, [r7, #8]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	47a0      	blx	r4
 8003932:	4603      	mov	r3, r0
}
 8003934:	4618      	mov	r0, r3
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	bd90      	pop	{r4, r7, pc}

0800393c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	461a      	mov	r2, r3
 8003948:	460b      	mov	r3, r1
 800394a:	72fb      	strb	r3, [r7, #11]
 800394c:	4613      	mov	r3, r2
 800394e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	68dc      	ldr	r4, [r3, #12]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	8918      	ldrh	r0, [r3, #8]
 800395c:	7afb      	ldrb	r3, [r7, #11]
 800395e:	b299      	uxth	r1, r3
 8003960:	893b      	ldrh	r3, [r7, #8]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	47a0      	blx	r4
 8003966:	4603      	mov	r3, r0
}
 8003968:	4618      	mov	r0, r3
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	bd90      	pop	{r4, r7, pc}

08003970 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8003970:	b590      	push	{r4, r7, lr}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	461a      	mov	r2, r3
 800397c:	460b      	mov	r3, r1
 800397e:	72fb      	strb	r3, [r7, #11]
 8003980:	4613      	mov	r3, r2
 8003982:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685c      	ldr	r4, [r3, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6898      	ldr	r0, [r3, #8]
 800398c:	893b      	ldrh	r3, [r7, #8]
 800398e:	7af9      	ldrb	r1, [r7, #11]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	47a0      	blx	r4
 8003994:	4603      	mov	r3, r0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	bd90      	pop	{r4, r7, pc}

0800399e <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800399e:	b590      	push	{r4, r7, lr}
 80039a0:	b085      	sub	sp, #20
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	461a      	mov	r2, r3
 80039aa:	460b      	mov	r3, r1
 80039ac:	72fb      	strb	r3, [r7, #11]
 80039ae:	4613      	mov	r3, r2
 80039b0:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681c      	ldr	r4, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6898      	ldr	r0, [r3, #8]
 80039ba:	893b      	ldrh	r3, [r7, #8]
 80039bc:	7af9      	ldrb	r1, [r7, #11]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	47a0      	blx	r4
 80039c2:	4603      	mov	r3, r0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd90      	pop	{r4, r7, pc}

080039cc <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 80039d6:	2301      	movs	r3, #1
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	2101      	movs	r1, #1
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ffc7 	bl	8003970 <ft5336_read_reg>
 80039e2:	4603      	mov	r3, r0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80039f6:	2301      	movs	r3, #1
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	2102      	movs	r1, #2
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ffb7 	bl	8003970 <ft5336_read_reg>
 8003a02:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	781a      	ldrb	r2, [r3, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8003a20:	68fb      	ldr	r3, [r7, #12]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	460b      	mov	r3, r1
 8003a34:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003a36:	1cfa      	adds	r2, r7, #3
 8003a38:	2301      	movs	r3, #1
 8003a3a:	2191      	movs	r1, #145	; 0x91
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff ffae 	bl	800399e <ft5336_write_reg>
 8003a42:	4603      	mov	r3, r0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003a58:	1cfa      	adds	r2, r7, #3
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	2192      	movs	r1, #146	; 0x92
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ff9d 	bl	800399e <ft5336_write_reg>
 8003a64:	4603      	mov	r3, r0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	460b      	mov	r3, r1
 8003a78:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8003a7a:	1cfa      	adds	r2, r7, #3
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	2193      	movs	r1, #147	; 0x93
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff ff8c 	bl	800399e <ft5336_write_reg>
 8003a86:	4603      	mov	r3, r0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8003a9c:	1cfa      	adds	r2, r7, #3
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	2194      	movs	r1, #148	; 0x94
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff ff7b 	bl	800399e <ft5336_write_reg>
 8003aa8:	4603      	mov	r3, r0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8003abe:	1cfa      	adds	r2, r7, #3
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	2195      	movs	r1, #149	; 0x95
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff6a 	bl	800399e <ft5336_write_reg>
 8003aca:	4603      	mov	r3, r0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8003ae0:	1cfa      	adds	r2, r7, #3
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	2196      	movs	r1, #150	; 0x96
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ff59 	bl	800399e <ft5336_write_reg>
 8003aec:	4603      	mov	r3, r0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	460b      	mov	r3, r1
 8003b00:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8003b02:	1cfa      	adds	r2, r7, #3
 8003b04:	2301      	movs	r3, #1
 8003b06:	21a4      	movs	r1, #164	; 0xa4
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff ff48 	bl	800399e <ft5336_write_reg>
 8003b0e:	4603      	mov	r3, r0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8003b22:	2301      	movs	r3, #1
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	21a8      	movs	r1, #168	; 0xa8
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ff21 	bl	8003970 <ft5336_read_reg>
 8003b2e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d107      	bne.n	8003b46 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	781a      	ldrb	r2, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8003b46:	68fb      	ldr	r3, [r7, #12]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 8003b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f832 	bl	8003bd0 <MT48LC4M32B2_ClockEnable>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d128      	bne.n	8003bc4 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8003b72:	2001      	movs	r0, #1
 8003b74:	f000 f8e2 	bl	8003d3c <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f84a 	bl	8003c18 <MT48LC4M32B2_Precharge>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d11c      	bne.n	8003bc4 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6819      	ldr	r1, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	461a      	mov	r2, r3
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f897 	bl	8003cc8 <MT48LC4M32B2_RefreshMode>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d111      	bne.n	8003bc4 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 8003ba0:	6839      	ldr	r1, [r7, #0]
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f85c 	bl	8003c60 <MT48LC4M32B2_ModeRegConfig>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f8ad 	bl	8003d14 <MT48LC4M32B2_RefreshRate>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8003bda:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <MT48LC4M32B2_ClockEnable+0x44>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8003be0:	4a0c      	ldr	r2, [pc, #48]	; (8003c14 <MT48LC4M32B2_ClockEnable+0x44>)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <MT48LC4M32B2_ClockEnable+0x44>)
 8003be8:	2201      	movs	r2, #1
 8003bea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <MT48LC4M32B2_ClockEnable+0x44>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8003bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bf6:	4907      	ldr	r1, [pc, #28]	; (8003c14 <MT48LC4M32B2_ClockEnable+0x44>)
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f009 fe3d 	bl	800d878 <HAL_SDRAM_SendCommand>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8003c04:	f04f 33ff 	mov.w	r3, #4294967295
 8003c08:	e000      	b.n	8003c0c <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8003c0a:	2300      	movs	r3, #0
  }
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	24000268 	.word	0x24000268

08003c18 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <MT48LC4M32B2_Precharge+0x44>)
 8003c24:	2202      	movs	r2, #2
 8003c26:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8003c28:	4a0c      	ldr	r2, [pc, #48]	; (8003c5c <MT48LC4M32B2_Precharge+0x44>)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <MT48LC4M32B2_Precharge+0x44>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c34:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <MT48LC4M32B2_Precharge+0x44>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8003c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c3e:	4907      	ldr	r1, [pc, #28]	; (8003c5c <MT48LC4M32B2_Precharge+0x44>)
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f009 fe19 	bl	800d878 <HAL_SDRAM_SendCommand>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8003c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c50:	e000      	b.n	8003c54 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8003c52:	2300      	movs	r3, #0
  }
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	24000268 	.word	0x24000268

08003c60 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8003c72:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8003c78:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8003c7e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8003c94:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8003c96:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003c9c:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8003ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca6:	4907      	ldr	r1, [pc, #28]	; (8003cc4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f009 fde5 	bl	800d878 <HAL_SDRAM_SendCommand>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb8:	e000      	b.n	8003cbc <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8003cba:	2300      	movs	r3, #0
  }
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	24000268 	.word	0x24000268

08003cc8 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8003cd4:	4a0e      	ldr	r2, [pc, #56]	; (8003d10 <MT48LC4M32B2_RefreshMode+0x48>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8003cda:	4a0d      	ldr	r2, [pc, #52]	; (8003d10 <MT48LC4M32B2_RefreshMode+0x48>)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <MT48LC4M32B2_RefreshMode+0x48>)
 8003ce2:	2208      	movs	r2, #8
 8003ce4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <MT48LC4M32B2_RefreshMode+0x48>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8003cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cf0:	4907      	ldr	r1, [pc, #28]	; (8003d10 <MT48LC4M32B2_RefreshMode+0x48>)
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f009 fdc0 	bl	800d878 <HAL_SDRAM_SendCommand>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 8003cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003d02:	e000      	b.n	8003d06 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8003d04:	2300      	movs	r3, #0
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	24000268 	.word	0x24000268

08003d14 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8003d1e:	6839      	ldr	r1, [r7, #0]
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f009 fdde 	bl	800d8e2 <HAL_SDRAM_ProgramRefreshRate>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8003d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d30:	e000      	b.n	8003d34 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8003d32:	2300      	movs	r3, #0
  }
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8003d44:	f002 fa90 	bl	8006268 <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8003d4a:	bf00      	nop
 8003d4c:	f002 fa8c 	bl	8006268 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d8f7      	bhi.n	8003d4c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	; 0x28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10f      	bne.n	8003d9c <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
 8003d7c:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <BSP_LED_Init+0xb0>)
 8003d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d82:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <BSP_LED_Init+0xb0>)
 8003d84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d8c:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <BSP_LED_Init+0xb0>)
 8003d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	e015      	b.n	8003dc8 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d10f      	bne.n	8003dc2 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
 8003da2:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <BSP_LED_Init+0xb0>)
 8003da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003da8:	4a1b      	ldr	r2, [pc, #108]	; (8003e18 <BSP_LED_Init+0xb0>)
 8003daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003db2:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <BSP_LED_Init+0xb0>)
 8003db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	e002      	b.n	8003dc8 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003dc2:	f06f 0301 	mvn.w	r3, #1
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	4a14      	ldr	r2, [pc, #80]	; (8003e1c <BSP_LED_Init+0xb4>)
 8003dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	4a0f      	ldr	r2, [pc, #60]	; (8003e20 <BSP_LED_Init+0xb8>)
 8003de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de6:	f107 0210 	add.w	r2, r7, #16
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f004 ff07 	bl	8008c00 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <BSP_LED_Init+0xb8>)
 8003df6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	4a07      	ldr	r2, [pc, #28]	; (8003e1c <BSP_LED_Init+0xb4>)
 8003dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2201      	movs	r2, #1
 8003e06:	4619      	mov	r1, r3
 8003e08:	f005 f9b4 	bl	8009174 <HAL_GPIO_WritePin>
  return ret;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3728      	adds	r7, #40	; 0x28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	58024400 	.word	0x58024400
 8003e1c:	080109e0 	.word	0x080109e0
 8003e20:	2400003c 	.word	0x2400003c

08003e24 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	4a08      	ldr	r2, [pc, #32]	; (8003e58 <BSP_LED_On+0x34>)
 8003e36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	4a07      	ldr	r2, [pc, #28]	; (8003e5c <BSP_LED_On+0x38>)
 8003e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2200      	movs	r2, #0
 8003e46:	4619      	mov	r1, r3
 8003e48:	f005 f994 	bl	8009174 <HAL_GPIO_WritePin>
  return ret;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	2400003c 	.word	0x2400003c
 8003e5c:	080109e0 	.word	0x080109e0

08003e60 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <BSP_LED_Off+0x34>)
 8003e72:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	4a07      	ldr	r2, [pc, #28]	; (8003e98 <BSP_LED_Off+0x38>)
 8003e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2201      	movs	r2, #1
 8003e82:	4619      	mov	r1, r3
 8003e84:	f005 f976 	bl	8009174 <HAL_GPIO_WritePin>
  return ret;
 8003e88:	68fb      	ldr	r3, [r7, #12]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	2400003c 	.word	0x2400003c
 8003e98:	080109e0 	.word	0x080109e0

08003e9c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	460a      	mov	r2, r1
 8003ea6:	71fb      	strb	r3, [r7, #7]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_USER_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_USER_GPIO_CLK_ENABLE();
 8003eac:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <BSP_PB_Init+0xcc>)
 8003eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eb2:	4a2d      	ldr	r2, [pc, #180]	; (8003f68 <BSP_PB_Init+0xcc>)
 8003eb4:	f043 0304 	orr.w	r3, r3, #4
 8003eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ebc:	4b2a      	ldr	r3, [pc, #168]	; (8003f68 <BSP_PB_Init+0xcc>)
 8003ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8003eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ece:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8003ed8:	79bb      	ldrb	r3, [r7, #6]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10c      	bne.n	8003ef8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	4a21      	ldr	r2, [pc, #132]	; (8003f6c <BSP_PB_Init+0xd0>)
 8003ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eea:	f107 020c 	add.w	r2, r7, #12
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f004 fe85 	bl	8008c00 <HAL_GPIO_Init>
 8003ef6:	e031      	b.n	8003f5c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003ef8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003efc:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	4a1a      	ldr	r2, [pc, #104]	; (8003f6c <BSP_PB_Init+0xd0>)
 8003f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f06:	f107 020c 	add.w	r2, r7, #12
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f004 fe77 	bl	8008c00 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <BSP_PB_Init+0xd4>)
 8003f18:	441a      	add	r2, r3
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	4915      	ldr	r1, [pc, #84]	; (8003f74 <BSP_PB_Init+0xd8>)
 8003f1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f004 fe26 	bl	8008b76 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4a10      	ldr	r2, [pc, #64]	; (8003f70 <BSP_PB_Init+0xd4>)
 8003f30:	1898      	adds	r0, r3, r2
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	4a10      	ldr	r2, [pc, #64]	; (8003f78 <BSP_PB_Init+0xdc>)
 8003f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	f004 fdfb 	bl	8008b38 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003f42:	2028      	movs	r0, #40	; 0x28
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	4a0d      	ldr	r2, [pc, #52]	; (8003f7c <BSP_PB_Init+0xe0>)
 8003f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f002 fad5 	bl	80064fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003f54:	2328      	movs	r3, #40	; 0x28
 8003f56:	4618      	mov	r0, r3
 8003f58:	f002 faeb 	bl	8006532 <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	58024400 	.word	0x58024400
 8003f6c:	24000044 	.word	0x24000044
 8003f70:	24000278 	.word	0x24000278
 8003f74:	080109e8 	.word	0x080109e8
 8003f78:	24000048 	.word	0x24000048
 8003f7c:	2400004c 	.word	0x2400004c

08003f80 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <BSP_PB_IRQHandler+0x20>)
 8003f90:	4413      	add	r3, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f004 fe04 	bl	8008ba0 <HAL_EXTI_IRQHandler>
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	24000278 	.word	0x24000278

08003fa4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f7fe fa65 	bl	8002478 <BSP_PB_Callback>
}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <BSP_AUDIO_OUT_DeInit>:
  * @brief  De-initializes the audio out peripheral.
  * @param Instance :  AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
int32_t BSP_AUDIO_OUT_DeInit(uint32_t Instance)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_OUT_INSTANCES_NBR)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <BSP_AUDIO_OUT_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003fc6:	f06f 0301 	mvn.w	r3, #1
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e027      	b.n	800401e <BSP_AUDIO_OUT_DeInit+0x6a>
  }
  else
  {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
    SAI_MspDeInit(&haudio_out_sai);
 8003fce:	4816      	ldr	r0, [pc, #88]	; (8004028 <BSP_AUDIO_OUT_DeInit+0x74>)
 8003fd0:	f000 f97e 	bl	80042d0 <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */
    /* Initialize the haudio_out_sai Instance parameter */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <BSP_AUDIO_OUT_DeInit+0x74>)
 8003fd6:	4a15      	ldr	r2, [pc, #84]	; (800402c <BSP_AUDIO_OUT_DeInit+0x78>)
 8003fd8:	601a      	str	r2, [r3, #0]
    /* Call the Media layer stop function */
    if (Audio_Drv->DeInit(Audio_CompObj) != 0)
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <BSP_AUDIO_OUT_DeInit+0x7c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a14      	ldr	r2, [pc, #80]	; (8004034 <BSP_AUDIO_OUT_DeInit+0x80>)
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	4798      	blx	r3
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <BSP_AUDIO_OUT_DeInit+0x42>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003fee:	f06f 0304 	mvn.w	r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e013      	b.n	800401e <BSP_AUDIO_OUT_DeInit+0x6a>
    }
    else if (HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 8003ff6:	480c      	ldr	r0, [pc, #48]	; (8004028 <BSP_AUDIO_OUT_DeInit+0x74>)
 8003ff8:	f009 fad0 	bl	800d59c <HAL_SAI_DeInit>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <BSP_AUDIO_OUT_DeInit+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004002:	f06f 0303 	mvn.w	r3, #3
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	e009      	b.n	800401e <BSP_AUDIO_OUT_DeInit+0x6a>
    }
    else
    {
      /* Update BSP AUDIO OUT state */
      Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_RESET;
 800400a:	490b      	ldr	r1, [pc, #44]	; (8004038 <BSP_AUDIO_OUT_DeInit+0x84>)
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	331c      	adds	r3, #28
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
    }
  }
  /* Return BSP status */
  return ret;
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	24000288 	.word	0x24000288
 800402c:	40015c04 	.word	0x40015c04
 8004030:	24000280 	.word	0x24000280
 8004034:	24000284 	.word	0x24000284
 8004038:	24000320 	.word	0x24000320

0800403c <BSP_AUDIO_OUT_Stop>:
  * @brief  Stops audio playing and Power down the Audio Codec.
  * @param Instance :  AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Stop(uint32_t Instance)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004044:	2300      	movs	r3, #0
 8004046:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_OUT_INSTANCES_NBR)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <BSP_AUDIO_OUT_Stop+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800404e:	f06f 0301 	mvn.w	r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e047      	b.n	80040e6 <BSP_AUDIO_OUT_Stop+0xaa>
  }/* Check audio out state */
  else if (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_STOP)
 8004056:	4926      	ldr	r1, [pc, #152]	; (80040f0 <BSP_AUDIO_OUT_Stop+0xb4>)
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	331c      	adds	r3, #28
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d03c      	beq.n	80040e6 <BSP_AUDIO_OUT_Stop+0xaa>
  {
    /* Nothing to do */
  }
  else if ((Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_PLAYING) &&
 800406c:	4920      	ldr	r1, [pc, #128]	; (80040f0 <BSP_AUDIO_OUT_Stop+0xb4>)
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	331c      	adds	r3, #28
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d00e      	beq.n	80040a0 <BSP_AUDIO_OUT_Stop+0x64>
           (Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_PAUSE))
 8004082:	491b      	ldr	r1, [pc, #108]	; (80040f0 <BSP_AUDIO_OUT_Stop+0xb4>)
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	331c      	adds	r3, #28
 8004092:	681b      	ldr	r3, [r3, #0]
  else if ((Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_PLAYING) &&
 8004094:	2b03      	cmp	r3, #3
 8004096:	d003      	beq.n	80040a0 <BSP_AUDIO_OUT_Stop+0x64>
  {
    ret = BSP_ERROR_BUSY;
 8004098:	f06f 0302 	mvn.w	r3, #2
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e022      	b.n	80040e6 <BSP_AUDIO_OUT_Stop+0xaa>
  }/* Call the Media layer stop function */
  else if (Audio_Drv->Stop(Audio_CompObj, CODEC_PDWN_SW) < 0)
 80040a0:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <BSP_AUDIO_OUT_Stop+0xb8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <BSP_AUDIO_OUT_Stop+0xbc>)
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	2101      	movs	r1, #1
 80040ac:	4610      	mov	r0, r2
 80040ae:	4798      	blx	r3
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	da03      	bge.n	80040be <BSP_AUDIO_OUT_Stop+0x82>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80040b6:	f06f 0304 	mvn.w	r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	e013      	b.n	80040e6 <BSP_AUDIO_OUT_Stop+0xaa>
  }
  else if (HAL_SAI_DMAStop(&haudio_out_sai) != HAL_OK)
 80040be:	480f      	ldr	r0, [pc, #60]	; (80040fc <BSP_AUDIO_OUT_Stop+0xc0>)
 80040c0:	f009 fadc 	bl	800d67c <HAL_SAI_DMAStop>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <BSP_AUDIO_OUT_Stop+0x96>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80040ca:	f06f 0303 	mvn.w	r3, #3
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	e009      	b.n	80040e6 <BSP_AUDIO_OUT_Stop+0xaa>
  }
  else
  {
    /* Update BSP AUDIO OUT state */
    Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 80040d2:	4907      	ldr	r1, [pc, #28]	; (80040f0 <BSP_AUDIO_OUT_Stop+0xb4>)
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	331c      	adds	r3, #28
 80040e2:	2202      	movs	r2, #2
 80040e4:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 80040e6:	68fb      	ldr	r3, [r7, #12]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	24000320 	.word	0x24000320
 80040f4:	24000280 	.word	0x24000280
 80040f8:	24000284 	.word	0x24000284
 80040fc:	24000288 	.word	0x24000288

08004100 <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d105      	bne.n	800411a <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800410e:	4b05      	ldr	r3, [pc, #20]	; (8004124 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8004110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004114:	4618      	mov	r0, r3
 8004116:	f003 f94f 	bl	80073b8 <HAL_DMA_IRQHandler>
  }
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	24000288 	.word	0x24000288

08004128 <BSP_AUDIO_IN_DeInit>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used or 1 is used
  * @retval BSP status
  */

int32_t BSP_AUDIO_IN_DeInit(uint32_t Instance)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d903      	bls.n	8004142 <BSP_AUDIO_IN_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800413a:	f06f 0301 	mvn.w	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e056      	b.n	80041f0 <BSP_AUDIO_IN_DeInit+0xc8>
  }
  else
  {
    if (Instance == 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d12a      	bne.n	800419e <BSP_AUDIO_IN_DeInit+0x76>
    {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
      SAI_MspDeInit(&haudio_in_sai);
 8004148:	482c      	ldr	r0, [pc, #176]	; (80041fc <BSP_AUDIO_IN_DeInit+0xd4>)
 800414a:	f000 f8c1 	bl	80042d0 <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */

      /* Initialize the haudio_in_sai Instance parameter */
      haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800414e:	4b2b      	ldr	r3, [pc, #172]	; (80041fc <BSP_AUDIO_IN_DeInit+0xd4>)
 8004150:	4a2b      	ldr	r2, [pc, #172]	; (8004200 <BSP_AUDIO_IN_DeInit+0xd8>)
 8004152:	601a      	str	r2, [r3, #0]
      /* Initialize the haudio_out_sai Instance parameter */
      haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004154:	4b2b      	ldr	r3, [pc, #172]	; (8004204 <BSP_AUDIO_IN_DeInit+0xdc>)
 8004156:	4a2c      	ldr	r2, [pc, #176]	; (8004208 <BSP_AUDIO_IN_DeInit+0xe0>)
 8004158:	601a      	str	r2, [r3, #0]

      if (Audio_Drv->DeInit(Audio_CompObj) < 0)
 800415a:	4b2c      	ldr	r3, [pc, #176]	; (800420c <BSP_AUDIO_IN_DeInit+0xe4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	4a2b      	ldr	r2, [pc, #172]	; (8004210 <BSP_AUDIO_IN_DeInit+0xe8>)
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	4610      	mov	r0, r2
 8004166:	4798      	blx	r3
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	da03      	bge.n	8004176 <BSP_AUDIO_IN_DeInit+0x4e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800416e:	f06f 0304 	mvn.w	r3, #4
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e032      	b.n	80041dc <BSP_AUDIO_IN_DeInit+0xb4>
      } /* De-Initializes SAI handles */
      else if (HAL_SAI_DeInit(&haudio_in_sai) != HAL_OK)
 8004176:	4821      	ldr	r0, [pc, #132]	; (80041fc <BSP_AUDIO_IN_DeInit+0xd4>)
 8004178:	f009 fa10 	bl	800d59c <HAL_SAI_DeInit>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <BSP_AUDIO_IN_DeInit+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8004182:	f06f 0303 	mvn.w	r3, #3
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	e028      	b.n	80041dc <BSP_AUDIO_IN_DeInit+0xb4>
      }
      else
      {
        if (HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 800418a:	481e      	ldr	r0, [pc, #120]	; (8004204 <BSP_AUDIO_IN_DeInit+0xdc>)
 800418c:	f009 fa06 	bl	800d59c <HAL_SAI_DeInit>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d022      	beq.n	80041dc <BSP_AUDIO_IN_DeInit+0xb4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8004196:	f06f 0303 	mvn.w	r3, #3
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e01e      	b.n	80041dc <BSP_AUDIO_IN_DeInit+0xb4>
        }
      }
    }
    else if (Instance == 1U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d11b      	bne.n	80041dc <BSP_AUDIO_IN_DeInit+0xb4>
    {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
      SAI_MspDeInit(&haudio_in_sai);
 80041a4:	4815      	ldr	r0, [pc, #84]	; (80041fc <BSP_AUDIO_IN_DeInit+0xd4>)
 80041a6:	f000 f893 	bl	80042d0 <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */

      /* Initialize the haudio_in_sai Instance parameter */
      haudio_in_sai.Instance = AUDIO_IN_SAI_PDMx;
 80041aa:	4b14      	ldr	r3, [pc, #80]	; (80041fc <BSP_AUDIO_IN_DeInit+0xd4>)
 80041ac:	4a19      	ldr	r2, [pc, #100]	; (8004214 <BSP_AUDIO_IN_DeInit+0xec>)
 80041ae:	601a      	str	r2, [r3, #0]
      /* Initialize the haudio_out_sai Instance parameter */
      haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80041b0:	4b14      	ldr	r3, [pc, #80]	; (8004204 <BSP_AUDIO_IN_DeInit+0xdc>)
 80041b2:	4a15      	ldr	r2, [pc, #84]	; (8004208 <BSP_AUDIO_IN_DeInit+0xe0>)
 80041b4:	601a      	str	r2, [r3, #0]

      if (HAL_SAI_DeInit(&haudio_in_sai) != HAL_OK)
 80041b6:	4811      	ldr	r0, [pc, #68]	; (80041fc <BSP_AUDIO_IN_DeInit+0xd4>)
 80041b8:	f009 f9f0 	bl	800d59c <HAL_SAI_DeInit>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <BSP_AUDIO_IN_DeInit+0xa2>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80041c2:	f06f 0303 	mvn.w	r3, #3
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e008      	b.n	80041dc <BSP_AUDIO_IN_DeInit+0xb4>
      }
      else
      {
        if (HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 80041ca:	480e      	ldr	r0, [pc, #56]	; (8004204 <BSP_AUDIO_IN_DeInit+0xdc>)
 80041cc:	f009 f9e6 	bl	800d59c <HAL_SAI_DeInit>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <BSP_AUDIO_IN_DeInit+0xb4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80041d6:	f06f 0303 	mvn.w	r3, #3
 80041da:	60fb      	str	r3, [r7, #12]
      }
    }
    else
    {}
    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RESET;
 80041dc:	490e      	ldr	r1, [pc, #56]	; (8004218 <BSP_AUDIO_IN_DeInit+0xf0>)
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	4413      	add	r3, r2
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	440b      	add	r3, r1
 80041ea:	3324      	adds	r3, #36	; 0x24
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 80041f0:	68fb      	ldr	r3, [r7, #12]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	24000344 	.word	0x24000344
 8004200:	40015c24 	.word	0x40015c24
 8004204:	24000288 	.word	0x24000288
 8004208:	40015c04 	.word	0x40015c04
 800420c:	24000280 	.word	0x24000280
 8004210:	24000284 	.word	0x24000284
 8004214:	58005404 	.word	0x58005404
 8004218:	240003dc 	.word	0x240003dc

0800421c <BSP_AUDIO_IN_Stop>:
  * @brief  Stop audio recording.
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used or 1 when PDM is used
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Stop(uint32_t Instance)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d903      	bls.n	8004236 <BSP_AUDIO_IN_Stop+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800422e:	f06f 0301 	mvn.w	r3, #1
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e026      	b.n	8004284 <BSP_AUDIO_IN_Stop+0x68>
  }
  else
  {
      if (Instance == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10d      	bne.n	8004258 <BSP_AUDIO_IN_Stop+0x3c>
      {
        /* Call the Media layer stop function */
        if (Audio_Drv->Stop(Audio_CompObj, CODEC_PDWN_SW) < 0)
 800423c:	4b14      	ldr	r3, [pc, #80]	; (8004290 <BSP_AUDIO_IN_Stop+0x74>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	4a14      	ldr	r2, [pc, #80]	; (8004294 <BSP_AUDIO_IN_Stop+0x78>)
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	2101      	movs	r1, #1
 8004248:	4610      	mov	r0, r2
 800424a:	4798      	blx	r3
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	da02      	bge.n	8004258 <BSP_AUDIO_IN_Stop+0x3c>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004252:	f06f 0304 	mvn.w	r3, #4
 8004256:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d108      	bne.n	8004270 <BSP_AUDIO_IN_Stop+0x54>
      {
        if (HAL_SAI_DMAStop(&haudio_in_sai) != HAL_OK)
 800425e:	480e      	ldr	r0, [pc, #56]	; (8004298 <BSP_AUDIO_IN_Stop+0x7c>)
 8004260:	f009 fa0c 	bl	800d67c <HAL_SAI_DMAStop>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <BSP_AUDIO_IN_Stop+0x54>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800426a:	f06f 0303 	mvn.w	r3, #3
 800426e:	60fb      	str	r3, [r7, #12]
        }
      }


    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 8004270:	490a      	ldr	r1, [pc, #40]	; (800429c <BSP_AUDIO_IN_Stop+0x80>)
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4413      	add	r3, r2
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	440b      	add	r3, r1
 800427e:	3324      	adds	r3, #36	; 0x24
 8004280:	2202      	movs	r2, #2
 8004282:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 8004284:	68fb      	ldr	r3, [r7, #12]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	24000280 	.word	0x24000280
 8004294:	24000284 	.word	0x24000284
 8004298:	24000344 	.word	0x24000344
 800429c:	240003dc 	.word	0x240003dc

080042a0 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b30      	cmp	r3, #48	; 0x30
 80042ae:	d002      	beq.n	80042b6 <BSP_AUDIO_IN_IRQHandler+0x16>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d105      	bne.n	80042c2 <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <BSP_AUDIO_IN_IRQHandler+0x2c>)
 80042b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042bc:	4618      	mov	r0, r3
 80042be:	f003 f87b 	bl	80073b8 <HAL_DMA_IRQHandler>
  }

}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	24000344 	.word	0x24000344

080042d0 <SAI_MspDeInit>:
    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
  }
}
static void SAI_MspDeInit(SAI_HandleTypeDef *hsai){
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef  gpio_init_structure;

    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80042d8:	2039      	movs	r0, #57	; 0x39
 80042da:	f002 f938 	bl	800654e <HAL_NVIC_DisableIRQ>

    if(hsai->Instance == AUDIO_OUT_SAIx)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a15      	ldr	r2, [pc, #84]	; (8004338 <SAI_MspDeInit+0x68>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d105      	bne.n	80042f4 <SAI_MspDeInit+0x24>
    {
      /* Deinitialize the DMA stream */
      HAL_DMA_DeInit(hsai->hdmatx);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ee:	4618      	mov	r0, r3
 80042f0:	f002 f948 	bl	8006584 <HAL_DMA_DeInit>
    }

    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(hsai);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004302:	601a      	str	r2, [r3, #0]

    /* Deactivates CODEC_SAI pins FS, SCK, MCK and SD by putting them in input mode */
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 8004304:	23e0      	movs	r3, #224	; 0xe0
 8004306:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(GPIOI, gpio_init_structure.Pin);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4619      	mov	r1, r3
 800430c:	480b      	ldr	r0, [pc, #44]	; (800433c <SAI_MspDeInit+0x6c>)
 800430e:	f004 fe27 	bl	8008f60 <HAL_GPIO_DeInit>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8004312:	2310      	movs	r3, #16
 8004314:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, gpio_init_structure.Pin);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4619      	mov	r1, r3
 800431a:	4808      	ldr	r0, [pc, #32]	; (800433c <SAI_MspDeInit+0x6c>)
 800431c:	f004 fe20 	bl	8008f60 <HAL_GPIO_DeInit>

    /* Disable SAI clock */
    AUDIO_OUT_SAIx_CLK_DISABLE();
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <SAI_MspDeInit+0x70>)
 8004322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004326:	4a06      	ldr	r2, [pc, #24]	; (8004340 <SAI_MspDeInit+0x70>)
 8004328:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800432c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* GPIO pins clock and DMA clock can be shut down in the applic
       by surcharging this __weak function */
}
 8004330:	bf00      	nop
 8004332:	3720      	adds	r7, #32
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40015c04 	.word	0x40015c04
 800433c:	58022000 	.word	0x58022000
 8004340:	58024400 	.word	0x58024400

08004344 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800434e:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <BSP_I2C4_Init+0x64>)
 8004350:	4a16      	ldr	r2, [pc, #88]	; (80043ac <BSP_I2C4_Init+0x68>)
 8004352:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8004354:	4b16      	ldr	r3, [pc, #88]	; (80043b0 <BSP_I2C4_Init+0x6c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d11f      	bne.n	800439c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800435c:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <BSP_I2C4_Init+0x6c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3301      	adds	r3, #1
 8004362:	4a13      	ldr	r2, [pc, #76]	; (80043b0 <BSP_I2C4_Init+0x6c>)
 8004364:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8004366:	4810      	ldr	r0, [pc, #64]	; (80043a8 <BSP_I2C4_Init+0x64>)
 8004368:	f005 fa20 	bl	80097ac <HAL_I2C_GetState>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d114      	bne.n	800439c <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8004372:	480d      	ldr	r0, [pc, #52]	; (80043a8 <BSP_I2C4_Init+0x64>)
 8004374:	f000 fb60 	bl	8004a38 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8004378:	f007 face 	bl	800b918 <HAL_RCC_GetPCLK2Freq>
 800437c:	4603      	mov	r3, r0
 800437e:	490d      	ldr	r1, [pc, #52]	; (80043b4 <BSP_I2C4_Init+0x70>)
 8004380:	4618      	mov	r0, r3
 8004382:	f000 f8e3 	bl	800454c <I2C_GetTiming>
 8004386:	4603      	mov	r3, r0
 8004388:	4619      	mov	r1, r3
 800438a:	4807      	ldr	r0, [pc, #28]	; (80043a8 <BSP_I2C4_Init+0x64>)
 800438c:	f000 f838 	bl	8004400 <MX_I2C4_Init>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004396:	f06f 0307 	mvn.w	r3, #7
 800439a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800439c:	687b      	ldr	r3, [r7, #4]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	24000e44 	.word	0x24000e44
 80043ac:	58001c00 	.word	0x58001c00
 80043b0:	2400043c 	.word	0x2400043c
 80043b4:	000186a0 	.word	0x000186a0

080043b8 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80043be:	2300      	movs	r3, #0
 80043c0:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80043c2:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <BSP_I2C4_DeInit+0x40>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	4a0b      	ldr	r2, [pc, #44]	; (80043f8 <BSP_I2C4_DeInit+0x40>)
 80043ca:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <BSP_I2C4_DeInit+0x40>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80043d4:	4809      	ldr	r0, [pc, #36]	; (80043fc <BSP_I2C4_DeInit+0x44>)
 80043d6:	f000 fb9b 	bl	8004b10 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80043da:	4808      	ldr	r0, [pc, #32]	; (80043fc <BSP_I2C4_DeInit+0x44>)
 80043dc:	f004 ff74 	bl	80092c8 <HAL_I2C_DeInit>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80043e6:	f06f 0307 	mvn.w	r3, #7
 80043ea:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80043ec:	687b      	ldr	r3, [r7, #4]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2400043c 	.word	0x2400043c
 80043fc:	24000e44 	.word	0x24000e44

08004400 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f004 feb2 	bl	80091a8 <HAL_I2C_Init>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
 800444e:	e014      	b.n	800447a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8004450:	2300      	movs	r3, #0
 8004452:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f005 fc7a 	bl	8009d50 <HAL_I2CEx_ConfigAnalogFilter>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
 8004466:	e008      	b.n	800447a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8004468:	2100      	movs	r1, #0
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f005 fcbb 	bl	8009de6 <HAL_I2CEx_ConfigDigitalFilter>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800447a:	7bfb      	ldrb	r3, [r7, #15]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af02      	add	r7, sp, #8
 800448a:	60ba      	str	r2, [r7, #8]
 800448c:	461a      	mov	r2, r3
 800448e:	4603      	mov	r3, r0
 8004490:	81fb      	strh	r3, [r7, #14]
 8004492:	460b      	mov	r3, r1
 8004494:	81bb      	strh	r3, [r7, #12]
 8004496:	4613      	mov	r3, r2
 8004498:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800449a:	89b9      	ldrh	r1, [r7, #12]
 800449c:	89f8      	ldrh	r0, [r7, #14]
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f000 fb57 	bl	8004b58 <I2C4_WriteReg>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	e00c      	b.n	80044d0 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80044b6:	4809      	ldr	r0, [pc, #36]	; (80044dc <BSP_I2C4_WriteReg+0x58>)
 80044b8:	f005 f986 	bl	80097c8 <HAL_I2C_GetError>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d103      	bne.n	80044ca <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80044c2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e002      	b.n	80044d0 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80044ca:	f06f 0303 	mvn.w	r3, #3
 80044ce:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80044d0:	697b      	ldr	r3, [r7, #20]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	24000e44 	.word	0x24000e44

080044e0 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60ba      	str	r2, [r7, #8]
 80044e8:	461a      	mov	r2, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	81fb      	strh	r3, [r7, #14]
 80044ee:	460b      	mov	r3, r1
 80044f0:	81bb      	strh	r3, [r7, #12]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80044f6:	89b9      	ldrh	r1, [r7, #12]
 80044f8:	89f8      	ldrh	r0, [r7, #14]
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2201      	movs	r2, #1
 8004502:	f000 fb4f 	bl	8004ba4 <I2C4_ReadReg>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d102      	bne.n	8004512 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	e00c      	b.n	800452c <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8004512:	4809      	ldr	r0, [pc, #36]	; (8004538 <BSP_I2C4_ReadReg+0x58>)
 8004514:	f005 f958 	bl	80097c8 <HAL_I2C_GetError>
 8004518:	4603      	mov	r3, r0
 800451a:	2b04      	cmp	r3, #4
 800451c:	d103      	bne.n	8004526 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800451e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e002      	b.n	800452c <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004526:	f06f 0303 	mvn.w	r3, #3
 800452a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800452c:	697b      	ldr	r3, [r7, #20]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	24000e44 	.word	0x24000e44

0800453c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8004540:	f001 fe92 	bl	8006268 <HAL_GetTick>
 8004544:	4603      	mov	r3, r0
}
 8004546:	4618      	mov	r0, r3
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d06b      	beq.n	8004638 <I2C_GetTiming+0xec>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d068      	beq.n	8004638 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	e060      	b.n	800462e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800456c:	4a35      	ldr	r2, [pc, #212]	; (8004644 <I2C_GetTiming+0xf8>)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	212c      	movs	r1, #44	; 0x2c
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	3304      	adds	r3, #4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d352      	bcc.n	8004628 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8004582:	4a30      	ldr	r2, [pc, #192]	; (8004644 <I2C_GetTiming+0xf8>)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	212c      	movs	r1, #44	; 0x2c
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	4413      	add	r3, r2
 800458e:	3308      	adds	r3, #8
 8004590:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d847      	bhi.n	8004628 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8004598:	6939      	ldr	r1, [r7, #16]
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f856 	bl	800464c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80045a0:	6939      	ldr	r1, [r7, #16]
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f940 	bl	8004828 <I2C_Compute_SCLL_SCLH>
 80045a8:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b7f      	cmp	r3, #127	; 0x7f
 80045ae:	d842      	bhi.n	8004636 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80045b0:	4925      	ldr	r1, [pc, #148]	; (8004648 <I2C_GetTiming+0xfc>)
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80045c2:	4821      	ldr	r0, [pc, #132]	; (8004648 <I2C_GetTiming+0xfc>)
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4403      	add	r3, r0
 80045d0:	3304      	adds	r3, #4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	051b      	lsls	r3, r3, #20
 80045d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80045da:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80045dc:	481a      	ldr	r0, [pc, #104]	; (8004648 <I2C_GetTiming+0xfc>)
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4403      	add	r3, r0
 80045ea:	3308      	adds	r3, #8
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	041b      	lsls	r3, r3, #16
 80045f0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80045f4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80045f6:	4814      	ldr	r0, [pc, #80]	; (8004648 <I2C_GetTiming+0xfc>)
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4403      	add	r3, r0
 8004604:	330c      	adds	r3, #12
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	021b      	lsls	r3, r3, #8
 800460a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800460c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800460e:	480e      	ldr	r0, [pc, #56]	; (8004648 <I2C_GetTiming+0xfc>)
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4403      	add	r3, r0
 800461c:	3310      	adds	r3, #16
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004622:	430b      	orrs	r3, r1
 8004624:	617b      	str	r3, [r7, #20]
        }
        break;
 8004626:	e006      	b.n	8004636 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	3301      	adds	r3, #1
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d99b      	bls.n	800456c <I2C_GetTiming+0x20>
 8004634:	e000      	b.n	8004638 <I2C_GetTiming+0xec>
        break;
 8004636:	bf00      	nop
      }
    }
  }

  return ret;
 8004638:	697b      	ldr	r3, [r7, #20]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	080109ec 	.word	0x080109ec
 8004648:	24000440 	.word	0x24000440

0800464c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800464c:	b480      	push	{r7}
 800464e:	b08f      	sub	sp, #60	; 0x3c
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8004656:	2310      	movs	r3, #16
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	085a      	lsrs	r2, r3, #1
 800465e:	4b6e      	ldr	r3, [pc, #440]	; (8004818 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8004660:	4413      	add	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	fbb3 f3f2 	udiv	r3, r3, r2
 8004668:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800466a:	2332      	movs	r3, #50	; 0x32
 800466c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800466e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004672:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004674:	4a69      	ldr	r2, [pc, #420]	; (800481c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	212c      	movs	r1, #44	; 0x2c
 800467a:	fb01 f303 	mul.w	r3, r1, r3
 800467e:	4413      	add	r3, r2
 8004680:	3324      	adds	r3, #36	; 0x24
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	4a65      	ldr	r2, [pc, #404]	; (800481c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	212c      	movs	r1, #44	; 0x2c
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	4413      	add	r3, r2
 8004692:	330c      	adds	r3, #12
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004698:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800469a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800469c:	495f      	ldr	r1, [pc, #380]	; (800481c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	202c      	movs	r0, #44	; 0x2c
 80046a2:	fb00 f303 	mul.w	r3, r0, r3
 80046a6:	440b      	add	r3, r1
 80046a8:	3328      	adds	r3, #40	; 0x28
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3303      	adds	r3, #3
 80046ae:	69f9      	ldr	r1, [r7, #28]
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80046b8:	4a58      	ldr	r2, [pc, #352]	; (800481c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	212c      	movs	r1, #44	; 0x2c
 80046be:	fb01 f303 	mul.w	r3, r1, r3
 80046c2:	4413      	add	r3, r2
 80046c4:	3310      	adds	r3, #16
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	4a54      	ldr	r2, [pc, #336]	; (800481c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	212c      	movs	r1, #44	; 0x2c
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	3320      	adds	r3, #32
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80046dc:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80046de:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80046e0:	494e      	ldr	r1, [pc, #312]	; (800481c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	202c      	movs	r0, #44	; 0x2c
 80046e6:	fb00 f303 	mul.w	r3, r0, r3
 80046ea:	440b      	add	r3, r1
 80046ec:	3328      	adds	r3, #40	; 0x28
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3304      	adds	r3, #4
 80046f2:	69f9      	ldr	r1, [r7, #28]
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80046fc:	4a47      	ldr	r2, [pc, #284]	; (800481c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	212c      	movs	r1, #44	; 0x2c
 8004702:	fb01 f303 	mul.w	r3, r1, r3
 8004706:	4413      	add	r3, r2
 8004708:	3320      	adds	r3, #32
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	4a43      	ldr	r2, [pc, #268]	; (800481c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	212c      	movs	r1, #44	; 0x2c
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	4413      	add	r3, r2
 800471a:	3314      	adds	r3, #20
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4403      	add	r3, r0
 8004720:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	2b00      	cmp	r3, #0
 8004726:	dc01      	bgt.n	800472c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472e:	2b00      	cmp	r3, #0
 8004730:	dc01      	bgt.n	8004736 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004736:	2300      	movs	r3, #0
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
 800473a:	e062      	b.n	8004802 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800473c:	2300      	movs	r3, #0
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
 8004740:	e059      	b.n	80047f6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	3301      	adds	r3, #1
 8004746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004748:	3201      	adds	r2, #1
 800474a:	fb03 f202 	mul.w	r2, r3, r2
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fb02 f303 	mul.w	r3, r2, r3
 8004754:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	429a      	cmp	r2, r3
 800475c:	d348      	bcc.n	80047f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800475e:	2300      	movs	r3, #0
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	e042      	b.n	80047ea <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8004764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004766:	3301      	adds	r3, #1
 8004768:	6a3a      	ldr	r2, [r7, #32]
 800476a:	fb03 f202 	mul.w	r2, r3, r2
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	fb02 f303 	mul.w	r3, r2, r3
 8004774:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	429a      	cmp	r2, r3
 800477c:	d332      	bcc.n	80047e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	429a      	cmp	r2, r3
 8004784:	d82e      	bhi.n	80047e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8004786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478a:	429a      	cmp	r2, r3
 800478c:	d02a      	beq.n	80047e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800478e:	4b24      	ldr	r3, [pc, #144]	; (8004820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4924      	ldr	r1, [pc, #144]	; (8004824 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047a0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80047a2:	4b1f      	ldr	r3, [pc, #124]	; (8004820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	491f      	ldr	r1, [pc, #124]	; (8004824 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	3304      	adds	r3, #4
 80047b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b6:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80047b8:	4b19      	ldr	r3, [pc, #100]	; (8004820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4919      	ldr	r1, [pc, #100]	; (8004824 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	3308      	adds	r3, #8
 80047ca:	6a3a      	ldr	r2, [r7, #32]
 80047cc:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80047d2:	4b13      	ldr	r3, [pc, #76]	; (8004820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	4a11      	ldr	r2, [pc, #68]	; (8004820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80047da:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80047dc:	4b10      	ldr	r3, [pc, #64]	; (8004820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b7f      	cmp	r3, #127	; 0x7f
 80047e2:	d812      	bhi.n	800480a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	3301      	adds	r3, #1
 80047e8:	623b      	str	r3, [r7, #32]
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	2b0f      	cmp	r3, #15
 80047ee:	d9b9      	bls.n	8004764 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	3301      	adds	r3, #1
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	2b0f      	cmp	r3, #15
 80047fa:	d9a2      	bls.n	8004742 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	3301      	adds	r3, #1
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	2b0f      	cmp	r3, #15
 8004806:	d999      	bls.n	800473c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8004808:	e000      	b.n	800480c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800480a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800480c:	373c      	adds	r7, #60	; 0x3c
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	3b9aca00 	.word	0x3b9aca00
 800481c:	080109ec 	.word	0x080109ec
 8004820:	24000e40 	.word	0x24000e40
 8004824:	24000440 	.word	0x24000440

08004828 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8004828:	b480      	push	{r7}
 800482a:	b093      	sub	sp, #76	; 0x4c
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8004832:	f04f 33ff 	mov.w	r3, #4294967295
 8004836:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	085a      	lsrs	r2, r3, #1
 800483c:	4b7a      	ldr	r3, [pc, #488]	; (8004a28 <I2C_Compute_SCLL_SCLH+0x200>)
 800483e:	4413      	add	r3, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	fbb3 f3f2 	udiv	r3, r3, r2
 8004846:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8004848:	4a78      	ldr	r2, [pc, #480]	; (8004a2c <I2C_Compute_SCLL_SCLH+0x204>)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	212c      	movs	r1, #44	; 0x2c
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	4413      	add	r3, r2
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	085a      	lsrs	r2, r3, #1
 8004858:	4b73      	ldr	r3, [pc, #460]	; (8004a28 <I2C_Compute_SCLL_SCLH+0x200>)
 800485a:	4413      	add	r3, r2
 800485c:	4973      	ldr	r1, [pc, #460]	; (8004a2c <I2C_Compute_SCLL_SCLH+0x204>)
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	202c      	movs	r0, #44	; 0x2c
 8004862:	fb00 f202 	mul.w	r2, r0, r2
 8004866:	440a      	add	r2, r1
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	fbb3 f3f2 	udiv	r3, r3, r2
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8004870:	2332      	movs	r3, #50	; 0x32
 8004872:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8004874:	4a6d      	ldr	r2, [pc, #436]	; (8004a2c <I2C_Compute_SCLL_SCLH+0x204>)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	212c      	movs	r1, #44	; 0x2c
 800487a:	fb01 f303 	mul.w	r3, r1, r3
 800487e:	4413      	add	r3, r2
 8004880:	3328      	adds	r3, #40	; 0x28
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004886:	fb02 f303 	mul.w	r3, r2, r3
 800488a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800488c:	4a67      	ldr	r2, [pc, #412]	; (8004a2c <I2C_Compute_SCLL_SCLH+0x204>)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	212c      	movs	r1, #44	; 0x2c
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	4413      	add	r3, r2
 8004898:	3304      	adds	r3, #4
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a62      	ldr	r2, [pc, #392]	; (8004a28 <I2C_Compute_SCLL_SCLH+0x200>)
 800489e:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a2:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80048a4:	4a61      	ldr	r2, [pc, #388]	; (8004a2c <I2C_Compute_SCLL_SCLH+0x204>)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	212c      	movs	r1, #44	; 0x2c
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	3308      	adds	r3, #8
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a5c      	ldr	r2, [pc, #368]	; (8004a28 <I2C_Compute_SCLL_SCLH+0x200>)
 80048b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ba:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80048c0:	2300      	movs	r3, #0
 80048c2:	637b      	str	r3, [r7, #52]	; 0x34
 80048c4:	e0a3      	b.n	8004a0e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80048c6:	495a      	ldr	r1, [pc, #360]	; (8004a30 <I2C_Compute_SCLL_SCLH+0x208>)
 80048c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048da:	fb02 f303 	mul.w	r3, r2, r3
 80048de:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80048e0:	2300      	movs	r3, #0
 80048e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e4:	e08c      	b.n	8004a00 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80048e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	441a      	add	r2, r3
 80048ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ee:	3301      	adds	r3, #1
 80048f0:	6979      	ldr	r1, [r7, #20]
 80048f2:	fb03 f101 	mul.w	r1, r3, r1
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	440b      	add	r3, r1
 80048fc:	4413      	add	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004900:	4a4a      	ldr	r2, [pc, #296]	; (8004a2c <I2C_Compute_SCLL_SCLH+0x204>)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	212c      	movs	r1, #44	; 0x2c
 8004906:	fb01 f303 	mul.w	r3, r1, r3
 800490a:	4413      	add	r3, r2
 800490c:	3318      	adds	r3, #24
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	429a      	cmp	r2, r3
 8004914:	d971      	bls.n	80049fa <I2C_Compute_SCLL_SCLH+0x1d2>
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	1ad2      	subs	r2, r2, r3
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	089b      	lsrs	r3, r3, #2
 8004922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004924:	429a      	cmp	r2, r3
 8004926:	d268      	bcs.n	80049fa <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8004928:	2300      	movs	r3, #0
 800492a:	63bb      	str	r3, [r7, #56]	; 0x38
 800492c:	e062      	b.n	80049f4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800492e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	441a      	add	r2, r3
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	3301      	adds	r3, #1
 8004938:	6979      	ldr	r1, [r7, #20]
 800493a:	fb03 f101 	mul.w	r1, r3, r1
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	440b      	add	r3, r1
 8004944:	4413      	add	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	441a      	add	r2, r3
 800494e:	4937      	ldr	r1, [pc, #220]	; (8004a2c <I2C_Compute_SCLL_SCLH+0x204>)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	202c      	movs	r0, #44	; 0x2c
 8004954:	fb00 f303 	mul.w	r3, r0, r3
 8004958:	440b      	add	r3, r1
 800495a:	3320      	adds	r3, #32
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	441a      	add	r2, r3
 8004960:	4932      	ldr	r1, [pc, #200]	; (8004a2c <I2C_Compute_SCLL_SCLH+0x204>)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	202c      	movs	r0, #44	; 0x2c
 8004966:	fb00 f303 	mul.w	r3, r0, r3
 800496a:	440b      	add	r3, r1
 800496c:	3324      	adds	r3, #36	; 0x24
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4413      	add	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	429a      	cmp	r2, r3
 800497a:	d338      	bcc.n	80049ee <I2C_Compute_SCLL_SCLH+0x1c6>
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	429a      	cmp	r2, r3
 8004982:	d834      	bhi.n	80049ee <I2C_Compute_SCLL_SCLH+0x1c6>
 8004984:	4a29      	ldr	r2, [pc, #164]	; (8004a2c <I2C_Compute_SCLL_SCLH+0x204>)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	212c      	movs	r1, #44	; 0x2c
 800498a:	fb01 f303 	mul.w	r3, r1, r3
 800498e:	4413      	add	r3, r2
 8004990:	331c      	adds	r3, #28
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	429a      	cmp	r2, r3
 8004998:	d329      	bcc.n	80049ee <I2C_Compute_SCLL_SCLH+0x1c6>
 800499a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d225      	bcs.n	80049ee <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	da02      	bge.n	80049b6 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	425b      	negs	r3, r3
 80049b4:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d917      	bls.n	80049ee <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80049c2:	491b      	ldr	r1, [pc, #108]	; (8004a30 <I2C_Compute_SCLL_SCLH+0x208>)
 80049c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	3310      	adds	r3, #16
 80049d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049d4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80049d6:	4916      	ldr	r1, [pc, #88]	; (8004a30 <I2C_Compute_SCLL_SCLH+0x208>)
 80049d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	440b      	add	r3, r1
 80049e4:	330c      	adds	r3, #12
 80049e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049e8:	601a      	str	r2, [r3, #0]
              ret = count;
 80049ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ec:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	3301      	adds	r3, #1
 80049f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f6:	2bff      	cmp	r3, #255	; 0xff
 80049f8:	d999      	bls.n	800492e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80049fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fc:	3301      	adds	r3, #1
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a02:	2bff      	cmp	r3, #255	; 0xff
 8004a04:	f67f af6f 	bls.w	80048e6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <I2C_Compute_SCLL_SCLH+0x20c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a14:	429a      	cmp	r2, r3
 8004a16:	f4ff af56 	bcc.w	80048c6 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8004a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	374c      	adds	r7, #76	; 0x4c
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	3b9aca00 	.word	0x3b9aca00
 8004a2c:	080109ec 	.word	0x080109ec
 8004a30:	24000440 	.word	0x24000440
 8004a34:	24000e40 	.word	0x24000e40

08004a38 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8004a40:	4b31      	ldr	r3, [pc, #196]	; (8004b08 <I2C4_MspInit+0xd0>)
 8004a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a46:	4a30      	ldr	r2, [pc, #192]	; (8004b08 <I2C4_MspInit+0xd0>)
 8004a48:	f043 0308 	orr.w	r3, r3, #8
 8004a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a50:	4b2d      	ldr	r3, [pc, #180]	; (8004b08 <I2C4_MspInit+0xd0>)
 8004a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8004a5e:	4b2a      	ldr	r3, [pc, #168]	; (8004b08 <I2C4_MspInit+0xd0>)
 8004a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a64:	4a28      	ldr	r2, [pc, #160]	; (8004b08 <I2C4_MspInit+0xd0>)
 8004a66:	f043 0308 	orr.w	r3, r3, #8
 8004a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a6e:	4b26      	ldr	r3, [pc, #152]	; (8004b08 <I2C4_MspInit+0xd0>)
 8004a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8004a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a80:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8004a82:	2312      	movs	r3, #18
 8004a84:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8004a8e:	2304      	movs	r3, #4
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8004a92:	f107 0314 	add.w	r3, r7, #20
 8004a96:	4619      	mov	r1, r3
 8004a98:	481c      	ldr	r0, [pc, #112]	; (8004b0c <I2C4_MspInit+0xd4>)
 8004a9a:	f004 f8b1 	bl	8008c00 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8004a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aa2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8004aa4:	2312      	movs	r3, #18
 8004aa6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004aac:	2302      	movs	r3, #2
 8004aae:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8004ab4:	f107 0314 	add.w	r3, r7, #20
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4814      	ldr	r0, [pc, #80]	; (8004b0c <I2C4_MspInit+0xd4>)
 8004abc:	f004 f8a0 	bl	8008c00 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8004ac0:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <I2C4_MspInit+0xd0>)
 8004ac2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ac6:	4a10      	ldr	r2, [pc, #64]	; (8004b08 <I2C4_MspInit+0xd0>)
 8004ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004acc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ad0:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <I2C4_MspInit+0xd0>)
 8004ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	60bb      	str	r3, [r7, #8]
 8004adc:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8004ade:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <I2C4_MspInit+0xd0>)
 8004ae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ae4:	4a08      	ldr	r2, [pc, #32]	; (8004b08 <I2C4_MspInit+0xd0>)
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <I2C4_MspInit+0xd0>)
 8004af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004af4:	4a04      	ldr	r2, [pc, #16]	; (8004b08 <I2C4_MspInit+0xd0>)
 8004af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004afa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8004afe:	bf00      	nop
 8004b00:	3728      	adds	r7, #40	; 0x28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	58024400 	.word	0x58024400
 8004b0c:	58020c00 	.word	0x58020c00

08004b10 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8004b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b1c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4619      	mov	r1, r3
 8004b22:	480b      	ldr	r0, [pc, #44]	; (8004b50 <I2C4_MspDeInit+0x40>)
 8004b24:	f004 fa1c 	bl	8008f60 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8004b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b2c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4619      	mov	r1, r3
 8004b32:	4807      	ldr	r0, [pc, #28]	; (8004b50 <I2C4_MspDeInit+0x40>)
 8004b34:	f004 fa14 	bl	8008f60 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <I2C4_MspDeInit+0x44>)
 8004b3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b3e:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <I2C4_MspDeInit+0x44>)
 8004b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 8004b48:	bf00      	nop
 8004b4a:	3720      	adds	r7, #32
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	58020c00 	.word	0x58020c00
 8004b54:	58024400 	.word	0x58024400

08004b58 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af04      	add	r7, sp, #16
 8004b5e:	607b      	str	r3, [r7, #4]
 8004b60:	4603      	mov	r3, r0
 8004b62:	81fb      	strh	r3, [r7, #14]
 8004b64:	460b      	mov	r3, r1
 8004b66:	81bb      	strh	r3, [r7, #12]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8004b6c:	8978      	ldrh	r0, [r7, #10]
 8004b6e:	89ba      	ldrh	r2, [r7, #12]
 8004b70:	89f9      	ldrh	r1, [r7, #14]
 8004b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b76:	9302      	str	r3, [sp, #8]
 8004b78:	8b3b      	ldrh	r3, [r7, #24]
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	4603      	mov	r3, r0
 8004b82:	4807      	ldr	r0, [pc, #28]	; (8004ba0 <I2C4_WriteReg+0x48>)
 8004b84:	f004 fbe4 	bl	8009350 <HAL_I2C_Mem_Write>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e001      	b.n	8004b96 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8004b92:	f06f 0307 	mvn.w	r3, #7
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	24000e44 	.word	0x24000e44

08004ba4 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af04      	add	r7, sp, #16
 8004baa:	607b      	str	r3, [r7, #4]
 8004bac:	4603      	mov	r3, r0
 8004bae:	81fb      	strh	r3, [r7, #14]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	81bb      	strh	r3, [r7, #12]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8004bb8:	8978      	ldrh	r0, [r7, #10]
 8004bba:	89ba      	ldrh	r2, [r7, #12]
 8004bbc:	89f9      	ldrh	r1, [r7, #14]
 8004bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bc2:	9302      	str	r3, [sp, #8]
 8004bc4:	8b3b      	ldrh	r3, [r7, #24]
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	4603      	mov	r3, r0
 8004bce:	4807      	ldr	r0, [pc, #28]	; (8004bec <I2C4_ReadReg+0x48>)
 8004bd0:	f004 fcd2 	bl	8009578 <HAL_I2C_Mem_Read>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e001      	b.n	8004be2 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8004bde:	f06f 0307 	mvn.w	r3, #7
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	24000e44 	.word	0x24000e44

08004bf0 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8004bfa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004c04:	2200      	movs	r2, #0
 8004c06:	6839      	ldr	r1, [r7, #0]
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f805 	bl	8004c18 <BSP_LCD_InitEx>
 8004c0e:	4603      	mov	r3, r0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b09e      	sub	sp, #120	; 0x78
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004c26:	2300      	movs	r3, #0
 8004c28:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d808      	bhi.n	8004c46 <BSP_LCD_InitEx+0x2e>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d105      	bne.n	8004c46 <BSP_LCD_InitEx+0x2e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d006      	beq.n	8004c4e <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004c46:	f06f 0301 	mvn.w	r3, #1
 8004c4a:	677b      	str	r3, [r7, #116]	; 0x74
 8004c4c:	e0a8      	b.n	8004da0 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d109      	bne.n	8004c68 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8004c54:	2302      	movs	r3, #2
 8004c56:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 8004c58:	4a54      	ldr	r2, [pc, #336]	; (8004dac <BSP_LCD_InitEx+0x194>)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	015b      	lsls	r3, r3, #5
 8004c5e:	4413      	add	r3, r2
 8004c60:	3310      	adds	r3, #16
 8004c62:	2202      	movs	r2, #2
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e008      	b.n	8004c7a <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 8004c6c:	4a4f      	ldr	r2, [pc, #316]	; (8004dac <BSP_LCD_InitEx+0x194>)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	015b      	lsls	r3, r3, #5
 8004c72:	4413      	add	r3, r2
 8004c74:	3310      	adds	r3, #16
 8004c76:	2204      	movs	r2, #4
 8004c78:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8004c7a:	4a4c      	ldr	r2, [pc, #304]	; (8004dac <BSP_LCD_InitEx+0x194>)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	015b      	lsls	r3, r3, #5
 8004c80:	4413      	add	r3, r2
 8004c82:	330c      	adds	r3, #12
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8004c88:	4a48      	ldr	r2, [pc, #288]	; (8004dac <BSP_LCD_InitEx+0x194>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	015b      	lsls	r3, r3, #5
 8004c8e:	4413      	add	r3, r2
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8004c94:	4a45      	ldr	r2, [pc, #276]	; (8004dac <BSP_LCD_InitEx+0x194>)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	015b      	lsls	r3, r3, #5
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ca2:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8004ca4:	4b42      	ldr	r3, [pc, #264]	; (8004db0 <BSP_LCD_InitEx+0x198>)
 8004ca6:	4a43      	ldr	r2, [pc, #268]	; (8004db4 <BSP_LCD_InitEx+0x19c>)
 8004ca8:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8004caa:	4b43      	ldr	r3, [pc, #268]	; (8004db8 <BSP_LCD_InitEx+0x1a0>)
 8004cac:	4a43      	ldr	r2, [pc, #268]	; (8004dbc <BSP_LCD_InitEx+0x1a4>)
 8004cae:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8004cb0:	483f      	ldr	r0, [pc, #252]	; (8004db0 <BSP_LCD_InitEx+0x198>)
 8004cb2:	f000 fd1b 	bl	80056ec <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 8004cb6:	4840      	ldr	r0, [pc, #256]	; (8004db8 <BSP_LCD_InitEx+0x1a0>)
 8004cb8:	f000 fde4 	bl	8005884 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 8004cbc:	4b40      	ldr	r3, [pc, #256]	; (8004dc0 <BSP_LCD_InitEx+0x1a8>)
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 8004cc0:	4b40      	ldr	r3, [pc, #256]	; (8004dc4 <BSP_LCD_InitEx+0x1ac>)
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 8004cc4:	2370      	movs	r3, #112	; 0x70
 8004cc6:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8004cc8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004ccc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe fbdc 	bl	8003490 <FT5336_RegisterBusIO>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	da03      	bge.n	8004ce6 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004cde:	f06f 0304 	mvn.w	r3, #4
 8004ce2:	677b      	str	r3, [r7, #116]	; 0x74
 8004ce4:	e02b      	b.n	8004d3e <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 8004ce6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004cea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fe fcc7 	bl	8003684 <FT5336_ReadID>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	da03      	bge.n	8004d04 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004cfc:	f06f 0304 	mvn.w	r3, #4
 8004d00:	677b      	str	r3, [r7, #116]	; 0x74
 8004d02:	e01c      	b.n	8004d3e <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 8004d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d06:	2b51      	cmp	r3, #81	; 0x51
 8004d08:	d003      	beq.n	8004d12 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004d0a:	f06f 0306 	mvn.w	r3, #6
 8004d0e:	677b      	str	r3, [r7, #116]	; 0x74
 8004d10:	e015      	b.n	8004d3e <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8004d12:	4827      	ldr	r0, [pc, #156]	; (8004db0 <BSP_LCD_InitEx+0x198>)
 8004d14:	f000 f8e8 	bl	8004ee8 <MX_LTDC_ClockConfig>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004d1e:	f06f 0303 	mvn.w	r3, #3
 8004d22:	677b      	str	r3, [r7, #116]	; 0x74
 8004d24:	e00b      	b.n	8004d3e <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8004d26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d2a:	6839      	ldr	r1, [r7, #0]
 8004d2c:	4820      	ldr	r0, [pc, #128]	; (8004db0 <BSP_LCD_InitEx+0x198>)
 8004d2e:	f000 f84d 	bl	8004dcc <MX_LTDC_Init>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004d38:	f06f 0303 	mvn.w	r3, #3
 8004d3c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 8004d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d12d      	bne.n	8004da0 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8004d44:	2000      	movs	r0, #0
 8004d46:	f000 fe2f 	bl	80059a8 <BSP_SDRAM_Init>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8004d50:	f06f 0303 	mvn.w	r3, #3
 8004d54:	e025      	b.n	8004da2 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 8004d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d66:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 8004d68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 8004d6c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8004d70:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8004d72:	f107 0314 	add.w	r3, r7, #20
 8004d76:	461a      	mov	r2, r3
 8004d78:	2100      	movs	r1, #0
 8004d7a:	480d      	ldr	r0, [pc, #52]	; (8004db0 <BSP_LCD_InitEx+0x198>)
 8004d7c:	f000 f872 	bl	8004e64 <MX_LTDC_ConfigLayer>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8004d86:	f06f 0303 	mvn.w	r3, #3
 8004d8a:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 8004d8c:	480e      	ldr	r0, [pc, #56]	; (8004dc8 <BSP_LCD_InitEx+0x1b0>)
 8004d8e:	f000 fde1 	bl	8005954 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 8004d92:	4a06      	ldr	r2, [pc, #24]	; (8004dac <BSP_LCD_InitEx+0x194>)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	015b      	lsls	r3, r3, #5
 8004d98:	4413      	add	r3, r2
 8004d9a:	3318      	adds	r3, #24
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 8004da0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3778      	adds	r7, #120	; 0x78
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	24000ff4 	.word	0x24000ff4
 8004db0:	24000f4c 	.word	0x24000f4c
 8004db4:	50001000 	.word	0x50001000
 8004db8:	24000ee4 	.word	0x24000ee4
 8004dbc:	52001000 	.word	0x52001000
 8004dc0:	08004345 	.word	0x08004345
 8004dc4:	080044e1 	.word	0x080044e1
 8004dc8:	24000e98 	.word	0x24000e98

08004dcc <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a21      	ldr	r2, [pc, #132]	; (8004e60 <MX_LTDC_Init+0x94>)
 8004ddc:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2228      	movs	r2, #40	; 0x28
 8004dfa:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	222a      	movs	r2, #42	; 0x2a
 8004e00:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f103 0235 	add.w	r2, r3, #53	; 0x35
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2209      	movs	r2, #9
 8004e1a:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	220b      	movs	r2, #11
 8004e20:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f103 020b 	add.w	r2, r3, #11
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f103 020d 	add.w	r2, r3, #13
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	22ff      	movs	r2, #255	; 0xff
 8004e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	22ff      	movs	r2, #255	; 0xff
 8004e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	22ff      	movs	r2, #255	; 0xff
 8004e4a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f005 f816 	bl	8009e80 <HAL_LTDC_Init>
 8004e54:	4603      	mov	r3, r0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	50001000 	.word	0x50001000

08004e64 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b092      	sub	sp, #72	; 0x48
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 8004e8e:	23ff      	movs	r3, #255	; 0xff
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004e96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004e9a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004e9c:	2307      	movs	r3, #7
 8004e9e:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f005 f8ab 	bl	800a034 <HAL_LTDC_ConfigLayer>
 8004ede:	4603      	mov	r3, r0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3748      	adds	r7, #72	; 0x48
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b0b2      	sub	sp, #200	; 0xc8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8004ef0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8004efc:	2305      	movs	r3, #5
 8004efe:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8004f00:	23a0      	movs	r3, #160	; 0xa0
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8004f04:	2302      	movs	r3, #2
 8004f06:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8004f0c:	2353      	movs	r3, #83	; 0x53
 8004f0e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004f18:	f107 0308 	add.w	r3, r7, #8
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f006 fd11 	bl	800b944 <HAL_RCCEx_PeriphCLKConfig>
 8004f22:	4603      	mov	r3, r0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	37c8      	adds	r7, #200	; 0xc8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004f40:	f06f 0301 	mvn.w	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	e007      	b.n	8004f58 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8004f48:	4a07      	ldr	r2, [pc, #28]	; (8004f68 <BSP_LCD_GetPixelFormat+0x3c>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	015b      	lsls	r3, r3, #5
 8004f4e:	4413      	add	r3, r2
 8004f50:	330c      	adds	r3, #12
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8004f58:	68fb      	ldr	r3, [r7, #12]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	24000ff4 	.word	0x24000ff4

08004f6c <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004f80:	f06f 0301 	mvn.w	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	e006      	b.n	8004f96 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8004f88:	4a06      	ldr	r2, [pc, #24]	; (8004fa4 <BSP_LCD_SetActiveLayer+0x38>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	015b      	lsls	r3, r3, #5
 8004f8e:	4413      	add	r3, r2
 8004f90:	3308      	adds	r3, #8
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8004f96:	68fb      	ldr	r3, [r7, #12]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	24000ff4 	.word	0x24000ff4

08004fa8 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004fbc:	f06f 0301 	mvn.w	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	e006      	b.n	8004fd2 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8004fc4:	4a06      	ldr	r2, [pc, #24]	; (8004fe0 <BSP_LCD_GetXSize+0x38>)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	015b      	lsls	r3, r3, #5
 8004fca:	4413      	add	r3, r2
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	24000ff4 	.word	0x24000ff4

08004fe4 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004ff8:	f06f 0301 	mvn.w	r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	e007      	b.n	8005010 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8005000:	4a07      	ldr	r2, [pc, #28]	; (8005020 <BSP_LCD_GetYSize+0x3c>)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	015b      	lsls	r3, r3, #5
 8005006:	4413      	add	r3, r2
 8005008:	3304      	adds	r3, #4
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8005010:	68fb      	ldr	r3, [r7, #12]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	24000ff4 	.word	0x24000ff4

08005024 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08e      	sub	sp, #56	; 0x38
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	330a      	adds	r3, #10
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	330b      	adds	r3, #11
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	021b      	lsls	r3, r3, #8
 8005046:	441a      	add	r2, r3
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	330c      	adds	r3, #12
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	041b      	lsls	r3, r3, #16
 8005050:	441a      	add	r2, r3
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	330d      	adds	r3, #13
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	061b      	lsls	r3, r3, #24
 800505a:	4413      	add	r3, r2
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	3312      	adds	r3, #18
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	3313      	adds	r3, #19
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	441a      	add	r2, r3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	3314      	adds	r3, #20
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	041b      	lsls	r3, r3, #16
 8005078:	441a      	add	r2, r3
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	3315      	adds	r3, #21
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	061b      	lsls	r3, r3, #24
 8005082:	4413      	add	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	3316      	adds	r3, #22
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	3317      	adds	r3, #23
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	441a      	add	r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	3318      	adds	r3, #24
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	041b      	lsls	r3, r3, #16
 80050a0:	441a      	add	r2, r3
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	3319      	adds	r3, #25
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	061b      	lsls	r3, r3, #24
 80050aa:	4413      	add	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	331c      	adds	r3, #28
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	331d      	adds	r3, #29
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	4413      	add	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80050c2:	4a37      	ldr	r2, [pc, #220]	; (80051a0 <BSP_LCD_DrawBitmap+0x17c>)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	015b      	lsls	r3, r3, #5
 80050c8:	4413      	add	r3, r2
 80050ca:	3308      	adds	r3, #8
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a35      	ldr	r2, [pc, #212]	; (80051a4 <BSP_LCD_DrawBitmap+0x180>)
 80050d0:	2134      	movs	r1, #52	; 0x34
 80050d2:	fb01 f303 	mul.w	r3, r1, r3
 80050d6:	4413      	add	r3, r2
 80050d8:	335c      	adds	r3, #92	; 0x5c
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	4930      	ldr	r1, [pc, #192]	; (80051a0 <BSP_LCD_DrawBitmap+0x17c>)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	015b      	lsls	r3, r3, #5
 80050e2:	440b      	add	r3, r1
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	fb03 f101 	mul.w	r1, r3, r1
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	440b      	add	r3, r1
 80050f0:	482b      	ldr	r0, [pc, #172]	; (80051a0 <BSP_LCD_DrawBitmap+0x17c>)
 80050f2:	68f9      	ldr	r1, [r7, #12]
 80050f4:	0149      	lsls	r1, r1, #5
 80050f6:	4401      	add	r1, r0
 80050f8:	3110      	adds	r1, #16
 80050fa:	6809      	ldr	r1, [r1, #0]
 80050fc:	fb01 f303 	mul.w	r3, r1, r3
 8005100:	4413      	add	r3, r2
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	3b20      	subs	r3, #32
 8005108:	2b07      	cmp	r3, #7
 800510a:	d802      	bhi.n	8005112 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800510c:	2300      	movs	r3, #0
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
 8005110:	e008      	b.n	8005124 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	3b10      	subs	r3, #16
 8005116:	2b07      	cmp	r3, #7
 8005118:	d802      	bhi.n	8005120 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 800511a:	2302      	movs	r3, #2
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
 800511e:	e001      	b.n	8005124 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8005120:	2301      	movs	r3, #1
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	3b01      	subs	r3, #1
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	08d2      	lsrs	r2, r2, #3
 8005132:	fb03 f202 	mul.w	r2, r3, r2
 8005136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005138:	4413      	add	r3, r2
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	4413      	add	r3, r2
 800513e:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8005140:	2300      	movs	r3, #0
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005144:	e023      	b.n	800518e <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8005146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	6a39      	ldr	r1, [r7, #32]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 fa77 	bl	8005644 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8005156:	4a12      	ldr	r2, [pc, #72]	; (80051a0 <BSP_LCD_DrawBitmap+0x17c>)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	015b      	lsls	r3, r3, #5
 800515c:	4413      	add	r3, r2
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	490f      	ldr	r1, [pc, #60]	; (80051a0 <BSP_LCD_DrawBitmap+0x17c>)
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	0152      	lsls	r2, r2, #5
 8005166:	440a      	add	r2, r1
 8005168:	3210      	adds	r2, #16
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	fb02 f303 	mul.w	r3, r2, r3
 8005170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005172:	4413      	add	r3, r2
 8005174:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	08db      	lsrs	r3, r3, #3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	fb02 f303 	mul.w	r3, r2, r3
 8005180:	425b      	negs	r3, r3
 8005182:	6a3a      	ldr	r2, [r7, #32]
 8005184:	4413      	add	r3, r2
 8005186:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8005188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518a:	3301      	adds	r3, #1
 800518c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800518e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	429a      	cmp	r2, r3
 8005194:	d3d7      	bcc.n	8005146 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 8005196:	69fb      	ldr	r3, [r7, #28]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3730      	adds	r7, #48	; 0x30
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	24000ff4 	.word	0x24000ff4
 80051a4:	24000f4c 	.word	0x24000f4c

080051a8 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 80051ba:	2300      	movs	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	e032      	b.n	8005226 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e028      	b.n	8005218 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	3301      	adds	r3, #1
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	431a      	orrs	r2, r3
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	3302      	adds	r3, #2
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	041b      	lsls	r3, r3, #16
 80051de:	431a      	orrs	r2, r3
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	3303      	adds	r3, #3
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	061b      	lsls	r3, r3, #24
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	18d1      	adds	r1, r2, r3
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	441a      	add	r2, r3
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 f95e 	bl	80054bc <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8005200:	4a0d      	ldr	r2, [pc, #52]	; (8005238 <BSP_LCD_FillRGBRect+0x90>)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	015b      	lsls	r3, r3, #5
 8005206:	4413      	add	r3, r2
 8005208:	3310      	adds	r3, #16
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4413      	add	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	3301      	adds	r3, #1
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	429a      	cmp	r2, r3
 800521e:	d3d2      	bcc.n	80051c6 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	3301      	adds	r3, #1
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522a:	429a      	cmp	r2, r3
 800522c:	d3c8      	bcc.n	80051c0 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3720      	adds	r7, #32
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	24000ff4 	.word	0x24000ff4

0800523c <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800524a:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <BSP_LCD_DrawHLine+0x94>)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	015b      	lsls	r3, r3, #5
 8005250:	4413      	add	r3, r2
 8005252:	3308      	adds	r3, #8
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <BSP_LCD_DrawHLine+0x98>)
 8005258:	2134      	movs	r1, #52	; 0x34
 800525a:	fb01 f303 	mul.w	r3, r1, r3
 800525e:	4413      	add	r3, r2
 8005260:	335c      	adds	r3, #92	; 0x5c
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	491a      	ldr	r1, [pc, #104]	; (80052d0 <BSP_LCD_DrawHLine+0x94>)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	015b      	lsls	r3, r3, #5
 800526a:	440b      	add	r3, r1
 800526c:	3310      	adds	r3, #16
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4817      	ldr	r0, [pc, #92]	; (80052d0 <BSP_LCD_DrawHLine+0x94>)
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	0149      	lsls	r1, r1, #5
 8005276:	4401      	add	r1, r0
 8005278:	6809      	ldr	r1, [r1, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	fb01 f000 	mul.w	r0, r1, r0
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	4401      	add	r1, r0
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	4413      	add	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	441a      	add	r2, r3
 8005292:	490f      	ldr	r1, [pc, #60]	; (80052d0 <BSP_LCD_DrawHLine+0x94>)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	015b      	lsls	r3, r3, #5
 8005298:	440b      	add	r3, r1
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d907      	bls.n	80052b0 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 80052a0:	4a0b      	ldr	r2, [pc, #44]	; (80052d0 <BSP_LCD_DrawHLine+0x94>)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	015b      	lsls	r3, r3, #5
 80052a6:	4413      	add	r3, r2
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80052b0:	6979      	ldr	r1, [r7, #20]
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	9301      	str	r3, [sp, #4]
 80052b6:	2300      	movs	r3, #0
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	2301      	movs	r3, #1
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f956 	bl	8005570 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	24000ff4 	.word	0x24000ff4
 80052d4:	24000f4c 	.word	0x24000f4c

080052d8 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80052e6:	4a24      	ldr	r2, [pc, #144]	; (8005378 <BSP_LCD_DrawVLine+0xa0>)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	015b      	lsls	r3, r3, #5
 80052ec:	4413      	add	r3, r2
 80052ee:	3308      	adds	r3, #8
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a22      	ldr	r2, [pc, #136]	; (800537c <BSP_LCD_DrawVLine+0xa4>)
 80052f4:	2134      	movs	r1, #52	; 0x34
 80052f6:	fb01 f303 	mul.w	r3, r1, r3
 80052fa:	4413      	add	r3, r2
 80052fc:	335c      	adds	r3, #92	; 0x5c
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	491d      	ldr	r1, [pc, #116]	; (8005378 <BSP_LCD_DrawVLine+0xa0>)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	015b      	lsls	r3, r3, #5
 8005306:	440b      	add	r3, r1
 8005308:	3310      	adds	r3, #16
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	481a      	ldr	r0, [pc, #104]	; (8005378 <BSP_LCD_DrawVLine+0xa0>)
 800530e:	68f9      	ldr	r1, [r7, #12]
 8005310:	0149      	lsls	r1, r1, #5
 8005312:	4401      	add	r1, r0
 8005314:	6809      	ldr	r1, [r1, #0]
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	fb01 f000 	mul.w	r0, r1, r0
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	4401      	add	r1, r0
 8005320:	fb01 f303 	mul.w	r3, r1, r3
 8005324:	4413      	add	r3, r2
 8005326:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	441a      	add	r2, r3
 800532e:	4912      	ldr	r1, [pc, #72]	; (8005378 <BSP_LCD_DrawVLine+0xa0>)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	015b      	lsls	r3, r3, #5
 8005334:	440b      	add	r3, r1
 8005336:	3304      	adds	r3, #4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d908      	bls.n	8005350 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800533e:	4a0e      	ldr	r2, [pc, #56]	; (8005378 <BSP_LCD_DrawVLine+0xa0>)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	015b      	lsls	r3, r3, #5
 8005344:	4413      	add	r3, r2
 8005346:	3304      	adds	r3, #4
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8005350:	6979      	ldr	r1, [r7, #20]
 8005352:	4a09      	ldr	r2, [pc, #36]	; (8005378 <BSP_LCD_DrawVLine+0xa0>)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	015b      	lsls	r3, r3, #5
 8005358:	4413      	add	r3, r2
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3b01      	subs	r3, #1
 800535e:	6a3a      	ldr	r2, [r7, #32]
 8005360:	9201      	str	r2, [sp, #4]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2201      	movs	r2, #1
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f901 	bl	8005570 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	24000ff4 	.word	0x24000ff4
 800537c:	24000f4c 	.word	0x24000f4c

08005380 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af02      	add	r7, sp, #8
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800538e:	4a1b      	ldr	r2, [pc, #108]	; (80053fc <BSP_LCD_FillRect+0x7c>)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	015b      	lsls	r3, r3, #5
 8005394:	4413      	add	r3, r2
 8005396:	3308      	adds	r3, #8
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a19      	ldr	r2, [pc, #100]	; (8005400 <BSP_LCD_FillRect+0x80>)
 800539c:	2134      	movs	r1, #52	; 0x34
 800539e:	fb01 f303 	mul.w	r3, r1, r3
 80053a2:	4413      	add	r3, r2
 80053a4:	335c      	adds	r3, #92	; 0x5c
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4914      	ldr	r1, [pc, #80]	; (80053fc <BSP_LCD_FillRect+0x7c>)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	015b      	lsls	r3, r3, #5
 80053ae:	440b      	add	r3, r1
 80053b0:	3310      	adds	r3, #16
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4811      	ldr	r0, [pc, #68]	; (80053fc <BSP_LCD_FillRect+0x7c>)
 80053b6:	68f9      	ldr	r1, [r7, #12]
 80053b8:	0149      	lsls	r1, r1, #5
 80053ba:	4401      	add	r1, r0
 80053bc:	6809      	ldr	r1, [r1, #0]
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	fb01 f000 	mul.w	r0, r1, r0
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	4401      	add	r1, r0
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	4413      	add	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80053d0:	6979      	ldr	r1, [r7, #20]
 80053d2:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <BSP_LCD_FillRect+0x7c>)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	015b      	lsls	r3, r3, #5
 80053d8:	4413      	add	r3, r2
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e2:	9201      	str	r2, [sp, #4]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f8c0 	bl	8005570 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	24000ff4 	.word	0x24000ff4
 8005400:	24000f4c 	.word	0x24000f4c

08005404 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005412:	4a28      	ldr	r2, [pc, #160]	; (80054b4 <BSP_LCD_ReadPixel+0xb0>)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	015b      	lsls	r3, r3, #5
 8005418:	4413      	add	r3, r2
 800541a:	3308      	adds	r3, #8
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a26      	ldr	r2, [pc, #152]	; (80054b8 <BSP_LCD_ReadPixel+0xb4>)
 8005420:	2134      	movs	r1, #52	; 0x34
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	3348      	adds	r3, #72	; 0x48
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d11c      	bne.n	800546a <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8005430:	4a20      	ldr	r2, [pc, #128]	; (80054b4 <BSP_LCD_ReadPixel+0xb0>)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	015b      	lsls	r3, r3, #5
 8005436:	4413      	add	r3, r2
 8005438:	3308      	adds	r3, #8
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1e      	ldr	r2, [pc, #120]	; (80054b8 <BSP_LCD_ReadPixel+0xb4>)
 800543e:	2134      	movs	r1, #52	; 0x34
 8005440:	fb01 f303 	mul.w	r3, r1, r3
 8005444:	4413      	add	r3, r2
 8005446:	335c      	adds	r3, #92	; 0x5c
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	491a      	ldr	r1, [pc, #104]	; (80054b4 <BSP_LCD_ReadPixel+0xb0>)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	015b      	lsls	r3, r3, #5
 8005450:	440b      	add	r3, r1
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	fb03 f101 	mul.w	r1, r3, r1
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	440b      	add	r3, r1
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	e01d      	b.n	80054a6 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800546a:	4a12      	ldr	r2, [pc, #72]	; (80054b4 <BSP_LCD_ReadPixel+0xb0>)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	015b      	lsls	r3, r3, #5
 8005470:	4413      	add	r3, r2
 8005472:	3308      	adds	r3, #8
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a10      	ldr	r2, [pc, #64]	; (80054b8 <BSP_LCD_ReadPixel+0xb4>)
 8005478:	2134      	movs	r1, #52	; 0x34
 800547a:	fb01 f303 	mul.w	r3, r1, r3
 800547e:	4413      	add	r3, r2
 8005480:	335c      	adds	r3, #92	; 0x5c
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	490b      	ldr	r1, [pc, #44]	; (80054b4 <BSP_LCD_ReadPixel+0xb0>)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	015b      	lsls	r3, r3, #5
 800548a:	440b      	add	r3, r1
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	fb03 f101 	mul.w	r1, r3, r1
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	440b      	add	r3, r1
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	4413      	add	r3, r2
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	461a      	mov	r2, r3
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	24000ff4 	.word	0x24000ff4
 80054b8:	24000f4c 	.word	0x24000f4c

080054bc <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80054ca:	4a27      	ldr	r2, [pc, #156]	; (8005568 <BSP_LCD_WritePixel+0xac>)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	015b      	lsls	r3, r3, #5
 80054d0:	4413      	add	r3, r2
 80054d2:	3308      	adds	r3, #8
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a25      	ldr	r2, [pc, #148]	; (800556c <BSP_LCD_WritePixel+0xb0>)
 80054d8:	2134      	movs	r1, #52	; 0x34
 80054da:	fb01 f303 	mul.w	r3, r1, r3
 80054de:	4413      	add	r3, r2
 80054e0:	3348      	adds	r3, #72	; 0x48
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d11c      	bne.n	8005522 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 80054e8:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <BSP_LCD_WritePixel+0xac>)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	015b      	lsls	r3, r3, #5
 80054ee:	4413      	add	r3, r2
 80054f0:	3308      	adds	r3, #8
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1d      	ldr	r2, [pc, #116]	; (800556c <BSP_LCD_WritePixel+0xb0>)
 80054f6:	2134      	movs	r1, #52	; 0x34
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	4413      	add	r3, r2
 80054fe:	335c      	adds	r3, #92	; 0x5c
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4919      	ldr	r1, [pc, #100]	; (8005568 <BSP_LCD_WritePixel+0xac>)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	015b      	lsls	r3, r3, #5
 8005508:	440b      	add	r3, r1
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	fb03 f101 	mul.w	r1, r3, r1
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	440b      	add	r3, r1
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	461a      	mov	r2, r3
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	e01b      	b.n	800555a <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8005522:	4a11      	ldr	r2, [pc, #68]	; (8005568 <BSP_LCD_WritePixel+0xac>)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	015b      	lsls	r3, r3, #5
 8005528:	4413      	add	r3, r2
 800552a:	3308      	adds	r3, #8
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a0f      	ldr	r2, [pc, #60]	; (800556c <BSP_LCD_WritePixel+0xb0>)
 8005530:	2134      	movs	r1, #52	; 0x34
 8005532:	fb01 f303 	mul.w	r3, r1, r3
 8005536:	4413      	add	r3, r2
 8005538:	335c      	adds	r3, #92	; 0x5c
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	490a      	ldr	r1, [pc, #40]	; (8005568 <BSP_LCD_WritePixel+0xac>)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	015b      	lsls	r3, r3, #5
 8005542:	440b      	add	r3, r1
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	fb03 f101 	mul.w	r1, r3, r1
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	440b      	add	r3, r1
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	4413      	add	r3, r2
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	b292      	uxth	r2, r2
 8005558:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	24000ff4 	.word	0x24000ff4
 800556c:	24000f4c 	.word	0x24000f4c

08005570 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8005582:	4a2d      	ldr	r2, [pc, #180]	; (8005638 <LL_FillBuffer+0xc8>)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	015b      	lsls	r3, r3, #5
 8005588:	4413      	add	r3, r2
 800558a:	330c      	adds	r3, #12
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d129      	bne.n	80055e6 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8005592:	2302      	movs	r3, #2
 8005594:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	0adb      	lsrs	r3, r3, #11
 800559a:	f003 021f 	and.w	r2, r3, #31
 800559e:	4613      	mov	r3, r2
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	4413      	add	r3, r2
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	3317      	adds	r3, #23
 80055aa:	099b      	lsrs	r3, r3, #6
 80055ac:	0419      	lsls	r1, r3, #16
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055b6:	4613      	mov	r3, r2
 80055b8:	01db      	lsls	r3, r3, #7
 80055ba:	4413      	add	r3, r2
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	4413      	add	r3, r2
 80055c0:	3321      	adds	r3, #33	; 0x21
 80055c2:	099b      	lsrs	r3, r3, #6
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	4319      	orrs	r1, r3
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	f003 021f 	and.w	r2, r3, #31
 80055ce:	4613      	mov	r3, r2
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	4413      	add	r3, r2
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	3317      	adds	r3, #23
 80055da:	099b      	lsrs	r3, r3, #6
 80055dc:	430b      	orrs	r3, r1
 80055de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e2:	613b      	str	r3, [r7, #16]
    break;
 80055e4:	e002      	b.n	80055ec <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
    break;
 80055ea:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 80055ec:	4b13      	ldr	r3, [pc, #76]	; (800563c <LL_FillBuffer+0xcc>)
 80055ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80055f2:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80055f4:	4a11      	ldr	r2, [pc, #68]	; (800563c <LL_FillBuffer+0xcc>)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 80055fa:	4a10      	ldr	r2, [pc, #64]	; (800563c <LL_FillBuffer+0xcc>)
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8005600:	4b0e      	ldr	r3, [pc, #56]	; (800563c <LL_FillBuffer+0xcc>)
 8005602:	4a0f      	ldr	r2, [pc, #60]	; (8005640 <LL_FillBuffer+0xd0>)
 8005604:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8005606:	480d      	ldr	r0, [pc, #52]	; (800563c <LL_FillBuffer+0xcc>)
 8005608:	f002 ffc0 	bl	800858c <HAL_DMA2D_Init>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10e      	bne.n	8005630 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6939      	ldr	r1, [r7, #16]
 800561c:	4807      	ldr	r0, [pc, #28]	; (800563c <LL_FillBuffer+0xcc>)
 800561e:	f003 f823 	bl	8008668 <HAL_DMA2D_Start>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d103      	bne.n	8005630 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8005628:	2132      	movs	r1, #50	; 0x32
 800562a:	4804      	ldr	r0, [pc, #16]	; (800563c <LL_FillBuffer+0xcc>)
 800562c:	f003 f847 	bl	80086be <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8005630:	bf00      	nop
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	24000ff4 	.word	0x24000ff4
 800563c:	24000ee4 	.word	0x24000ee4
 8005640:	52001000 	.word	0x52001000

08005644 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af02      	add	r7, sp, #8
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8005652:	4a23      	ldr	r2, [pc, #140]	; (80056e0 <LL_ConvertLineToRGB+0x9c>)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	015b      	lsls	r3, r3, #5
 8005658:	4413      	add	r3, r2
 800565a:	330c      	adds	r3, #12
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d102      	bne.n	8005668 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8005662:	2302      	movs	r3, #2
 8005664:	617b      	str	r3, [r7, #20]
    break;
 8005666:	e002      	b.n	800566e <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
    break;
 800566c:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800566e:	4b1d      	ldr	r3, [pc, #116]	; (80056e4 <LL_ConvertLineToRGB+0xa0>)
 8005670:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005674:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8005676:	4a1b      	ldr	r2, [pc, #108]	; (80056e4 <LL_ConvertLineToRGB+0xa0>)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 800567c:	4b19      	ldr	r3, [pc, #100]	; (80056e4 <LL_ConvertLineToRGB+0xa0>)
 800567e:	2200      	movs	r2, #0
 8005680:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005682:	4b18      	ldr	r3, [pc, #96]	; (80056e4 <LL_ConvertLineToRGB+0xa0>)
 8005684:	2200      	movs	r2, #0
 8005686:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8005688:	4b16      	ldr	r3, [pc, #88]	; (80056e4 <LL_ConvertLineToRGB+0xa0>)
 800568a:	22ff      	movs	r2, #255	; 0xff
 800568c:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 800568e:	4a15      	ldr	r2, [pc, #84]	; (80056e4 <LL_ConvertLineToRGB+0xa0>)
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8005694:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <LL_ConvertLineToRGB+0xa0>)
 8005696:	2200      	movs	r2, #0
 8005698:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 800569a:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <LL_ConvertLineToRGB+0xa0>)
 800569c:	4a12      	ldr	r2, [pc, #72]	; (80056e8 <LL_ConvertLineToRGB+0xa4>)
 800569e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80056a0:	4810      	ldr	r0, [pc, #64]	; (80056e4 <LL_ConvertLineToRGB+0xa0>)
 80056a2:	f002 ff73 	bl	800858c <HAL_DMA2D_Init>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d115      	bne.n	80056d8 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80056ac:	2101      	movs	r1, #1
 80056ae:	480d      	ldr	r0, [pc, #52]	; (80056e4 <LL_ConvertLineToRGB+0xa0>)
 80056b0:	f003 f8ee 	bl	8008890 <HAL_DMA2D_ConfigLayer>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10e      	bne.n	80056d8 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	2301      	movs	r3, #1
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	4807      	ldr	r0, [pc, #28]	; (80056e4 <LL_ConvertLineToRGB+0xa0>)
 80056c6:	f002 ffcf 	bl	8008668 <HAL_DMA2D_Start>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d103      	bne.n	80056d8 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 80056d0:	2132      	movs	r1, #50	; 0x32
 80056d2:	4804      	ldr	r0, [pc, #16]	; (80056e4 <LL_ConvertLineToRGB+0xa0>)
 80056d4:	f002 fff3 	bl	80086be <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80056d8:	bf00      	nop
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	24000ff4 	.word	0x24000ff4
 80056e4:	24000ee4 	.word	0x24000ee4
 80056e8:	52001000 	.word	0x52001000

080056ec <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08e      	sub	sp, #56	; 0x38
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a5b      	ldr	r2, [pc, #364]	; (8005868 <LTDC_MspInit+0x17c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	f040 80b0 	bne.w	8005860 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005700:	4b5a      	ldr	r3, [pc, #360]	; (800586c <LTDC_MspInit+0x180>)
 8005702:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005706:	4a59      	ldr	r2, [pc, #356]	; (800586c <LTDC_MspInit+0x180>)
 8005708:	f043 0308 	orr.w	r3, r3, #8
 800570c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005710:	4b56      	ldr	r3, [pc, #344]	; (800586c <LTDC_MspInit+0x180>)
 8005712:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	623b      	str	r3, [r7, #32]
 800571c:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800571e:	4b53      	ldr	r3, [pc, #332]	; (800586c <LTDC_MspInit+0x180>)
 8005720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005724:	4a51      	ldr	r2, [pc, #324]	; (800586c <LTDC_MspInit+0x180>)
 8005726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800572e:	4b4f      	ldr	r3, [pc, #316]	; (800586c <LTDC_MspInit+0x180>)
 8005730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800573c:	4b4b      	ldr	r3, [pc, #300]	; (800586c <LTDC_MspInit+0x180>)
 800573e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005742:	4a4a      	ldr	r2, [pc, #296]	; (800586c <LTDC_MspInit+0x180>)
 8005744:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800574c:	4b47      	ldr	r3, [pc, #284]	; (800586c <LTDC_MspInit+0x180>)
 800574e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800575a:	4b44      	ldr	r3, [pc, #272]	; (800586c <LTDC_MspInit+0x180>)
 800575c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005760:	4a42      	ldr	r2, [pc, #264]	; (800586c <LTDC_MspInit+0x180>)
 8005762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800576a:	4b40      	ldr	r3, [pc, #256]	; (800586c <LTDC_MspInit+0x180>)
 800576c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005778:	4b3c      	ldr	r3, [pc, #240]	; (800586c <LTDC_MspInit+0x180>)
 800577a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800577e:	4a3b      	ldr	r2, [pc, #236]	; (800586c <LTDC_MspInit+0x180>)
 8005780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005788:	4b38      	ldr	r3, [pc, #224]	; (800586c <LTDC_MspInit+0x180>)
 800578a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800578e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005796:	4b35      	ldr	r3, [pc, #212]	; (800586c <LTDC_MspInit+0x180>)
 8005798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800579c:	4a33      	ldr	r2, [pc, #204]	; (800586c <LTDC_MspInit+0x180>)
 800579e:	f043 0308 	orr.w	r3, r3, #8
 80057a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057a6:	4b31      	ldr	r3, [pc, #196]	; (800586c <LTDC_MspInit+0x180>)
 80057a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 80057b4:	f24d 2303 	movw	r3, #53763	; 0xd203
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80057ba:	2302      	movs	r3, #2
 80057bc:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80057c2:	2302      	movs	r3, #2
 80057c4:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80057c6:	230e      	movs	r3, #14
 80057c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80057ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ce:	4619      	mov	r1, r3
 80057d0:	4827      	ldr	r0, [pc, #156]	; (8005870 <LTDC_MspInit+0x184>)
 80057d2:	f003 fa15 	bl	8008c00 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 80057d6:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80057da:	627b      	str	r3, [r7, #36]	; 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80057dc:	230e      	movs	r3, #14
 80057de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80057e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e4:	4619      	mov	r1, r3
 80057e6:	4823      	ldr	r0, [pc, #140]	; (8005874 <LTDC_MspInit+0x188>)
 80057e8:	f003 fa0a 	bl	8008c00 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80057ec:	23ff      	movs	r3, #255	; 0xff
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80057f0:	230e      	movs	r3, #14
 80057f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80057f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f8:	4619      	mov	r1, r3
 80057fa:	481f      	ldr	r0, [pc, #124]	; (8005878 <LTDC_MspInit+0x18c>)
 80057fc:	f003 fa00 	bl	8008c00 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 8005800:	f240 2302 	movw	r3, #514	; 0x202
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005806:	2302      	movs	r3, #2
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800580a:	2300      	movs	r3, #0
 800580c:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800580e:	2302      	movs	r3, #2
 8005810:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005812:	230e      	movs	r3, #14
 8005814:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800581a:	4619      	mov	r1, r3
 800581c:	4817      	ldr	r0, [pc, #92]	; (800587c <LTDC_MspInit+0x190>)
 800581e:	f003 f9ef 	bl	8008c00 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005826:	2301      	movs	r3, #1
 8005828:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800582a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800582e:	4619      	mov	r1, r3
 8005830:	4813      	ldr	r0, [pc, #76]	; (8005880 <LTDC_MspInit+0x194>)
 8005832:	f003 f9e5 	bl	8008c00 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8005836:	2201      	movs	r2, #1
 8005838:	2180      	movs	r1, #128	; 0x80
 800583a:	4811      	ldr	r0, [pc, #68]	; (8005880 <LTDC_MspInit+0x194>)
 800583c:	f003 fc9a 	bl	8009174 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8005840:	4b0a      	ldr	r3, [pc, #40]	; (800586c <LTDC_MspInit+0x180>)
 8005842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005846:	4a09      	ldr	r2, [pc, #36]	; (800586c <LTDC_MspInit+0x180>)
 8005848:	f043 0308 	orr.w	r3, r3, #8
 800584c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8005850:	4b06      	ldr	r3, [pc, #24]	; (800586c <LTDC_MspInit+0x180>)
 8005852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005856:	4a05      	ldr	r2, [pc, #20]	; (800586c <LTDC_MspInit+0x180>)
 8005858:	f023 0308 	bic.w	r3, r3, #8
 800585c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 8005860:	bf00      	nop
 8005862:	3738      	adds	r7, #56	; 0x38
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	50001000 	.word	0x50001000
 800586c:	58024400 	.word	0x58024400
 8005870:	58022000 	.word	0x58022000
 8005874:	58022400 	.word	0x58022400
 8005878:	58022800 	.word	0x58022800
 800587c:	58021c00 	.word	0x58021c00
 8005880:	58020c00 	.word	0x58020c00

08005884 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a11      	ldr	r2, [pc, #68]	; (80058d8 <DMA2D_MspInit+0x54>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d11a      	bne.n	80058cc <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005896:	4b11      	ldr	r3, [pc, #68]	; (80058dc <DMA2D_MspInit+0x58>)
 8005898:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800589c:	4a0f      	ldr	r2, [pc, #60]	; (80058dc <DMA2D_MspInit+0x58>)
 800589e:	f043 0310 	orr.w	r3, r3, #16
 80058a2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <DMA2D_MspInit+0x58>)
 80058a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 80058b4:	4b09      	ldr	r3, [pc, #36]	; (80058dc <DMA2D_MspInit+0x58>)
 80058b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058b8:	4a08      	ldr	r2, [pc, #32]	; (80058dc <DMA2D_MspInit+0x58>)
 80058ba:	f043 0310 	orr.w	r3, r3, #16
 80058be:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80058c0:	4b06      	ldr	r3, [pc, #24]	; (80058dc <DMA2D_MspInit+0x58>)
 80058c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058c4:	4a05      	ldr	r2, [pc, #20]	; (80058dc <DMA2D_MspInit+0x58>)
 80058c6:	f023 0310 	bic.w	r3, r3, #16
 80058ca:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 80058cc:	bf00      	nop
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	52001000 	.word	0x52001000
 80058dc:	58024400 	.word	0x58024400

080058e0 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	; 0x28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80058e8:	4b18      	ldr	r3, [pc, #96]	; (800594c <TIMx_PWM_MspInit+0x6c>)
 80058ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058ee:	4a17      	ldr	r2, [pc, #92]	; (800594c <TIMx_PWM_MspInit+0x6c>)
 80058f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80058f8:	4b14      	ldr	r3, [pc, #80]	; (800594c <TIMx_PWM_MspInit+0x6c>)
 80058fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 8005906:	4b11      	ldr	r3, [pc, #68]	; (800594c <TIMx_PWM_MspInit+0x6c>)
 8005908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800590c:	4a0f      	ldr	r2, [pc, #60]	; (800594c <TIMx_PWM_MspInit+0x6c>)
 800590e:	f043 0302 	orr.w	r3, r3, #2
 8005912:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005916:	4b0d      	ldr	r3, [pc, #52]	; (800594c <TIMx_PWM_MspInit+0x6c>)
 8005918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005924:	2302      	movs	r3, #2
 8005926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005928:	2300      	movs	r3, #0
 800592a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800592c:	2301      	movs	r3, #1
 800592e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8005930:	2303      	movs	r3, #3
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 8005934:	2301      	movs	r3, #1
 8005936:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8005938:	f107 0314 	add.w	r3, r7, #20
 800593c:	4619      	mov	r1, r3
 800593e:	4804      	ldr	r0, [pc, #16]	; (8005950 <TIMx_PWM_MspInit+0x70>)
 8005940:	f003 f95e 	bl	8008c00 <HAL_GPIO_Init>
}
 8005944:	bf00      	nop
 8005946:	3728      	adds	r7, #40	; 0x28
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	58024400 	.word	0x58024400
 8005950:	58022800 	.word	0x58022800

08005954 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a11      	ldr	r2, [pc, #68]	; (80059a4 <TIMx_PWM_Init+0x50>)
 8005960:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f008 f90d 	bl	800db82 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff ffb9 	bl	80058e0 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2204      	movs	r2, #4
 8005972:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f24c 3250 	movw	r2, #50000	; 0xc350
 800597a:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f008 f89d 	bl	800dad4 <HAL_TIM_PWM_Init>
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	40010400 	.word	0x40010400

080059a8 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80059ba:	f06f 0301 	mvn.w	r3, #1
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	e044      	b.n	8005a4c <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2234      	movs	r2, #52	; 0x34
 80059c6:	fb02 f303 	mul.w	r3, r2, r3
 80059ca:	4a23      	ldr	r2, [pc, #140]	; (8005a58 <BSP_SDRAM_Init+0xb0>)
 80059cc:	4413      	add	r3, r2
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 f8a8 	bl	8005b24 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2234      	movs	r2, #52	; 0x34
 80059d8:	fb02 f303 	mul.w	r3, r2, r3
 80059dc:	4a1e      	ldr	r2, [pc, #120]	; (8005a58 <BSP_SDRAM_Init+0xb0>)
 80059de:	4413      	add	r3, r2
 80059e0:	2210      	movs	r2, #16
 80059e2:	2104      	movs	r1, #4
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 f83b 	bl	8005a60 <MX_SDRAM_BANK2_Init>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 80059f0:	f04f 33ff 	mov.w	r3, #4294967295
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	e029      	b.n	8005a4c <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80059f8:	4b18      	ldr	r3, [pc, #96]	; (8005a5c <BSP_SDRAM_Init+0xb4>)
 80059fa:	2208      	movs	r2, #8
 80059fc:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 80059fe:	4b17      	ldr	r3, [pc, #92]	; (8005a5c <BSP_SDRAM_Init+0xb4>)
 8005a00:	2203      	movs	r2, #3
 8005a02:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005a04:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <BSP_SDRAM_Init+0xb4>)
 8005a06:	f240 6203 	movw	r2, #1539	; 0x603
 8005a0a:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8005a0c:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <BSP_SDRAM_Init+0xb4>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8005a12:	4b12      	ldr	r3, [pc, #72]	; (8005a5c <BSP_SDRAM_Init+0xb4>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 8005a18:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <BSP_SDRAM_Init+0xb4>)
 8005a1a:	2230      	movs	r2, #48	; 0x30
 8005a1c:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8005a1e:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <BSP_SDRAM_Init+0xb4>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8005a24:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <BSP_SDRAM_Init+0xb4>)
 8005a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a2a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2234      	movs	r2, #52	; 0x34
 8005a30:	fb02 f303 	mul.w	r3, r2, r3
 8005a34:	4a08      	ldr	r2, [pc, #32]	; (8005a58 <BSP_SDRAM_Init+0xb0>)
 8005a36:	4413      	add	r3, r2
 8005a38:	4908      	ldr	r1, [pc, #32]	; (8005a5c <BSP_SDRAM_Init+0xb4>)
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe f888 	bl	8003b50 <MT48LC4M32B2_Init>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005a46:	f06f 0304 	mvn.w	r3, #4
 8005a4a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	24001014 	.word	0x24001014
 8005a5c:	24001048 	.word	0x24001048

08005a60 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08c      	sub	sp, #48	; 0x30
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8005a6c:	4b20      	ldr	r3, [pc, #128]	; (8005af0 <MX_SDRAM_BANK2_Init+0x90>)
 8005a6e:	4a21      	ldr	r2, [pc, #132]	; (8005af4 <MX_SDRAM_BANK2_Init+0x94>)
 8005a70:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005a8a:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <MX_SDRAM_BANK2_Init+0x90>)
 8005a8c:	2240      	movs	r2, #64	; 0x40
 8005a8e:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005a96:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aa4:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005ab8:	2307      	movs	r3, #7
 8005aba:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8005abc:	2304      	movs	r3, #4
 8005abe:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 8005ac0:	2307      	movs	r3, #7
 8005ac2:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 8005ac8:	2302      	movs	r3, #2
 8005aca:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 8005acc:	2302      	movs	r3, #2
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005ad0:	f107 0314 	add.w	r3, r7, #20
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f007 fe88 	bl	800d7ec <HAL_SDRAM_Init>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3730      	adds	r7, #48	; 0x30
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	24001014 	.word	0x24001014
 8005af4:	52004140 	.word	0x52004140

08005af8 <BSP_SDRAM_IRQHandler>:
  * @brief  This function handles SDRAM MDMA interrupt request.
  * @param  Instance SDRAM instance
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 8005b00:	4a07      	ldr	r2, [pc, #28]	; (8005b20 <BSP_SDRAM_IRQHandler+0x28>)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2134      	movs	r1, #52	; 0x34
 8005b06:	fb01 f303 	mul.w	r3, r1, r3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3330      	adds	r3, #48	; 0x30
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f004 fd0b 	bl	800a52c <HAL_MDMA_IRQHandler>
}
 8005b16:	bf00      	nop
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	24001014 	.word	0x24001014

08005b24 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08e      	sub	sp, #56	; 0x38
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005b2c:	4b73      	ldr	r3, [pc, #460]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005b2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005b32:	4a72      	ldr	r2, [pc, #456]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b38:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005b3c:	4b6f      	ldr	r3, [pc, #444]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005b3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b46:	623b      	str	r3, [r7, #32]
 8005b48:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8005b4a:	4b6c      	ldr	r3, [pc, #432]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005b4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005b50:	4a6a      	ldr	r2, [pc, #424]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005b52:	f043 0301 	orr.w	r3, r3, #1
 8005b56:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005b5a:	4b68      	ldr	r3, [pc, #416]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005b5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b68:	4b64      	ldr	r3, [pc, #400]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b6e:	4a63      	ldr	r2, [pc, #396]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005b70:	f043 0308 	orr.w	r3, r3, #8
 8005b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b78:	4b60      	ldr	r3, [pc, #384]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b7e:	f003 0308 	and.w	r3, r3, #8
 8005b82:	61bb      	str	r3, [r7, #24]
 8005b84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b86:	4b5d      	ldr	r3, [pc, #372]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b8c:	4a5b      	ldr	r2, [pc, #364]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005b8e:	f043 0310 	orr.w	r3, r3, #16
 8005b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b96:	4b59      	ldr	r3, [pc, #356]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005ba4:	4b55      	ldr	r3, [pc, #340]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005baa:	4a54      	ldr	r2, [pc, #336]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005bac:	f043 0320 	orr.w	r3, r3, #32
 8005bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005bb4:	4b51      	ldr	r3, [pc, #324]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	613b      	str	r3, [r7, #16]
 8005bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005bc2:	4b4e      	ldr	r3, [pc, #312]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bc8:	4a4c      	ldr	r2, [pc, #304]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005bd2:	4b4a      	ldr	r3, [pc, #296]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005be0:	4b46      	ldr	r3, [pc, #280]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005be6:	4a45      	ldr	r2, [pc, #276]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005bf0:	4b42      	ldr	r3, [pc, #264]	; (8005cfc <SDRAM_MspInit+0x1d8>)
 8005bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005bfe:	2302      	movs	r3, #2
 8005c00:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005c02:	2301      	movs	r3, #1
 8005c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c06:	2303      	movs	r3, #3
 8005c08:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005c0a:	230c      	movs	r3, #12
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005c0e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4839      	ldr	r0, [pc, #228]	; (8005d00 <SDRAM_MspInit+0x1dc>)
 8005c1c:	f002 fff0 	bl	8008c00 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005c20:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4835      	ldr	r0, [pc, #212]	; (8005d04 <SDRAM_MspInit+0x1e0>)
 8005c2e:	f002 ffe7 	bl	8008c00 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005c32:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4832      	ldr	r0, [pc, #200]	; (8005d08 <SDRAM_MspInit+0x1e4>)
 8005c40:	f002 ffde 	bl	8008c00 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8005c44:	f248 1333 	movw	r3, #33075	; 0x8133
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c4e:	4619      	mov	r1, r3
 8005c50:	482e      	ldr	r0, [pc, #184]	; (8005d0c <SDRAM_MspInit+0x1e8>)
 8005c52:	f002 ffd5 	bl	8008c00 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8005c56:	23e0      	movs	r3, #224	; 0xe0
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c5e:	4619      	mov	r1, r3
 8005c60:	482b      	ldr	r0, [pc, #172]	; (8005d10 <SDRAM_MspInit+0x1ec>)
 8005c62:	f002 ffcd 	bl	8008c00 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 8005c66:	4b2b      	ldr	r3, [pc, #172]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005c68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c6c:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8005c6e:	4b29      	ldr	r3, [pc, #164]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c74:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 8005c76:	4b27      	ldr	r3, [pc, #156]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005c78:	2280      	movs	r2, #128	; 0x80
 8005c7a:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005c7c:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 8005c82:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005c84:	f240 2202 	movw	r2, #514	; 0x202
 8005c88:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8005c8a:	4b22      	ldr	r3, [pc, #136]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005c8c:	f640 0208 	movw	r2, #2056	; 0x808
 8005c90:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8005c92:	4b20      	ldr	r3, [pc, #128]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005c94:	2220      	movs	r2, #32
 8005c96:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8005c98:	4b1e      	ldr	r3, [pc, #120]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8005c9e:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005ca0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8005ca6:	4b1b      	ldr	r3, [pc, #108]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8005cac:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 8005cb2:	4b18      	ldr	r3, [pc, #96]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005cb4:	2280      	movs	r2, #128	; 0x80
 8005cb6:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8005cb8:	4b16      	ldr	r3, [pc, #88]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 8005cbe:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8005cc4:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005cc6:	4a14      	ldr	r2, [pc, #80]	; (8005d18 <SDRAM_MspInit+0x1f4>)
 8005cc8:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005cca:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <SDRAM_MspInit+0x1f8>)
 8005ccc:	4a11      	ldr	r2, [pc, #68]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005cce:	631a      	str	r2, [r3, #48]	; 0x30
 8005cd0:	4b10      	ldr	r3, [pc, #64]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005cd2:	4a12      	ldr	r2, [pc, #72]	; (8005d1c <SDRAM_MspInit+0x1f8>)
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8005cd6:	480f      	ldr	r0, [pc, #60]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005cd8:	f004 fbd0 	bl	800a47c <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8005cdc:	480d      	ldr	r0, [pc, #52]	; (8005d14 <SDRAM_MspInit+0x1f0>)
 8005cde:	f004 fb81 	bl	800a3e4 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	210f      	movs	r1, #15
 8005ce6:	207a      	movs	r0, #122	; 0x7a
 8005ce8:	f000 fc09 	bl	80064fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005cec:	207a      	movs	r0, #122	; 0x7a
 8005cee:	f000 fc20 	bl	8006532 <HAL_NVIC_EnableIRQ>
}
 8005cf2:	bf00      	nop
 8005cf4:	3738      	adds	r7, #56	; 0x38
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	58024400 	.word	0x58024400
 8005d00:	58020c00 	.word	0x58020c00
 8005d04:	58021000 	.word	0x58021000
 8005d08:	58021400 	.word	0x58021400
 8005d0c:	58021800 	.word	0x58021800
 8005d10:	58021c00 	.word	0x58021c00
 8005d14:	24001068 	.word	0x24001068
 8005d18:	52000040 	.word	0x52000040
 8005d1c:	24001014 	.word	0x24001014

08005d20 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d11c      	bne.n	8005d6e <BSP_TS_Init+0x4e>
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d018      	beq.n	8005d6e <BSP_TS_Init+0x4e>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005d44:	d813      	bhi.n	8005d6e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00f      	beq.n	8005d6e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8005d56:	d80a      	bhi.n	8005d6e <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	428b      	cmp	r3, r1
 8005d66:	bf28      	it	cs
 8005d68:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d903      	bls.n	8005d76 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d6e:	f06f 0301 	mvn.w	r3, #1
 8005d72:	61fb      	str	r3, [r7, #28]
 8005d74:	e06e      	b.n	8005e54 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f98c 	bl	8006094 <FT5336_Probe>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8005d82:	f04f 33ff 	mov.w	r3, #4294967295
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	e064      	b.n	8005e54 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4934      	ldr	r1, [pc, #208]	; (8005e60 <BSP_TS_Init+0x140>)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	019b      	lsls	r3, r3, #6
 8005d94:	440b      	add	r3, r1
 8005d96:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	4930      	ldr	r1, [pc, #192]	; (8005e60 <BSP_TS_Init+0x140>)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	019b      	lsls	r3, r3, #6
 8005da2:	440b      	add	r3, r1
 8005da4:	3304      	adds	r3, #4
 8005da6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	492c      	ldr	r1, [pc, #176]	; (8005e60 <BSP_TS_Init+0x140>)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	019b      	lsls	r3, r3, #6
 8005db2:	440b      	add	r3, r1
 8005db4:	3308      	adds	r3, #8
 8005db6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	4928      	ldr	r1, [pc, #160]	; (8005e60 <BSP_TS_Init+0x140>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	019b      	lsls	r3, r3, #6
 8005dc2:	440b      	add	r3, r1
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005dc8:	4b26      	ldr	r3, [pc, #152]	; (8005e64 <BSP_TS_Init+0x144>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	4926      	ldr	r1, [pc, #152]	; (8005e68 <BSP_TS_Init+0x148>)
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005dd6:	f107 010c 	add.w	r1, r7, #12
 8005dda:	4610      	mov	r0, r2
 8005ddc:	4798      	blx	r3
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	da03      	bge.n	8005dec <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005de4:	f06f 0304 	mvn.w	r3, #4
 8005de8:	61fb      	str	r3, [r7, #28]
 8005dea:	e033      	b.n	8005e54 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	491c      	ldr	r1, [pc, #112]	; (8005e60 <BSP_TS_Init+0x140>)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	019b      	lsls	r3, r3, #6
 8005df4:	440b      	add	r3, r1
 8005df6:	3310      	adds	r3, #16
 8005df8:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4918      	ldr	r1, [pc, #96]	; (8005e60 <BSP_TS_Init+0x140>)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	019b      	lsls	r3, r3, #6
 8005e02:	440b      	add	r3, r1
 8005e04:	3314      	adds	r3, #20
 8005e06:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	e01f      	b.n	8005e4e <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	4811      	ldr	r0, [pc, #68]	; (8005e60 <BSP_TS_Init+0x140>)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	0119      	lsls	r1, r3, #4
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	440b      	add	r3, r1
 8005e24:	3306      	adds	r3, #6
 8005e26:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	4413      	add	r3, r2
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	480a      	ldr	r0, [pc, #40]	; (8005e60 <BSP_TS_Init+0x140>)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	0119      	lsls	r1, r3, #4
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	440b      	add	r3, r1
 8005e40:	330a      	adds	r3, #10
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4403      	add	r3, r0
 8005e46:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d9dc      	bls.n	8005e0e <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 8005e54:	69fb      	ldr	r3, [r7, #28]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	240010dc 	.word	0x240010dc
 8005e64:	240010d4 	.word	0x240010d4
 8005e68:	240010d8 	.word	0x240010d8

08005e6c <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	; 0x28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005e76:	2300      	movs	r3, #0
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005e80:	f06f 0301 	mvn.w	r3, #1
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
 8005e86:	e0f9      	b.n	800607c <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8005e88:	4b7f      	ldr	r3, [pc, #508]	; (8006088 <BSP_TS_GetState+0x21c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	497f      	ldr	r1, [pc, #508]	; (800608c <BSP_TS_GetState+0x220>)
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005e96:	f107 0108 	add.w	r1, r7, #8
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4798      	blx	r3
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	da03      	bge.n	8005eac <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ea4:	f06f 0304 	mvn.w	r3, #4
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eaa:	e0e7      	b.n	800607c <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 80d1 	beq.w	8006056 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005ebc:	4a74      	ldr	r2, [pc, #464]	; (8006090 <BSP_TS_GetState+0x224>)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	019b      	lsls	r3, r3, #6
 8005ec2:	4413      	add	r3, r2
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8005ed8:	4a6d      	ldr	r2, [pc, #436]	; (8006090 <BSP_TS_GetState+0x224>)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	019b      	lsls	r3, r3, #6
 8005ede:	4413      	add	r3, r2
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d009      	beq.n	8005f00 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8005eec:	4a68      	ldr	r2, [pc, #416]	; (8006090 <BSP_TS_GetState+0x224>)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	019b      	lsls	r3, r3, #6
 8005ef2:	4413      	add	r3, r2
 8005ef4:	3310      	adds	r3, #16
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8005f00:	4a63      	ldr	r2, [pc, #396]	; (8006090 <BSP_TS_GetState+0x224>)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	019b      	lsls	r3, r3, #6
 8005f06:	4413      	add	r3, r2
 8005f08:	3308      	adds	r3, #8
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d008      	beq.n	8005f26 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8005f14:	4a5e      	ldr	r2, [pc, #376]	; (8006090 <BSP_TS_GetState+0x224>)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	019b      	lsls	r3, r3, #6
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3314      	adds	r3, #20
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005f26:	4a5a      	ldr	r2, [pc, #360]	; (8006090 <BSP_TS_GetState+0x224>)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	019b      	lsls	r3, r3, #6
 8005f2c:	4413      	add	r3, r2
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	fb03 f202 	mul.w	r2, r3, r2
 8005f36:	4956      	ldr	r1, [pc, #344]	; (8006090 <BSP_TS_GetState+0x224>)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	019b      	lsls	r3, r3, #6
 8005f3c:	440b      	add	r3, r1
 8005f3e:	3310      	adds	r3, #16
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005f4a:	4a51      	ldr	r2, [pc, #324]	; (8006090 <BSP_TS_GetState+0x224>)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	019b      	lsls	r3, r3, #6
 8005f50:	4413      	add	r3, r2
 8005f52:	3304      	adds	r3, #4
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	fb03 f202 	mul.w	r2, r3, r2
 8005f5c:	494c      	ldr	r1, [pc, #304]	; (8006090 <BSP_TS_GetState+0x224>)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	019b      	lsls	r3, r3, #6
 8005f62:	440b      	add	r3, r1
 8005f64:	3314      	adds	r3, #20
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	4945      	ldr	r1, [pc, #276]	; (8006090 <BSP_TS_GetState+0x224>)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	019b      	lsls	r3, r3, #6
 8005f80:	440b      	add	r3, r1
 8005f82:	3318      	adds	r3, #24
 8005f84:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d909      	bls.n	8005f9e <BSP_TS_GetState+0x132>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	4940      	ldr	r1, [pc, #256]	; (8006090 <BSP_TS_GetState+0x224>)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	019b      	lsls	r3, r3, #6
 8005f94:	440b      	add	r3, r1
 8005f96:	3318      	adds	r3, #24
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	e008      	b.n	8005fb0 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8005f9e:	4a3c      	ldr	r2, [pc, #240]	; (8006090 <BSP_TS_GetState+0x224>)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	019b      	lsls	r3, r3, #6
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3318      	adds	r3, #24
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005fae:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005fb0:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	4936      	ldr	r1, [pc, #216]	; (8006090 <BSP_TS_GetState+0x224>)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	019b      	lsls	r3, r3, #6
 8005fbc:	440b      	add	r3, r1
 8005fbe:	332c      	adds	r3, #44	; 0x2c
 8005fc0:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d909      	bls.n	8005fda <BSP_TS_GetState+0x16e>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	4931      	ldr	r1, [pc, #196]	; (8006090 <BSP_TS_GetState+0x224>)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	019b      	lsls	r3, r3, #6
 8005fd0:	440b      	add	r3, r1
 8005fd2:	332c      	adds	r3, #44	; 0x2c
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	e008      	b.n	8005fec <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8005fda:	4a2d      	ldr	r2, [pc, #180]	; (8006090 <BSP_TS_GetState+0x224>)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	019b      	lsls	r3, r3, #6
 8005fe0:	4413      	add	r3, r2
 8005fe2:	332c      	adds	r3, #44	; 0x2c
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8005fea:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8005fec:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005fee:	4a28      	ldr	r2, [pc, #160]	; (8006090 <BSP_TS_GetState+0x224>)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	019b      	lsls	r3, r3, #6
 8005ff4:	4413      	add	r3, r2
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d808      	bhi.n	8006012 <BSP_TS_GetState+0x1a6>
 8006000:	4a23      	ldr	r2, [pc, #140]	; (8006090 <BSP_TS_GetState+0x224>)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	019b      	lsls	r3, r3, #6
 8006006:	4413      	add	r3, r2
 8006008:	330c      	adds	r3, #12
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	429a      	cmp	r2, r3
 8006010:	d910      	bls.n	8006034 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	491e      	ldr	r1, [pc, #120]	; (8006090 <BSP_TS_GetState+0x224>)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	019b      	lsls	r3, r3, #6
 800601c:	440b      	add	r3, r1
 800601e:	3318      	adds	r3, #24
 8006020:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	491a      	ldr	r1, [pc, #104]	; (8006090 <BSP_TS_GetState+0x224>)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	019b      	lsls	r3, r3, #6
 800602c:	440b      	add	r3, r1
 800602e:	332c      	adds	r3, #44	; 0x2c
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	e023      	b.n	800607c <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8006034:	4a16      	ldr	r2, [pc, #88]	; (8006090 <BSP_TS_GetState+0x224>)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	019b      	lsls	r3, r3, #6
 800603a:	4413      	add	r3, r2
 800603c:	3318      	adds	r3, #24
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006044:	4a12      	ldr	r2, [pc, #72]	; (8006090 <BSP_TS_GetState+0x224>)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	019b      	lsls	r3, r3, #6
 800604a:	4413      	add	r3, r2
 800604c:	332c      	adds	r3, #44	; 0x2c
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	609a      	str	r2, [r3, #8]
 8006054:	e012      	b.n	800607c <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800605c:	4a0c      	ldr	r2, [pc, #48]	; (8006090 <BSP_TS_GetState+0x224>)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	019b      	lsls	r3, r3, #6
 8006062:	4413      	add	r3, r2
 8006064:	3318      	adds	r3, #24
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800606c:	4a08      	ldr	r2, [pc, #32]	; (8006090 <BSP_TS_GetState+0x224>)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	019b      	lsls	r3, r3, #6
 8006072:	4413      	add	r3, r2
 8006074:	332c      	adds	r3, #44	; 0x2c
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800607e:	4618      	mov	r0, r3
 8006080:	3728      	adds	r7, #40	; 0x28
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	240010d4 	.word	0x240010d4
 800608c:	240010d8 	.word	0x240010d8
 8006090:	240010dc 	.word	0x240010dc

08006094 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	; 0x28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800609c:	2300      	movs	r3, #0
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80060a4:	2370      	movs	r3, #112	; 0x70
 80060a6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 80060a8:	4b23      	ldr	r3, [pc, #140]	; (8006138 <FT5336_Probe+0xa4>)
 80060aa:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80060ac:	4b23      	ldr	r3, [pc, #140]	; (800613c <FT5336_Probe+0xa8>)
 80060ae:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80060b0:	4b23      	ldr	r3, [pc, #140]	; (8006140 <FT5336_Probe+0xac>)
 80060b2:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80060b4:	4b23      	ldr	r3, [pc, #140]	; (8006144 <FT5336_Probe+0xb0>)
 80060b6:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 80060b8:	4b23      	ldr	r3, [pc, #140]	; (8006148 <FT5336_Probe+0xb4>)
 80060ba:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80060bc:	f107 030c 	add.w	r3, r7, #12
 80060c0:	4619      	mov	r1, r3
 80060c2:	4822      	ldr	r0, [pc, #136]	; (800614c <FT5336_Probe+0xb8>)
 80060c4:	f7fd f9e4 	bl	8003490 <FT5336_RegisterBusIO>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80060ce:	f06f 0307 	mvn.w	r3, #7
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
 80060d4:	e02a      	b.n	800612c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 80060d6:	f107 0308 	add.w	r3, r7, #8
 80060da:	4619      	mov	r1, r3
 80060dc:	481b      	ldr	r0, [pc, #108]	; (800614c <FT5336_Probe+0xb8>)
 80060de:	f7fd fad1 	bl	8003684 <FT5336_ReadID>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80060e8:	f06f 0304 	mvn.w	r3, #4
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
 80060ee:	e01d      	b.n	800612c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b51      	cmp	r3, #81	; 0x51
 80060f4:	d003      	beq.n	80060fe <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060f6:	f06f 0306 	mvn.w	r3, #6
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
 80060fc:	e016      	b.n	800612c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 80060fe:	4a14      	ldr	r2, [pc, #80]	; (8006150 <FT5336_Probe+0xbc>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4912      	ldr	r1, [pc, #72]	; (800614c <FT5336_Probe+0xb8>)
 8006104:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8006108:	4b12      	ldr	r3, [pc, #72]	; (8006154 <FT5336_Probe+0xc0>)
 800610a:	4a13      	ldr	r2, [pc, #76]	; (8006158 <FT5336_Probe+0xc4>)
 800610c:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800610e:	4b11      	ldr	r3, [pc, #68]	; (8006154 <FT5336_Probe+0xc0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	490e      	ldr	r1, [pc, #56]	; (8006150 <FT5336_Probe+0xbc>)
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800611c:	4610      	mov	r0, r2
 800611e:	4798      	blx	r3
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006126:	f06f 0304 	mvn.w	r3, #4
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800612e:	4618      	mov	r0, r3
 8006130:	3728      	adds	r7, #40	; 0x28
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	08004345 	.word	0x08004345
 800613c:	080043b9 	.word	0x080043b9
 8006140:	080044e1 	.word	0x080044e1
 8006144:	08004485 	.word	0x08004485
 8006148:	0800453d 	.word	0x0800453d
 800614c:	2400111c 	.word	0x2400111c
 8006150:	240010d8 	.word	0x240010d8
 8006154:	240010d4 	.word	0x240010d4
 8006158:	2400000c 	.word	0x2400000c

0800615c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006162:	2003      	movs	r0, #3
 8006164:	f000 f9c0 	bl	80064e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006168:	f005 fa16 	bl	800b598 <HAL_RCC_GetSysClockFreq>
 800616c:	4602      	mov	r2, r0
 800616e:	4b15      	ldr	r3, [pc, #84]	; (80061c4 <HAL_Init+0x68>)
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	0a1b      	lsrs	r3, r3, #8
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	4913      	ldr	r1, [pc, #76]	; (80061c8 <HAL_Init+0x6c>)
 800617a:	5ccb      	ldrb	r3, [r1, r3]
 800617c:	f003 031f 	and.w	r3, r3, #31
 8006180:	fa22 f303 	lsr.w	r3, r2, r3
 8006184:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006186:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <HAL_Init+0x68>)
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	4a0e      	ldr	r2, [pc, #56]	; (80061c8 <HAL_Init+0x6c>)
 8006190:	5cd3      	ldrb	r3, [r2, r3]
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	fa22 f303 	lsr.w	r3, r2, r3
 800619c:	4a0b      	ldr	r2, [pc, #44]	; (80061cc <HAL_Init+0x70>)
 800619e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061a0:	4a0b      	ldr	r2, [pc, #44]	; (80061d0 <HAL_Init+0x74>)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80061a6:	200f      	movs	r0, #15
 80061a8:	f000 f814 	bl	80061d4 <HAL_InitTick>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e002      	b.n	80061bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80061b6:	f7fc ff31 	bl	800301c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	58024400 	.word	0x58024400
 80061c8:	080109d0 	.word	0x080109d0
 80061cc:	24000008 	.word	0x24000008
 80061d0:	24000004 	.word	0x24000004

080061d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80061dc:	4b15      	ldr	r3, [pc, #84]	; (8006234 <HAL_InitTick+0x60>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e021      	b.n	800622c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80061e8:	4b13      	ldr	r3, [pc, #76]	; (8006238 <HAL_InitTick+0x64>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	4b11      	ldr	r3, [pc, #68]	; (8006234 <HAL_InitTick+0x60>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	4619      	mov	r1, r3
 80061f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80061fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 f9b3 	bl	800656a <HAL_SYSTICK_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e00e      	b.n	800622c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b0f      	cmp	r3, #15
 8006212:	d80a      	bhi.n	800622a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006214:	2200      	movs	r2, #0
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	f000 f96f 	bl	80064fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006220:	4a06      	ldr	r2, [pc, #24]	; (800623c <HAL_InitTick+0x68>)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	e000      	b.n	800622c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
}
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	24000054 	.word	0x24000054
 8006238:	24000004 	.word	0x24000004
 800623c:	24000050 	.word	0x24000050

08006240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006244:	4b06      	ldr	r3, [pc, #24]	; (8006260 <HAL_IncTick+0x20>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	4b06      	ldr	r3, [pc, #24]	; (8006264 <HAL_IncTick+0x24>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4413      	add	r3, r2
 8006250:	4a04      	ldr	r2, [pc, #16]	; (8006264 <HAL_IncTick+0x24>)
 8006252:	6013      	str	r3, [r2, #0]
}
 8006254:	bf00      	nop
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	24000054 	.word	0x24000054
 8006264:	24001144 	.word	0x24001144

08006268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
  return uwTick;
 800626c:	4b03      	ldr	r3, [pc, #12]	; (800627c <HAL_GetTick+0x14>)
 800626e:	681b      	ldr	r3, [r3, #0]
}
 8006270:	4618      	mov	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	24001144 	.word	0x24001144

08006280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006288:	f7ff ffee 	bl	8006268 <HAL_GetTick>
 800628c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d005      	beq.n	80062a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800629a:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <HAL_Delay+0x44>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80062a6:	bf00      	nop
 80062a8:	f7ff ffde 	bl	8006268 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d8f7      	bhi.n	80062a8 <HAL_Delay+0x28>
  {
  }
}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	24000054 	.word	0x24000054

080062c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80062cc:	4b03      	ldr	r3, [pc, #12]	; (80062dc <HAL_GetREVID+0x14>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	0c1b      	lsrs	r3, r3, #16
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	5c001000 	.word	0x5c001000

080062e0 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80062e4:	4b05      	ldr	r3, [pc, #20]	; (80062fc <HAL_EnableCompensationCell+0x1c>)
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	4a04      	ldr	r2, [pc, #16]	; (80062fc <HAL_EnableCompensationCell+0x1c>)
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	6213      	str	r3, [r2, #32]
}
 80062f0:	bf00      	nop
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	58000400 	.word	0x58000400

08006300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006310:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <__NVIC_SetPriorityGrouping+0x40>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800631c:	4013      	ands	r3, r2
 800631e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006328:	4b06      	ldr	r3, [pc, #24]	; (8006344 <__NVIC_SetPriorityGrouping+0x44>)
 800632a:	4313      	orrs	r3, r2
 800632c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800632e:	4a04      	ldr	r2, [pc, #16]	; (8006340 <__NVIC_SetPriorityGrouping+0x40>)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	60d3      	str	r3, [r2, #12]
}
 8006334:	bf00      	nop
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	e000ed00 	.word	0xe000ed00
 8006344:	05fa0000 	.word	0x05fa0000

08006348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800634c:	4b04      	ldr	r3, [pc, #16]	; (8006360 <__NVIC_GetPriorityGrouping+0x18>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	0a1b      	lsrs	r3, r3, #8
 8006352:	f003 0307 	and.w	r3, r3, #7
}
 8006356:	4618      	mov	r0, r3
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	e000ed00 	.word	0xe000ed00

08006364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800636e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006372:	2b00      	cmp	r3, #0
 8006374:	db0b      	blt.n	800638e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006376:	88fb      	ldrh	r3, [r7, #6]
 8006378:	f003 021f 	and.w	r2, r3, #31
 800637c:	4907      	ldr	r1, [pc, #28]	; (800639c <__NVIC_EnableIRQ+0x38>)
 800637e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006382:	095b      	lsrs	r3, r3, #5
 8006384:	2001      	movs	r0, #1
 8006386:	fa00 f202 	lsl.w	r2, r0, r2
 800638a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	e000e100 	.word	0xe000e100

080063a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	4603      	mov	r3, r0
 80063a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80063aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	db12      	blt.n	80063d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	f003 021f 	and.w	r2, r3, #31
 80063b8:	490a      	ldr	r1, [pc, #40]	; (80063e4 <__NVIC_DisableIRQ+0x44>)
 80063ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063be:	095b      	lsrs	r3, r3, #5
 80063c0:	2001      	movs	r0, #1
 80063c2:	fa00 f202 	lsl.w	r2, r0, r2
 80063c6:	3320      	adds	r3, #32
 80063c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80063cc:	f3bf 8f4f 	dsb	sy
}
 80063d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80063d2:	f3bf 8f6f 	isb	sy
}
 80063d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	e000e100 	.word	0xe000e100

080063e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	4603      	mov	r3, r0
 80063f0:	6039      	str	r1, [r7, #0]
 80063f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80063f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	db0a      	blt.n	8006412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	490c      	ldr	r1, [pc, #48]	; (8006434 <__NVIC_SetPriority+0x4c>)
 8006402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006406:	0112      	lsls	r2, r2, #4
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	440b      	add	r3, r1
 800640c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006410:	e00a      	b.n	8006428 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	b2da      	uxtb	r2, r3
 8006416:	4908      	ldr	r1, [pc, #32]	; (8006438 <__NVIC_SetPriority+0x50>)
 8006418:	88fb      	ldrh	r3, [r7, #6]
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	3b04      	subs	r3, #4
 8006420:	0112      	lsls	r2, r2, #4
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	440b      	add	r3, r1
 8006426:	761a      	strb	r2, [r3, #24]
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	e000e100 	.word	0xe000e100
 8006438:	e000ed00 	.word	0xe000ed00

0800643c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800643c:	b480      	push	{r7}
 800643e:	b089      	sub	sp, #36	; 0x24
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	f1c3 0307 	rsb	r3, r3, #7
 8006456:	2b04      	cmp	r3, #4
 8006458:	bf28      	it	cs
 800645a:	2304      	movcs	r3, #4
 800645c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	3304      	adds	r3, #4
 8006462:	2b06      	cmp	r3, #6
 8006464:	d902      	bls.n	800646c <NVIC_EncodePriority+0x30>
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	3b03      	subs	r3, #3
 800646a:	e000      	b.n	800646e <NVIC_EncodePriority+0x32>
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006470:	f04f 32ff 	mov.w	r2, #4294967295
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	43da      	mvns	r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	401a      	ands	r2, r3
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006484:	f04f 31ff 	mov.w	r1, #4294967295
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	fa01 f303 	lsl.w	r3, r1, r3
 800648e:	43d9      	mvns	r1, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006494:	4313      	orrs	r3, r2
         );
}
 8006496:	4618      	mov	r0, r3
 8006498:	3724      	adds	r7, #36	; 0x24
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064b4:	d301      	bcc.n	80064ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064b6:	2301      	movs	r3, #1
 80064b8:	e00f      	b.n	80064da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064ba:	4a0a      	ldr	r2, [pc, #40]	; (80064e4 <SysTick_Config+0x40>)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3b01      	subs	r3, #1
 80064c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064c2:	210f      	movs	r1, #15
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295
 80064c8:	f7ff ff8e 	bl	80063e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064cc:	4b05      	ldr	r3, [pc, #20]	; (80064e4 <SysTick_Config+0x40>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064d2:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <SysTick_Config+0x40>)
 80064d4:	2207      	movs	r2, #7
 80064d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	e000e010 	.word	0xe000e010

080064e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ff05 	bl	8006300 <__NVIC_SetPriorityGrouping>
}
 80064f6:	bf00      	nop
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b086      	sub	sp, #24
 8006502:	af00      	add	r7, sp, #0
 8006504:	4603      	mov	r3, r0
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	607a      	str	r2, [r7, #4]
 800650a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800650c:	f7ff ff1c 	bl	8006348 <__NVIC_GetPriorityGrouping>
 8006510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	6978      	ldr	r0, [r7, #20]
 8006518:	f7ff ff90 	bl	800643c <NVIC_EncodePriority>
 800651c:	4602      	mov	r2, r0
 800651e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006522:	4611      	mov	r1, r2
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff ff5f 	bl	80063e8 <__NVIC_SetPriority>
}
 800652a:	bf00      	nop
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	4603      	mov	r3, r0
 800653a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800653c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff ff0f 	bl	8006364 <__NVIC_EnableIRQ>
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
 8006554:	4603      	mov	r3, r0
 8006556:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff ff1f 	bl	80063a0 <__NVIC_DisableIRQ>
}
 8006562:	bf00      	nop
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b082      	sub	sp, #8
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff ff96 	bl	80064a4 <SysTick_Config>
 8006578:	4603      	mov	r3, r0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e1a8      	b.n	80068e8 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a82      	ldr	r2, [pc, #520]	; (80067a4 <HAL_DMA_DeInit+0x220>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d04a      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a80      	ldr	r2, [pc, #512]	; (80067a8 <HAL_DMA_DeInit+0x224>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d045      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a7f      	ldr	r2, [pc, #508]	; (80067ac <HAL_DMA_DeInit+0x228>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d040      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a7d      	ldr	r2, [pc, #500]	; (80067b0 <HAL_DMA_DeInit+0x22c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d03b      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a7c      	ldr	r2, [pc, #496]	; (80067b4 <HAL_DMA_DeInit+0x230>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d036      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a7a      	ldr	r2, [pc, #488]	; (80067b8 <HAL_DMA_DeInit+0x234>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d031      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a79      	ldr	r2, [pc, #484]	; (80067bc <HAL_DMA_DeInit+0x238>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d02c      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a77      	ldr	r2, [pc, #476]	; (80067c0 <HAL_DMA_DeInit+0x23c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d027      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a76      	ldr	r2, [pc, #472]	; (80067c4 <HAL_DMA_DeInit+0x240>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d022      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a74      	ldr	r2, [pc, #464]	; (80067c8 <HAL_DMA_DeInit+0x244>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d01d      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a73      	ldr	r2, [pc, #460]	; (80067cc <HAL_DMA_DeInit+0x248>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d018      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a71      	ldr	r2, [pc, #452]	; (80067d0 <HAL_DMA_DeInit+0x24c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d013      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a70      	ldr	r2, [pc, #448]	; (80067d4 <HAL_DMA_DeInit+0x250>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00e      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a6e      	ldr	r2, [pc, #440]	; (80067d8 <HAL_DMA_DeInit+0x254>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d009      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a6d      	ldr	r2, [pc, #436]	; (80067dc <HAL_DMA_DeInit+0x258>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d004      	beq.n	8006636 <HAL_DMA_DeInit+0xb2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a6b      	ldr	r2, [pc, #428]	; (80067e0 <HAL_DMA_DeInit+0x25c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d108      	bne.n	8006648 <HAL_DMA_DeInit+0xc4>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0201 	bic.w	r2, r2, #1
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	e007      	b.n	8006658 <HAL_DMA_DeInit+0xd4>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a51      	ldr	r2, [pc, #324]	; (80067a4 <HAL_DMA_DeInit+0x220>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d04a      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a50      	ldr	r2, [pc, #320]	; (80067a8 <HAL_DMA_DeInit+0x224>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d045      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a4e      	ldr	r2, [pc, #312]	; (80067ac <HAL_DMA_DeInit+0x228>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d040      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a4d      	ldr	r2, [pc, #308]	; (80067b0 <HAL_DMA_DeInit+0x22c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d03b      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a4b      	ldr	r2, [pc, #300]	; (80067b4 <HAL_DMA_DeInit+0x230>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d036      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a4a      	ldr	r2, [pc, #296]	; (80067b8 <HAL_DMA_DeInit+0x234>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d031      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a48      	ldr	r2, [pc, #288]	; (80067bc <HAL_DMA_DeInit+0x238>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d02c      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a47      	ldr	r2, [pc, #284]	; (80067c0 <HAL_DMA_DeInit+0x23c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d027      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a45      	ldr	r2, [pc, #276]	; (80067c4 <HAL_DMA_DeInit+0x240>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d022      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a44      	ldr	r2, [pc, #272]	; (80067c8 <HAL_DMA_DeInit+0x244>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d01d      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a42      	ldr	r2, [pc, #264]	; (80067cc <HAL_DMA_DeInit+0x248>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d018      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a41      	ldr	r2, [pc, #260]	; (80067d0 <HAL_DMA_DeInit+0x24c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d013      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a3f      	ldr	r2, [pc, #252]	; (80067d4 <HAL_DMA_DeInit+0x250>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00e      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a3e      	ldr	r2, [pc, #248]	; (80067d8 <HAL_DMA_DeInit+0x254>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d009      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a3c      	ldr	r2, [pc, #240]	; (80067dc <HAL_DMA_DeInit+0x258>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d004      	beq.n	80066f8 <HAL_DMA_DeInit+0x174>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a3b      	ldr	r2, [pc, #236]	; (80067e0 <HAL_DMA_DeInit+0x25c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d101      	bne.n	80066fc <HAL_DMA_DeInit+0x178>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <HAL_DMA_DeInit+0x17a>
 80066fc:	2300      	movs	r3, #0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d025      	beq.n	800674e <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2200      	movs	r2, #0
 8006710:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2200      	movs	r2, #0
 8006718:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2200      	movs	r2, #0
 8006720:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2200      	movs	r2, #0
 8006728:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2221      	movs	r2, #33	; 0x21
 8006730:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 fd6a 	bl	800820c <DMA_CalcBaseAndBitshift>
 8006738:	4603      	mov	r3, r0
 800673a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006740:	f003 031f 	and.w	r3, r3, #31
 8006744:	223f      	movs	r2, #63	; 0x3f
 8006746:	409a      	lsls	r2, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	609a      	str	r2, [r3, #8]
 800674c:	e081      	b.n	8006852 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a24      	ldr	r2, [pc, #144]	; (80067e4 <HAL_DMA_DeInit+0x260>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d022      	beq.n	800679e <HAL_DMA_DeInit+0x21a>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a22      	ldr	r2, [pc, #136]	; (80067e8 <HAL_DMA_DeInit+0x264>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01d      	beq.n	800679e <HAL_DMA_DeInit+0x21a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a21      	ldr	r2, [pc, #132]	; (80067ec <HAL_DMA_DeInit+0x268>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d018      	beq.n	800679e <HAL_DMA_DeInit+0x21a>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1f      	ldr	r2, [pc, #124]	; (80067f0 <HAL_DMA_DeInit+0x26c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d013      	beq.n	800679e <HAL_DMA_DeInit+0x21a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1e      	ldr	r2, [pc, #120]	; (80067f4 <HAL_DMA_DeInit+0x270>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00e      	beq.n	800679e <HAL_DMA_DeInit+0x21a>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1c      	ldr	r2, [pc, #112]	; (80067f8 <HAL_DMA_DeInit+0x274>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d009      	beq.n	800679e <HAL_DMA_DeInit+0x21a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1b      	ldr	r2, [pc, #108]	; (80067fc <HAL_DMA_DeInit+0x278>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d004      	beq.n	800679e <HAL_DMA_DeInit+0x21a>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a19      	ldr	r2, [pc, #100]	; (8006800 <HAL_DMA_DeInit+0x27c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d132      	bne.n	8006804 <HAL_DMA_DeInit+0x280>
 800679e:	2301      	movs	r3, #1
 80067a0:	e031      	b.n	8006806 <HAL_DMA_DeInit+0x282>
 80067a2:	bf00      	nop
 80067a4:	40020010 	.word	0x40020010
 80067a8:	40020028 	.word	0x40020028
 80067ac:	40020040 	.word	0x40020040
 80067b0:	40020058 	.word	0x40020058
 80067b4:	40020070 	.word	0x40020070
 80067b8:	40020088 	.word	0x40020088
 80067bc:	400200a0 	.word	0x400200a0
 80067c0:	400200b8 	.word	0x400200b8
 80067c4:	40020410 	.word	0x40020410
 80067c8:	40020428 	.word	0x40020428
 80067cc:	40020440 	.word	0x40020440
 80067d0:	40020458 	.word	0x40020458
 80067d4:	40020470 	.word	0x40020470
 80067d8:	40020488 	.word	0x40020488
 80067dc:	400204a0 	.word	0x400204a0
 80067e0:	400204b8 	.word	0x400204b8
 80067e4:	58025408 	.word	0x58025408
 80067e8:	5802541c 	.word	0x5802541c
 80067ec:	58025430 	.word	0x58025430
 80067f0:	58025444 	.word	0x58025444
 80067f4:	58025458 	.word	0x58025458
 80067f8:	5802546c 	.word	0x5802546c
 80067fc:	58025480 	.word	0x58025480
 8006800:	58025494 	.word	0x58025494
 8006804:	2300      	movs	r3, #0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d021      	beq.n	800684e <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2200      	movs	r2, #0
 8006818:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2200      	movs	r2, #0
 8006820:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2200      	movs	r2, #0
 8006828:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2200      	movs	r2, #0
 8006830:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f001 fcea 	bl	800820c <DMA_CalcBaseAndBitshift>
 8006838:	4603      	mov	r3, r0
 800683a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006840:	f003 031f 	and.w	r3, r3, #31
 8006844:	2201      	movs	r2, #1
 8006846:	409a      	lsls	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	605a      	str	r2, [r3, #4]
 800684c:	e001      	b.n	8006852 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e04a      	b.n	80068e8 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 fd8c 	bl	8008370 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800685c:	2b00      	cmp	r3, #0
 800685e:	d008      	beq.n	8006872 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006870:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00f      	beq.n	800689a <HAL_DMA_DeInit+0x316>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b08      	cmp	r3, #8
 8006880:	d80b      	bhi.n	800689a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f001 fe0e 	bl	80084a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006898:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80068f8:	f7ff fcb6 	bl	8006268 <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e2dc      	b.n	8006ec2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d008      	beq.n	8006926 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2280      	movs	r2, #128	; 0x80
 8006918:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e2cd      	b.n	8006ec2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a76      	ldr	r2, [pc, #472]	; (8006b04 <HAL_DMA_Abort+0x214>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d04a      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a74      	ldr	r2, [pc, #464]	; (8006b08 <HAL_DMA_Abort+0x218>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d045      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a73      	ldr	r2, [pc, #460]	; (8006b0c <HAL_DMA_Abort+0x21c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d040      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a71      	ldr	r2, [pc, #452]	; (8006b10 <HAL_DMA_Abort+0x220>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d03b      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a70      	ldr	r2, [pc, #448]	; (8006b14 <HAL_DMA_Abort+0x224>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d036      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a6e      	ldr	r2, [pc, #440]	; (8006b18 <HAL_DMA_Abort+0x228>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d031      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a6d      	ldr	r2, [pc, #436]	; (8006b1c <HAL_DMA_Abort+0x22c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d02c      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a6b      	ldr	r2, [pc, #428]	; (8006b20 <HAL_DMA_Abort+0x230>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d027      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a6a      	ldr	r2, [pc, #424]	; (8006b24 <HAL_DMA_Abort+0x234>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d022      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a68      	ldr	r2, [pc, #416]	; (8006b28 <HAL_DMA_Abort+0x238>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d01d      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a67      	ldr	r2, [pc, #412]	; (8006b2c <HAL_DMA_Abort+0x23c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d018      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a65      	ldr	r2, [pc, #404]	; (8006b30 <HAL_DMA_Abort+0x240>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d013      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a64      	ldr	r2, [pc, #400]	; (8006b34 <HAL_DMA_Abort+0x244>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00e      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a62      	ldr	r2, [pc, #392]	; (8006b38 <HAL_DMA_Abort+0x248>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d009      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a61      	ldr	r2, [pc, #388]	; (8006b3c <HAL_DMA_Abort+0x24c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d004      	beq.n	80069c6 <HAL_DMA_Abort+0xd6>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a5f      	ldr	r2, [pc, #380]	; (8006b40 <HAL_DMA_Abort+0x250>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d101      	bne.n	80069ca <HAL_DMA_Abort+0xda>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <HAL_DMA_Abort+0xdc>
 80069ca:	2300      	movs	r3, #0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d013      	beq.n	80069f8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 021e 	bic.w	r2, r2, #30
 80069de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	695a      	ldr	r2, [r3, #20]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069ee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	e00a      	b.n	8006a0e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 020e 	bic.w	r2, r2, #14
 8006a06:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a3c      	ldr	r2, [pc, #240]	; (8006b04 <HAL_DMA_Abort+0x214>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d072      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a3a      	ldr	r2, [pc, #232]	; (8006b08 <HAL_DMA_Abort+0x218>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d06d      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a39      	ldr	r2, [pc, #228]	; (8006b0c <HAL_DMA_Abort+0x21c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d068      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a37      	ldr	r2, [pc, #220]	; (8006b10 <HAL_DMA_Abort+0x220>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d063      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a36      	ldr	r2, [pc, #216]	; (8006b14 <HAL_DMA_Abort+0x224>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d05e      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a34      	ldr	r2, [pc, #208]	; (8006b18 <HAL_DMA_Abort+0x228>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d059      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a33      	ldr	r2, [pc, #204]	; (8006b1c <HAL_DMA_Abort+0x22c>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d054      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a31      	ldr	r2, [pc, #196]	; (8006b20 <HAL_DMA_Abort+0x230>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d04f      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a30      	ldr	r2, [pc, #192]	; (8006b24 <HAL_DMA_Abort+0x234>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d04a      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a2e      	ldr	r2, [pc, #184]	; (8006b28 <HAL_DMA_Abort+0x238>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d045      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a2d      	ldr	r2, [pc, #180]	; (8006b2c <HAL_DMA_Abort+0x23c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d040      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a2b      	ldr	r2, [pc, #172]	; (8006b30 <HAL_DMA_Abort+0x240>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d03b      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a2a      	ldr	r2, [pc, #168]	; (8006b34 <HAL_DMA_Abort+0x244>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d036      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a28      	ldr	r2, [pc, #160]	; (8006b38 <HAL_DMA_Abort+0x248>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d031      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a27      	ldr	r2, [pc, #156]	; (8006b3c <HAL_DMA_Abort+0x24c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d02c      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a25      	ldr	r2, [pc, #148]	; (8006b40 <HAL_DMA_Abort+0x250>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d027      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a24      	ldr	r2, [pc, #144]	; (8006b44 <HAL_DMA_Abort+0x254>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d022      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a22      	ldr	r2, [pc, #136]	; (8006b48 <HAL_DMA_Abort+0x258>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d01d      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a21      	ldr	r2, [pc, #132]	; (8006b4c <HAL_DMA_Abort+0x25c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d018      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a1f      	ldr	r2, [pc, #124]	; (8006b50 <HAL_DMA_Abort+0x260>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d013      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a1e      	ldr	r2, [pc, #120]	; (8006b54 <HAL_DMA_Abort+0x264>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00e      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1c      	ldr	r2, [pc, #112]	; (8006b58 <HAL_DMA_Abort+0x268>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d009      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a1b      	ldr	r2, [pc, #108]	; (8006b5c <HAL_DMA_Abort+0x26c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d004      	beq.n	8006afe <HAL_DMA_Abort+0x20e>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a19      	ldr	r2, [pc, #100]	; (8006b60 <HAL_DMA_Abort+0x270>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d132      	bne.n	8006b64 <HAL_DMA_Abort+0x274>
 8006afe:	2301      	movs	r3, #1
 8006b00:	e031      	b.n	8006b66 <HAL_DMA_Abort+0x276>
 8006b02:	bf00      	nop
 8006b04:	40020010 	.word	0x40020010
 8006b08:	40020028 	.word	0x40020028
 8006b0c:	40020040 	.word	0x40020040
 8006b10:	40020058 	.word	0x40020058
 8006b14:	40020070 	.word	0x40020070
 8006b18:	40020088 	.word	0x40020088
 8006b1c:	400200a0 	.word	0x400200a0
 8006b20:	400200b8 	.word	0x400200b8
 8006b24:	40020410 	.word	0x40020410
 8006b28:	40020428 	.word	0x40020428
 8006b2c:	40020440 	.word	0x40020440
 8006b30:	40020458 	.word	0x40020458
 8006b34:	40020470 	.word	0x40020470
 8006b38:	40020488 	.word	0x40020488
 8006b3c:	400204a0 	.word	0x400204a0
 8006b40:	400204b8 	.word	0x400204b8
 8006b44:	58025408 	.word	0x58025408
 8006b48:	5802541c 	.word	0x5802541c
 8006b4c:	58025430 	.word	0x58025430
 8006b50:	58025444 	.word	0x58025444
 8006b54:	58025458 	.word	0x58025458
 8006b58:	5802546c 	.word	0x5802546c
 8006b5c:	58025480 	.word	0x58025480
 8006b60:	58025494 	.word	0x58025494
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d007      	beq.n	8006b7a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b78:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a6d      	ldr	r2, [pc, #436]	; (8006d34 <HAL_DMA_Abort+0x444>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d04a      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a6b      	ldr	r2, [pc, #428]	; (8006d38 <HAL_DMA_Abort+0x448>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d045      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a6a      	ldr	r2, [pc, #424]	; (8006d3c <HAL_DMA_Abort+0x44c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d040      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a68      	ldr	r2, [pc, #416]	; (8006d40 <HAL_DMA_Abort+0x450>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d03b      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a67      	ldr	r2, [pc, #412]	; (8006d44 <HAL_DMA_Abort+0x454>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d036      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a65      	ldr	r2, [pc, #404]	; (8006d48 <HAL_DMA_Abort+0x458>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d031      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a64      	ldr	r2, [pc, #400]	; (8006d4c <HAL_DMA_Abort+0x45c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d02c      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a62      	ldr	r2, [pc, #392]	; (8006d50 <HAL_DMA_Abort+0x460>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d027      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a61      	ldr	r2, [pc, #388]	; (8006d54 <HAL_DMA_Abort+0x464>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d022      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a5f      	ldr	r2, [pc, #380]	; (8006d58 <HAL_DMA_Abort+0x468>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d01d      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a5e      	ldr	r2, [pc, #376]	; (8006d5c <HAL_DMA_Abort+0x46c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d018      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a5c      	ldr	r2, [pc, #368]	; (8006d60 <HAL_DMA_Abort+0x470>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d013      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a5b      	ldr	r2, [pc, #364]	; (8006d64 <HAL_DMA_Abort+0x474>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00e      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a59      	ldr	r2, [pc, #356]	; (8006d68 <HAL_DMA_Abort+0x478>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d009      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a58      	ldr	r2, [pc, #352]	; (8006d6c <HAL_DMA_Abort+0x47c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_DMA_Abort+0x32a>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a56      	ldr	r2, [pc, #344]	; (8006d70 <HAL_DMA_Abort+0x480>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d108      	bne.n	8006c2c <HAL_DMA_Abort+0x33c>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0201 	bic.w	r2, r2, #1
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	e007      	b.n	8006c3c <HAL_DMA_Abort+0x34c>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 0201 	bic.w	r2, r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c3c:	e013      	b.n	8006c66 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c3e:	f7ff fb13 	bl	8006268 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b05      	cmp	r3, #5
 8006c4a:	d90c      	bls.n	8006c66 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2203      	movs	r2, #3
 8006c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e12d      	b.n	8006ec2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e5      	bne.n	8006c3e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a2f      	ldr	r2, [pc, #188]	; (8006d34 <HAL_DMA_Abort+0x444>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d04a      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a2d      	ldr	r2, [pc, #180]	; (8006d38 <HAL_DMA_Abort+0x448>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d045      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a2c      	ldr	r2, [pc, #176]	; (8006d3c <HAL_DMA_Abort+0x44c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d040      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a2a      	ldr	r2, [pc, #168]	; (8006d40 <HAL_DMA_Abort+0x450>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d03b      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a29      	ldr	r2, [pc, #164]	; (8006d44 <HAL_DMA_Abort+0x454>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d036      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a27      	ldr	r2, [pc, #156]	; (8006d48 <HAL_DMA_Abort+0x458>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d031      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a26      	ldr	r2, [pc, #152]	; (8006d4c <HAL_DMA_Abort+0x45c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d02c      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a24      	ldr	r2, [pc, #144]	; (8006d50 <HAL_DMA_Abort+0x460>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d027      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a23      	ldr	r2, [pc, #140]	; (8006d54 <HAL_DMA_Abort+0x464>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d022      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a21      	ldr	r2, [pc, #132]	; (8006d58 <HAL_DMA_Abort+0x468>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d01d      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a20      	ldr	r2, [pc, #128]	; (8006d5c <HAL_DMA_Abort+0x46c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d018      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a1e      	ldr	r2, [pc, #120]	; (8006d60 <HAL_DMA_Abort+0x470>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d013      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <HAL_DMA_Abort+0x474>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d00e      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a1b      	ldr	r2, [pc, #108]	; (8006d68 <HAL_DMA_Abort+0x478>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d009      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a1a      	ldr	r2, [pc, #104]	; (8006d6c <HAL_DMA_Abort+0x47c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d004      	beq.n	8006d12 <HAL_DMA_Abort+0x422>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a18      	ldr	r2, [pc, #96]	; (8006d70 <HAL_DMA_Abort+0x480>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d101      	bne.n	8006d16 <HAL_DMA_Abort+0x426>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e000      	b.n	8006d18 <HAL_DMA_Abort+0x428>
 8006d16:	2300      	movs	r3, #0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d02b      	beq.n	8006d74 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d20:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d26:	f003 031f 	and.w	r3, r3, #31
 8006d2a:	223f      	movs	r2, #63	; 0x3f
 8006d2c:	409a      	lsls	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	609a      	str	r2, [r3, #8]
 8006d32:	e02a      	b.n	8006d8a <HAL_DMA_Abort+0x49a>
 8006d34:	40020010 	.word	0x40020010
 8006d38:	40020028 	.word	0x40020028
 8006d3c:	40020040 	.word	0x40020040
 8006d40:	40020058 	.word	0x40020058
 8006d44:	40020070 	.word	0x40020070
 8006d48:	40020088 	.word	0x40020088
 8006d4c:	400200a0 	.word	0x400200a0
 8006d50:	400200b8 	.word	0x400200b8
 8006d54:	40020410 	.word	0x40020410
 8006d58:	40020428 	.word	0x40020428
 8006d5c:	40020440 	.word	0x40020440
 8006d60:	40020458 	.word	0x40020458
 8006d64:	40020470 	.word	0x40020470
 8006d68:	40020488 	.word	0x40020488
 8006d6c:	400204a0 	.word	0x400204a0
 8006d70:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d78:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	2201      	movs	r2, #1
 8006d84:	409a      	lsls	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a4f      	ldr	r2, [pc, #316]	; (8006ecc <HAL_DMA_Abort+0x5dc>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d072      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a4d      	ldr	r2, [pc, #308]	; (8006ed0 <HAL_DMA_Abort+0x5e0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d06d      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a4c      	ldr	r2, [pc, #304]	; (8006ed4 <HAL_DMA_Abort+0x5e4>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d068      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a4a      	ldr	r2, [pc, #296]	; (8006ed8 <HAL_DMA_Abort+0x5e8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d063      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a49      	ldr	r2, [pc, #292]	; (8006edc <HAL_DMA_Abort+0x5ec>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d05e      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a47      	ldr	r2, [pc, #284]	; (8006ee0 <HAL_DMA_Abort+0x5f0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d059      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a46      	ldr	r2, [pc, #280]	; (8006ee4 <HAL_DMA_Abort+0x5f4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d054      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a44      	ldr	r2, [pc, #272]	; (8006ee8 <HAL_DMA_Abort+0x5f8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d04f      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a43      	ldr	r2, [pc, #268]	; (8006eec <HAL_DMA_Abort+0x5fc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d04a      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a41      	ldr	r2, [pc, #260]	; (8006ef0 <HAL_DMA_Abort+0x600>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d045      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a40      	ldr	r2, [pc, #256]	; (8006ef4 <HAL_DMA_Abort+0x604>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d040      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a3e      	ldr	r2, [pc, #248]	; (8006ef8 <HAL_DMA_Abort+0x608>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d03b      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a3d      	ldr	r2, [pc, #244]	; (8006efc <HAL_DMA_Abort+0x60c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d036      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a3b      	ldr	r2, [pc, #236]	; (8006f00 <HAL_DMA_Abort+0x610>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d031      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a3a      	ldr	r2, [pc, #232]	; (8006f04 <HAL_DMA_Abort+0x614>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d02c      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a38      	ldr	r2, [pc, #224]	; (8006f08 <HAL_DMA_Abort+0x618>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d027      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a37      	ldr	r2, [pc, #220]	; (8006f0c <HAL_DMA_Abort+0x61c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d022      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a35      	ldr	r2, [pc, #212]	; (8006f10 <HAL_DMA_Abort+0x620>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d01d      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a34      	ldr	r2, [pc, #208]	; (8006f14 <HAL_DMA_Abort+0x624>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d018      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a32      	ldr	r2, [pc, #200]	; (8006f18 <HAL_DMA_Abort+0x628>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d013      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a31      	ldr	r2, [pc, #196]	; (8006f1c <HAL_DMA_Abort+0x62c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00e      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a2f      	ldr	r2, [pc, #188]	; (8006f20 <HAL_DMA_Abort+0x630>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d009      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a2e      	ldr	r2, [pc, #184]	; (8006f24 <HAL_DMA_Abort+0x634>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d004      	beq.n	8006e7a <HAL_DMA_Abort+0x58a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a2c      	ldr	r2, [pc, #176]	; (8006f28 <HAL_DMA_Abort+0x638>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d101      	bne.n	8006e7e <HAL_DMA_Abort+0x58e>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <HAL_DMA_Abort+0x590>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d015      	beq.n	8006eb0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e8c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00c      	beq.n	8006eb0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ea4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006eae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	40020010 	.word	0x40020010
 8006ed0:	40020028 	.word	0x40020028
 8006ed4:	40020040 	.word	0x40020040
 8006ed8:	40020058 	.word	0x40020058
 8006edc:	40020070 	.word	0x40020070
 8006ee0:	40020088 	.word	0x40020088
 8006ee4:	400200a0 	.word	0x400200a0
 8006ee8:	400200b8 	.word	0x400200b8
 8006eec:	40020410 	.word	0x40020410
 8006ef0:	40020428 	.word	0x40020428
 8006ef4:	40020440 	.word	0x40020440
 8006ef8:	40020458 	.word	0x40020458
 8006efc:	40020470 	.word	0x40020470
 8006f00:	40020488 	.word	0x40020488
 8006f04:	400204a0 	.word	0x400204a0
 8006f08:	400204b8 	.word	0x400204b8
 8006f0c:	58025408 	.word	0x58025408
 8006f10:	5802541c 	.word	0x5802541c
 8006f14:	58025430 	.word	0x58025430
 8006f18:	58025444 	.word	0x58025444
 8006f1c:	58025458 	.word	0x58025458
 8006f20:	5802546c 	.word	0x5802546c
 8006f24:	58025480 	.word	0x58025480
 8006f28:	58025494 	.word	0x58025494

08006f2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e237      	b.n	80073ae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d004      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2280      	movs	r2, #128	; 0x80
 8006f4e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e22c      	b.n	80073ae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a5c      	ldr	r2, [pc, #368]	; (80070cc <HAL_DMA_Abort_IT+0x1a0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d04a      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a5b      	ldr	r2, [pc, #364]	; (80070d0 <HAL_DMA_Abort_IT+0x1a4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d045      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a59      	ldr	r2, [pc, #356]	; (80070d4 <HAL_DMA_Abort_IT+0x1a8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d040      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a58      	ldr	r2, [pc, #352]	; (80070d8 <HAL_DMA_Abort_IT+0x1ac>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d03b      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a56      	ldr	r2, [pc, #344]	; (80070dc <HAL_DMA_Abort_IT+0x1b0>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d036      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a55      	ldr	r2, [pc, #340]	; (80070e0 <HAL_DMA_Abort_IT+0x1b4>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d031      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a53      	ldr	r2, [pc, #332]	; (80070e4 <HAL_DMA_Abort_IT+0x1b8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d02c      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a52      	ldr	r2, [pc, #328]	; (80070e8 <HAL_DMA_Abort_IT+0x1bc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d027      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a50      	ldr	r2, [pc, #320]	; (80070ec <HAL_DMA_Abort_IT+0x1c0>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d022      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a4f      	ldr	r2, [pc, #316]	; (80070f0 <HAL_DMA_Abort_IT+0x1c4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d01d      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a4d      	ldr	r2, [pc, #308]	; (80070f4 <HAL_DMA_Abort_IT+0x1c8>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d018      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a4c      	ldr	r2, [pc, #304]	; (80070f8 <HAL_DMA_Abort_IT+0x1cc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d013      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a4a      	ldr	r2, [pc, #296]	; (80070fc <HAL_DMA_Abort_IT+0x1d0>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00e      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a49      	ldr	r2, [pc, #292]	; (8007100 <HAL_DMA_Abort_IT+0x1d4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d009      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a47      	ldr	r2, [pc, #284]	; (8007104 <HAL_DMA_Abort_IT+0x1d8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d004      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0xc8>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a46      	ldr	r2, [pc, #280]	; (8007108 <HAL_DMA_Abort_IT+0x1dc>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d101      	bne.n	8006ff8 <HAL_DMA_Abort_IT+0xcc>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e000      	b.n	8006ffa <HAL_DMA_Abort_IT+0xce>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 8086 	beq.w	800710c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2204      	movs	r2, #4
 8007004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a2f      	ldr	r2, [pc, #188]	; (80070cc <HAL_DMA_Abort_IT+0x1a0>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d04a      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a2e      	ldr	r2, [pc, #184]	; (80070d0 <HAL_DMA_Abort_IT+0x1a4>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d045      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a2c      	ldr	r2, [pc, #176]	; (80070d4 <HAL_DMA_Abort_IT+0x1a8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d040      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a2b      	ldr	r2, [pc, #172]	; (80070d8 <HAL_DMA_Abort_IT+0x1ac>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d03b      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a29      	ldr	r2, [pc, #164]	; (80070dc <HAL_DMA_Abort_IT+0x1b0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d036      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a28      	ldr	r2, [pc, #160]	; (80070e0 <HAL_DMA_Abort_IT+0x1b4>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d031      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a26      	ldr	r2, [pc, #152]	; (80070e4 <HAL_DMA_Abort_IT+0x1b8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d02c      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a25      	ldr	r2, [pc, #148]	; (80070e8 <HAL_DMA_Abort_IT+0x1bc>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d027      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a23      	ldr	r2, [pc, #140]	; (80070ec <HAL_DMA_Abort_IT+0x1c0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d022      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a22      	ldr	r2, [pc, #136]	; (80070f0 <HAL_DMA_Abort_IT+0x1c4>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d01d      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a20      	ldr	r2, [pc, #128]	; (80070f4 <HAL_DMA_Abort_IT+0x1c8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d018      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1f      	ldr	r2, [pc, #124]	; (80070f8 <HAL_DMA_Abort_IT+0x1cc>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d013      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1d      	ldr	r2, [pc, #116]	; (80070fc <HAL_DMA_Abort_IT+0x1d0>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00e      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a1c      	ldr	r2, [pc, #112]	; (8007100 <HAL_DMA_Abort_IT+0x1d4>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d009      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a1a      	ldr	r2, [pc, #104]	; (8007104 <HAL_DMA_Abort_IT+0x1d8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d004      	beq.n	80070a8 <HAL_DMA_Abort_IT+0x17c>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a19      	ldr	r2, [pc, #100]	; (8007108 <HAL_DMA_Abort_IT+0x1dc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d108      	bne.n	80070ba <HAL_DMA_Abort_IT+0x18e>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0201 	bic.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	e178      	b.n	80073ac <HAL_DMA_Abort_IT+0x480>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0201 	bic.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	e16f      	b.n	80073ac <HAL_DMA_Abort_IT+0x480>
 80070cc:	40020010 	.word	0x40020010
 80070d0:	40020028 	.word	0x40020028
 80070d4:	40020040 	.word	0x40020040
 80070d8:	40020058 	.word	0x40020058
 80070dc:	40020070 	.word	0x40020070
 80070e0:	40020088 	.word	0x40020088
 80070e4:	400200a0 	.word	0x400200a0
 80070e8:	400200b8 	.word	0x400200b8
 80070ec:	40020410 	.word	0x40020410
 80070f0:	40020428 	.word	0x40020428
 80070f4:	40020440 	.word	0x40020440
 80070f8:	40020458 	.word	0x40020458
 80070fc:	40020470 	.word	0x40020470
 8007100:	40020488 	.word	0x40020488
 8007104:	400204a0 	.word	0x400204a0
 8007108:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 020e 	bic.w	r2, r2, #14
 800711a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a6c      	ldr	r2, [pc, #432]	; (80072d4 <HAL_DMA_Abort_IT+0x3a8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d04a      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a6b      	ldr	r2, [pc, #428]	; (80072d8 <HAL_DMA_Abort_IT+0x3ac>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d045      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a69      	ldr	r2, [pc, #420]	; (80072dc <HAL_DMA_Abort_IT+0x3b0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d040      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a68      	ldr	r2, [pc, #416]	; (80072e0 <HAL_DMA_Abort_IT+0x3b4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d03b      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a66      	ldr	r2, [pc, #408]	; (80072e4 <HAL_DMA_Abort_IT+0x3b8>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d036      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a65      	ldr	r2, [pc, #404]	; (80072e8 <HAL_DMA_Abort_IT+0x3bc>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d031      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a63      	ldr	r2, [pc, #396]	; (80072ec <HAL_DMA_Abort_IT+0x3c0>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d02c      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a62      	ldr	r2, [pc, #392]	; (80072f0 <HAL_DMA_Abort_IT+0x3c4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d027      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a60      	ldr	r2, [pc, #384]	; (80072f4 <HAL_DMA_Abort_IT+0x3c8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d022      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a5f      	ldr	r2, [pc, #380]	; (80072f8 <HAL_DMA_Abort_IT+0x3cc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d01d      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a5d      	ldr	r2, [pc, #372]	; (80072fc <HAL_DMA_Abort_IT+0x3d0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d018      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a5c      	ldr	r2, [pc, #368]	; (8007300 <HAL_DMA_Abort_IT+0x3d4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d013      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a5a      	ldr	r2, [pc, #360]	; (8007304 <HAL_DMA_Abort_IT+0x3d8>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d00e      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a59      	ldr	r2, [pc, #356]	; (8007308 <HAL_DMA_Abort_IT+0x3dc>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d009      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a57      	ldr	r2, [pc, #348]	; (800730c <HAL_DMA_Abort_IT+0x3e0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d004      	beq.n	80071bc <HAL_DMA_Abort_IT+0x290>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a56      	ldr	r2, [pc, #344]	; (8007310 <HAL_DMA_Abort_IT+0x3e4>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d108      	bne.n	80071ce <HAL_DMA_Abort_IT+0x2a2>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f022 0201 	bic.w	r2, r2, #1
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	e007      	b.n	80071de <HAL_DMA_Abort_IT+0x2b2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0201 	bic.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a3c      	ldr	r2, [pc, #240]	; (80072d4 <HAL_DMA_Abort_IT+0x3a8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d072      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a3a      	ldr	r2, [pc, #232]	; (80072d8 <HAL_DMA_Abort_IT+0x3ac>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d06d      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a39      	ldr	r2, [pc, #228]	; (80072dc <HAL_DMA_Abort_IT+0x3b0>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d068      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a37      	ldr	r2, [pc, #220]	; (80072e0 <HAL_DMA_Abort_IT+0x3b4>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d063      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a36      	ldr	r2, [pc, #216]	; (80072e4 <HAL_DMA_Abort_IT+0x3b8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d05e      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a34      	ldr	r2, [pc, #208]	; (80072e8 <HAL_DMA_Abort_IT+0x3bc>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d059      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a33      	ldr	r2, [pc, #204]	; (80072ec <HAL_DMA_Abort_IT+0x3c0>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d054      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a31      	ldr	r2, [pc, #196]	; (80072f0 <HAL_DMA_Abort_IT+0x3c4>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d04f      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a30      	ldr	r2, [pc, #192]	; (80072f4 <HAL_DMA_Abort_IT+0x3c8>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d04a      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a2e      	ldr	r2, [pc, #184]	; (80072f8 <HAL_DMA_Abort_IT+0x3cc>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d045      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a2d      	ldr	r2, [pc, #180]	; (80072fc <HAL_DMA_Abort_IT+0x3d0>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d040      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a2b      	ldr	r2, [pc, #172]	; (8007300 <HAL_DMA_Abort_IT+0x3d4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d03b      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a2a      	ldr	r2, [pc, #168]	; (8007304 <HAL_DMA_Abort_IT+0x3d8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d036      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a28      	ldr	r2, [pc, #160]	; (8007308 <HAL_DMA_Abort_IT+0x3dc>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d031      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a27      	ldr	r2, [pc, #156]	; (800730c <HAL_DMA_Abort_IT+0x3e0>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d02c      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a25      	ldr	r2, [pc, #148]	; (8007310 <HAL_DMA_Abort_IT+0x3e4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d027      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a24      	ldr	r2, [pc, #144]	; (8007314 <HAL_DMA_Abort_IT+0x3e8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d022      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a22      	ldr	r2, [pc, #136]	; (8007318 <HAL_DMA_Abort_IT+0x3ec>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d01d      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a21      	ldr	r2, [pc, #132]	; (800731c <HAL_DMA_Abort_IT+0x3f0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d018      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1f      	ldr	r2, [pc, #124]	; (8007320 <HAL_DMA_Abort_IT+0x3f4>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d013      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a1e      	ldr	r2, [pc, #120]	; (8007324 <HAL_DMA_Abort_IT+0x3f8>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00e      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a1c      	ldr	r2, [pc, #112]	; (8007328 <HAL_DMA_Abort_IT+0x3fc>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d009      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a1b      	ldr	r2, [pc, #108]	; (800732c <HAL_DMA_Abort_IT+0x400>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d004      	beq.n	80072ce <HAL_DMA_Abort_IT+0x3a2>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a19      	ldr	r2, [pc, #100]	; (8007330 <HAL_DMA_Abort_IT+0x404>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d132      	bne.n	8007334 <HAL_DMA_Abort_IT+0x408>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e031      	b.n	8007336 <HAL_DMA_Abort_IT+0x40a>
 80072d2:	bf00      	nop
 80072d4:	40020010 	.word	0x40020010
 80072d8:	40020028 	.word	0x40020028
 80072dc:	40020040 	.word	0x40020040
 80072e0:	40020058 	.word	0x40020058
 80072e4:	40020070 	.word	0x40020070
 80072e8:	40020088 	.word	0x40020088
 80072ec:	400200a0 	.word	0x400200a0
 80072f0:	400200b8 	.word	0x400200b8
 80072f4:	40020410 	.word	0x40020410
 80072f8:	40020428 	.word	0x40020428
 80072fc:	40020440 	.word	0x40020440
 8007300:	40020458 	.word	0x40020458
 8007304:	40020470 	.word	0x40020470
 8007308:	40020488 	.word	0x40020488
 800730c:	400204a0 	.word	0x400204a0
 8007310:	400204b8 	.word	0x400204b8
 8007314:	58025408 	.word	0x58025408
 8007318:	5802541c 	.word	0x5802541c
 800731c:	58025430 	.word	0x58025430
 8007320:	58025444 	.word	0x58025444
 8007324:	58025458 	.word	0x58025458
 8007328:	5802546c 	.word	0x5802546c
 800732c:	58025480 	.word	0x58025480
 8007330:	58025494 	.word	0x58025494
 8007334:	2300      	movs	r3, #0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d028      	beq.n	800738c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007348:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800734e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007354:	f003 031f 	and.w	r3, r3, #31
 8007358:	2201      	movs	r2, #1
 800735a:	409a      	lsls	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007368:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00c      	beq.n	800738c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800737c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007380:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800738a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop

080073b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08a      	sub	sp, #40	; 0x28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80073c4:	4b67      	ldr	r3, [pc, #412]	; (8007564 <HAL_DMA_IRQHandler+0x1ac>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a67      	ldr	r2, [pc, #412]	; (8007568 <HAL_DMA_IRQHandler+0x1b0>)
 80073ca:	fba2 2303 	umull	r2, r3, r2, r3
 80073ce:	0a9b      	lsrs	r3, r3, #10
 80073d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a5f      	ldr	r2, [pc, #380]	; (800756c <HAL_DMA_IRQHandler+0x1b4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d04a      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a5d      	ldr	r2, [pc, #372]	; (8007570 <HAL_DMA_IRQHandler+0x1b8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d045      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a5c      	ldr	r2, [pc, #368]	; (8007574 <HAL_DMA_IRQHandler+0x1bc>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d040      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a5a      	ldr	r2, [pc, #360]	; (8007578 <HAL_DMA_IRQHandler+0x1c0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d03b      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a59      	ldr	r2, [pc, #356]	; (800757c <HAL_DMA_IRQHandler+0x1c4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d036      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a57      	ldr	r2, [pc, #348]	; (8007580 <HAL_DMA_IRQHandler+0x1c8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d031      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a56      	ldr	r2, [pc, #344]	; (8007584 <HAL_DMA_IRQHandler+0x1cc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d02c      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a54      	ldr	r2, [pc, #336]	; (8007588 <HAL_DMA_IRQHandler+0x1d0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d027      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a53      	ldr	r2, [pc, #332]	; (800758c <HAL_DMA_IRQHandler+0x1d4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d022      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a51      	ldr	r2, [pc, #324]	; (8007590 <HAL_DMA_IRQHandler+0x1d8>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d01d      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a50      	ldr	r2, [pc, #320]	; (8007594 <HAL_DMA_IRQHandler+0x1dc>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d018      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a4e      	ldr	r2, [pc, #312]	; (8007598 <HAL_DMA_IRQHandler+0x1e0>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d013      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a4d      	ldr	r2, [pc, #308]	; (800759c <HAL_DMA_IRQHandler+0x1e4>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00e      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a4b      	ldr	r2, [pc, #300]	; (80075a0 <HAL_DMA_IRQHandler+0x1e8>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d009      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a4a      	ldr	r2, [pc, #296]	; (80075a4 <HAL_DMA_IRQHandler+0x1ec>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d004      	beq.n	800748a <HAL_DMA_IRQHandler+0xd2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a48      	ldr	r2, [pc, #288]	; (80075a8 <HAL_DMA_IRQHandler+0x1f0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d101      	bne.n	800748e <HAL_DMA_IRQHandler+0xd6>
 800748a:	2301      	movs	r3, #1
 800748c:	e000      	b.n	8007490 <HAL_DMA_IRQHandler+0xd8>
 800748e:	2300      	movs	r3, #0
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 842b 	beq.w	8007cec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800749a:	f003 031f 	and.w	r3, r3, #31
 800749e:	2208      	movs	r2, #8
 80074a0:	409a      	lsls	r2, r3
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	4013      	ands	r3, r2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 80a2 	beq.w	80075f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a2e      	ldr	r2, [pc, #184]	; (800756c <HAL_DMA_IRQHandler+0x1b4>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d04a      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a2d      	ldr	r2, [pc, #180]	; (8007570 <HAL_DMA_IRQHandler+0x1b8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d045      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a2b      	ldr	r2, [pc, #172]	; (8007574 <HAL_DMA_IRQHandler+0x1bc>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d040      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a2a      	ldr	r2, [pc, #168]	; (8007578 <HAL_DMA_IRQHandler+0x1c0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d03b      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a28      	ldr	r2, [pc, #160]	; (800757c <HAL_DMA_IRQHandler+0x1c4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d036      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a27      	ldr	r2, [pc, #156]	; (8007580 <HAL_DMA_IRQHandler+0x1c8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d031      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a25      	ldr	r2, [pc, #148]	; (8007584 <HAL_DMA_IRQHandler+0x1cc>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d02c      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a24      	ldr	r2, [pc, #144]	; (8007588 <HAL_DMA_IRQHandler+0x1d0>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d027      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a22      	ldr	r2, [pc, #136]	; (800758c <HAL_DMA_IRQHandler+0x1d4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d022      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a21      	ldr	r2, [pc, #132]	; (8007590 <HAL_DMA_IRQHandler+0x1d8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d01d      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1f      	ldr	r2, [pc, #124]	; (8007594 <HAL_DMA_IRQHandler+0x1dc>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d018      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a1e      	ldr	r2, [pc, #120]	; (8007598 <HAL_DMA_IRQHandler+0x1e0>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d013      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a1c      	ldr	r2, [pc, #112]	; (800759c <HAL_DMA_IRQHandler+0x1e4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00e      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a1b      	ldr	r2, [pc, #108]	; (80075a0 <HAL_DMA_IRQHandler+0x1e8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d009      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a19      	ldr	r2, [pc, #100]	; (80075a4 <HAL_DMA_IRQHandler+0x1ec>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d004      	beq.n	800754c <HAL_DMA_IRQHandler+0x194>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a18      	ldr	r2, [pc, #96]	; (80075a8 <HAL_DMA_IRQHandler+0x1f0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d12f      	bne.n	80075ac <HAL_DMA_IRQHandler+0x1f4>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0304 	and.w	r3, r3, #4
 8007556:	2b00      	cmp	r3, #0
 8007558:	bf14      	ite	ne
 800755a:	2301      	movne	r3, #1
 800755c:	2300      	moveq	r3, #0
 800755e:	b2db      	uxtb	r3, r3
 8007560:	e02e      	b.n	80075c0 <HAL_DMA_IRQHandler+0x208>
 8007562:	bf00      	nop
 8007564:	24000004 	.word	0x24000004
 8007568:	1b4e81b5 	.word	0x1b4e81b5
 800756c:	40020010 	.word	0x40020010
 8007570:	40020028 	.word	0x40020028
 8007574:	40020040 	.word	0x40020040
 8007578:	40020058 	.word	0x40020058
 800757c:	40020070 	.word	0x40020070
 8007580:	40020088 	.word	0x40020088
 8007584:	400200a0 	.word	0x400200a0
 8007588:	400200b8 	.word	0x400200b8
 800758c:	40020410 	.word	0x40020410
 8007590:	40020428 	.word	0x40020428
 8007594:	40020440 	.word	0x40020440
 8007598:	40020458 	.word	0x40020458
 800759c:	40020470 	.word	0x40020470
 80075a0:	40020488 	.word	0x40020488
 80075a4:	400204a0 	.word	0x400204a0
 80075a8:	400204b8 	.word	0x400204b8
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0308 	and.w	r3, r3, #8
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	bf14      	ite	ne
 80075ba:	2301      	movne	r3, #1
 80075bc:	2300      	moveq	r3, #0
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d015      	beq.n	80075f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0204 	bic.w	r2, r2, #4
 80075d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d8:	f003 031f 	and.w	r3, r3, #31
 80075dc:	2208      	movs	r2, #8
 80075de:	409a      	lsls	r2, r3
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e8:	f043 0201 	orr.w	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f4:	f003 031f 	and.w	r3, r3, #31
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	fa22 f303 	lsr.w	r3, r2, r3
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d06e      	beq.n	80076e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a69      	ldr	r2, [pc, #420]	; (80077b0 <HAL_DMA_IRQHandler+0x3f8>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d04a      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a67      	ldr	r2, [pc, #412]	; (80077b4 <HAL_DMA_IRQHandler+0x3fc>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d045      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a66      	ldr	r2, [pc, #408]	; (80077b8 <HAL_DMA_IRQHandler+0x400>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d040      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a64      	ldr	r2, [pc, #400]	; (80077bc <HAL_DMA_IRQHandler+0x404>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d03b      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a63      	ldr	r2, [pc, #396]	; (80077c0 <HAL_DMA_IRQHandler+0x408>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d036      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a61      	ldr	r2, [pc, #388]	; (80077c4 <HAL_DMA_IRQHandler+0x40c>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d031      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a60      	ldr	r2, [pc, #384]	; (80077c8 <HAL_DMA_IRQHandler+0x410>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d02c      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a5e      	ldr	r2, [pc, #376]	; (80077cc <HAL_DMA_IRQHandler+0x414>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d027      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a5d      	ldr	r2, [pc, #372]	; (80077d0 <HAL_DMA_IRQHandler+0x418>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d022      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a5b      	ldr	r2, [pc, #364]	; (80077d4 <HAL_DMA_IRQHandler+0x41c>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d01d      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a5a      	ldr	r2, [pc, #360]	; (80077d8 <HAL_DMA_IRQHandler+0x420>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d018      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a58      	ldr	r2, [pc, #352]	; (80077dc <HAL_DMA_IRQHandler+0x424>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d013      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a57      	ldr	r2, [pc, #348]	; (80077e0 <HAL_DMA_IRQHandler+0x428>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00e      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a55      	ldr	r2, [pc, #340]	; (80077e4 <HAL_DMA_IRQHandler+0x42c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d009      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a54      	ldr	r2, [pc, #336]	; (80077e8 <HAL_DMA_IRQHandler+0x430>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d004      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x2ee>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a52      	ldr	r2, [pc, #328]	; (80077ec <HAL_DMA_IRQHandler+0x434>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d10a      	bne.n	80076bc <HAL_DMA_IRQHandler+0x304>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	bf14      	ite	ne
 80076b4:	2301      	movne	r3, #1
 80076b6:	2300      	moveq	r3, #0
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	e003      	b.n	80076c4 <HAL_DMA_IRQHandler+0x30c>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2300      	movs	r3, #0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00d      	beq.n	80076e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076cc:	f003 031f 	and.w	r3, r3, #31
 80076d0:	2201      	movs	r2, #1
 80076d2:	409a      	lsls	r2, r3
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076dc:	f043 0202 	orr.w	r2, r3, #2
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e8:	f003 031f 	and.w	r3, r3, #31
 80076ec:	2204      	movs	r2, #4
 80076ee:	409a      	lsls	r2, r3
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	4013      	ands	r3, r2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 808f 	beq.w	8007818 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a2c      	ldr	r2, [pc, #176]	; (80077b0 <HAL_DMA_IRQHandler+0x3f8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d04a      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a2a      	ldr	r2, [pc, #168]	; (80077b4 <HAL_DMA_IRQHandler+0x3fc>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d045      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a29      	ldr	r2, [pc, #164]	; (80077b8 <HAL_DMA_IRQHandler+0x400>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d040      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a27      	ldr	r2, [pc, #156]	; (80077bc <HAL_DMA_IRQHandler+0x404>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d03b      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a26      	ldr	r2, [pc, #152]	; (80077c0 <HAL_DMA_IRQHandler+0x408>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d036      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a24      	ldr	r2, [pc, #144]	; (80077c4 <HAL_DMA_IRQHandler+0x40c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d031      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a23      	ldr	r2, [pc, #140]	; (80077c8 <HAL_DMA_IRQHandler+0x410>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d02c      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a21      	ldr	r2, [pc, #132]	; (80077cc <HAL_DMA_IRQHandler+0x414>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d027      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a20      	ldr	r2, [pc, #128]	; (80077d0 <HAL_DMA_IRQHandler+0x418>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d022      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a1e      	ldr	r2, [pc, #120]	; (80077d4 <HAL_DMA_IRQHandler+0x41c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d01d      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a1d      	ldr	r2, [pc, #116]	; (80077d8 <HAL_DMA_IRQHandler+0x420>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d018      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a1b      	ldr	r2, [pc, #108]	; (80077dc <HAL_DMA_IRQHandler+0x424>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d013      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a1a      	ldr	r2, [pc, #104]	; (80077e0 <HAL_DMA_IRQHandler+0x428>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00e      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a18      	ldr	r2, [pc, #96]	; (80077e4 <HAL_DMA_IRQHandler+0x42c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d009      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a17      	ldr	r2, [pc, #92]	; (80077e8 <HAL_DMA_IRQHandler+0x430>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d004      	beq.n	800779a <HAL_DMA_IRQHandler+0x3e2>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a15      	ldr	r2, [pc, #84]	; (80077ec <HAL_DMA_IRQHandler+0x434>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d12a      	bne.n	80077f0 <HAL_DMA_IRQHandler+0x438>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	bf14      	ite	ne
 80077a8:	2301      	movne	r3, #1
 80077aa:	2300      	moveq	r3, #0
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	e023      	b.n	80077f8 <HAL_DMA_IRQHandler+0x440>
 80077b0:	40020010 	.word	0x40020010
 80077b4:	40020028 	.word	0x40020028
 80077b8:	40020040 	.word	0x40020040
 80077bc:	40020058 	.word	0x40020058
 80077c0:	40020070 	.word	0x40020070
 80077c4:	40020088 	.word	0x40020088
 80077c8:	400200a0 	.word	0x400200a0
 80077cc:	400200b8 	.word	0x400200b8
 80077d0:	40020410 	.word	0x40020410
 80077d4:	40020428 	.word	0x40020428
 80077d8:	40020440 	.word	0x40020440
 80077dc:	40020458 	.word	0x40020458
 80077e0:	40020470 	.word	0x40020470
 80077e4:	40020488 	.word	0x40020488
 80077e8:	400204a0 	.word	0x400204a0
 80077ec:	400204b8 	.word	0x400204b8
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2300      	movs	r3, #0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00d      	beq.n	8007818 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	2204      	movs	r2, #4
 8007806:	409a      	lsls	r2, r3
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007810:	f043 0204 	orr.w	r2, r3, #4
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800781c:	f003 031f 	and.w	r3, r3, #31
 8007820:	2210      	movs	r2, #16
 8007822:	409a      	lsls	r2, r3
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	4013      	ands	r3, r2
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 80a6 	beq.w	800797a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a85      	ldr	r2, [pc, #532]	; (8007a48 <HAL_DMA_IRQHandler+0x690>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d04a      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a83      	ldr	r2, [pc, #524]	; (8007a4c <HAL_DMA_IRQHandler+0x694>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d045      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a82      	ldr	r2, [pc, #520]	; (8007a50 <HAL_DMA_IRQHandler+0x698>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d040      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a80      	ldr	r2, [pc, #512]	; (8007a54 <HAL_DMA_IRQHandler+0x69c>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d03b      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a7f      	ldr	r2, [pc, #508]	; (8007a58 <HAL_DMA_IRQHandler+0x6a0>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d036      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a7d      	ldr	r2, [pc, #500]	; (8007a5c <HAL_DMA_IRQHandler+0x6a4>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d031      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a7c      	ldr	r2, [pc, #496]	; (8007a60 <HAL_DMA_IRQHandler+0x6a8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d02c      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a7a      	ldr	r2, [pc, #488]	; (8007a64 <HAL_DMA_IRQHandler+0x6ac>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d027      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a79      	ldr	r2, [pc, #484]	; (8007a68 <HAL_DMA_IRQHandler+0x6b0>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d022      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a77      	ldr	r2, [pc, #476]	; (8007a6c <HAL_DMA_IRQHandler+0x6b4>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d01d      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a76      	ldr	r2, [pc, #472]	; (8007a70 <HAL_DMA_IRQHandler+0x6b8>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d018      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a74      	ldr	r2, [pc, #464]	; (8007a74 <HAL_DMA_IRQHandler+0x6bc>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d013      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a73      	ldr	r2, [pc, #460]	; (8007a78 <HAL_DMA_IRQHandler+0x6c0>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00e      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a71      	ldr	r2, [pc, #452]	; (8007a7c <HAL_DMA_IRQHandler+0x6c4>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d009      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a70      	ldr	r2, [pc, #448]	; (8007a80 <HAL_DMA_IRQHandler+0x6c8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d004      	beq.n	80078ce <HAL_DMA_IRQHandler+0x516>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a6e      	ldr	r2, [pc, #440]	; (8007a84 <HAL_DMA_IRQHandler+0x6cc>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d10a      	bne.n	80078e4 <HAL_DMA_IRQHandler+0x52c>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0308 	and.w	r3, r3, #8
 80078d8:	2b00      	cmp	r3, #0
 80078da:	bf14      	ite	ne
 80078dc:	2301      	movne	r3, #1
 80078de:	2300      	moveq	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	e009      	b.n	80078f8 <HAL_DMA_IRQHandler+0x540>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bf14      	ite	ne
 80078f2:	2301      	movne	r3, #1
 80078f4:	2300      	moveq	r3, #0
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d03e      	beq.n	800797a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007900:	f003 031f 	and.w	r3, r3, #31
 8007904:	2210      	movs	r2, #16
 8007906:	409a      	lsls	r2, r3
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d018      	beq.n	800794c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d108      	bne.n	800793a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792c:	2b00      	cmp	r3, #0
 800792e:	d024      	beq.n	800797a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4798      	blx	r3
 8007938:	e01f      	b.n	800797a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800793e:	2b00      	cmp	r3, #0
 8007940:	d01b      	beq.n	800797a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	4798      	blx	r3
 800794a:	e016      	b.n	800797a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007956:	2b00      	cmp	r3, #0
 8007958:	d107      	bne.n	800796a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f022 0208 	bic.w	r2, r2, #8
 8007968:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800797e:	f003 031f 	and.w	r3, r3, #31
 8007982:	2220      	movs	r2, #32
 8007984:	409a      	lsls	r2, r3
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	4013      	ands	r3, r2
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 8110 	beq.w	8007bb0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a2c      	ldr	r2, [pc, #176]	; (8007a48 <HAL_DMA_IRQHandler+0x690>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d04a      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a2b      	ldr	r2, [pc, #172]	; (8007a4c <HAL_DMA_IRQHandler+0x694>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d045      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a29      	ldr	r2, [pc, #164]	; (8007a50 <HAL_DMA_IRQHandler+0x698>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d040      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a28      	ldr	r2, [pc, #160]	; (8007a54 <HAL_DMA_IRQHandler+0x69c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d03b      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a26      	ldr	r2, [pc, #152]	; (8007a58 <HAL_DMA_IRQHandler+0x6a0>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d036      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a25      	ldr	r2, [pc, #148]	; (8007a5c <HAL_DMA_IRQHandler+0x6a4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d031      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a23      	ldr	r2, [pc, #140]	; (8007a60 <HAL_DMA_IRQHandler+0x6a8>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d02c      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a22      	ldr	r2, [pc, #136]	; (8007a64 <HAL_DMA_IRQHandler+0x6ac>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d027      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a20      	ldr	r2, [pc, #128]	; (8007a68 <HAL_DMA_IRQHandler+0x6b0>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d022      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a1f      	ldr	r2, [pc, #124]	; (8007a6c <HAL_DMA_IRQHandler+0x6b4>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d01d      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a1d      	ldr	r2, [pc, #116]	; (8007a70 <HAL_DMA_IRQHandler+0x6b8>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d018      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a1c      	ldr	r2, [pc, #112]	; (8007a74 <HAL_DMA_IRQHandler+0x6bc>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d013      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a1a      	ldr	r2, [pc, #104]	; (8007a78 <HAL_DMA_IRQHandler+0x6c0>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00e      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a19      	ldr	r2, [pc, #100]	; (8007a7c <HAL_DMA_IRQHandler+0x6c4>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d009      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a17      	ldr	r2, [pc, #92]	; (8007a80 <HAL_DMA_IRQHandler+0x6c8>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d004      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x678>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a16      	ldr	r2, [pc, #88]	; (8007a84 <HAL_DMA_IRQHandler+0x6cc>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d12b      	bne.n	8007a88 <HAL_DMA_IRQHandler+0x6d0>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	bf14      	ite	ne
 8007a3e:	2301      	movne	r3, #1
 8007a40:	2300      	moveq	r3, #0
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	e02a      	b.n	8007a9c <HAL_DMA_IRQHandler+0x6e4>
 8007a46:	bf00      	nop
 8007a48:	40020010 	.word	0x40020010
 8007a4c:	40020028 	.word	0x40020028
 8007a50:	40020040 	.word	0x40020040
 8007a54:	40020058 	.word	0x40020058
 8007a58:	40020070 	.word	0x40020070
 8007a5c:	40020088 	.word	0x40020088
 8007a60:	400200a0 	.word	0x400200a0
 8007a64:	400200b8 	.word	0x400200b8
 8007a68:	40020410 	.word	0x40020410
 8007a6c:	40020428 	.word	0x40020428
 8007a70:	40020440 	.word	0x40020440
 8007a74:	40020458 	.word	0x40020458
 8007a78:	40020470 	.word	0x40020470
 8007a7c:	40020488 	.word	0x40020488
 8007a80:	400204a0 	.word	0x400204a0
 8007a84:	400204b8 	.word	0x400204b8
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	bf14      	ite	ne
 8007a96:	2301      	movne	r3, #1
 8007a98:	2300      	moveq	r3, #0
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 8087 	beq.w	8007bb0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa6:	f003 031f 	and.w	r3, r3, #31
 8007aaa:	2220      	movs	r2, #32
 8007aac:	409a      	lsls	r2, r3
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	d139      	bne.n	8007b32 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0216 	bic.w	r2, r2, #22
 8007acc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	695a      	ldr	r2, [r3, #20]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007adc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d103      	bne.n	8007aee <HAL_DMA_IRQHandler+0x736>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d007      	beq.n	8007afe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 0208 	bic.w	r2, r2, #8
 8007afc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b02:	f003 031f 	and.w	r3, r3, #31
 8007b06:	223f      	movs	r2, #63	; 0x3f
 8007b08:	409a      	lsls	r2, r3
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 834a 	beq.w	80081bc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4798      	blx	r3
          }
          return;
 8007b30:	e344      	b.n	80081bc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d018      	beq.n	8007b72 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d108      	bne.n	8007b60 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d02c      	beq.n	8007bb0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	4798      	blx	r3
 8007b5e:	e027      	b.n	8007bb0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d023      	beq.n	8007bb0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	4798      	blx	r3
 8007b70:	e01e      	b.n	8007bb0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10f      	bne.n	8007ba0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0210 	bic.w	r2, r2, #16
 8007b8e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 8306 	beq.w	80081c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 8088 	beq.w	8007cd8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2204      	movs	r2, #4
 8007bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a7a      	ldr	r2, [pc, #488]	; (8007dc0 <HAL_DMA_IRQHandler+0xa08>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d04a      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a79      	ldr	r2, [pc, #484]	; (8007dc4 <HAL_DMA_IRQHandler+0xa0c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d045      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a77      	ldr	r2, [pc, #476]	; (8007dc8 <HAL_DMA_IRQHandler+0xa10>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d040      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a76      	ldr	r2, [pc, #472]	; (8007dcc <HAL_DMA_IRQHandler+0xa14>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d03b      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a74      	ldr	r2, [pc, #464]	; (8007dd0 <HAL_DMA_IRQHandler+0xa18>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d036      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a73      	ldr	r2, [pc, #460]	; (8007dd4 <HAL_DMA_IRQHandler+0xa1c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d031      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a71      	ldr	r2, [pc, #452]	; (8007dd8 <HAL_DMA_IRQHandler+0xa20>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d02c      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a70      	ldr	r2, [pc, #448]	; (8007ddc <HAL_DMA_IRQHandler+0xa24>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d027      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a6e      	ldr	r2, [pc, #440]	; (8007de0 <HAL_DMA_IRQHandler+0xa28>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d022      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a6d      	ldr	r2, [pc, #436]	; (8007de4 <HAL_DMA_IRQHandler+0xa2c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d01d      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a6b      	ldr	r2, [pc, #428]	; (8007de8 <HAL_DMA_IRQHandler+0xa30>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d018      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a6a      	ldr	r2, [pc, #424]	; (8007dec <HAL_DMA_IRQHandler+0xa34>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d013      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a68      	ldr	r2, [pc, #416]	; (8007df0 <HAL_DMA_IRQHandler+0xa38>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00e      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a67      	ldr	r2, [pc, #412]	; (8007df4 <HAL_DMA_IRQHandler+0xa3c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d009      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a65      	ldr	r2, [pc, #404]	; (8007df8 <HAL_DMA_IRQHandler+0xa40>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d004      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x8b8>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a64      	ldr	r2, [pc, #400]	; (8007dfc <HAL_DMA_IRQHandler+0xa44>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d108      	bne.n	8007c82 <HAL_DMA_IRQHandler+0x8ca>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0201 	bic.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]
 8007c80:	e007      	b.n	8007c92 <HAL_DMA_IRQHandler+0x8da>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0201 	bic.w	r2, r2, #1
 8007c90:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3301      	adds	r3, #1
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d307      	bcc.n	8007cae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1f2      	bne.n	8007c92 <HAL_DMA_IRQHandler+0x8da>
 8007cac:	e000      	b.n	8007cb0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007cae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d004      	beq.n	8007cc8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2203      	movs	r2, #3
 8007cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007cc6:	e003      	b.n	8007cd0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 8272 	beq.w	80081c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
 8007cea:	e26c      	b.n	80081c6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a43      	ldr	r2, [pc, #268]	; (8007e00 <HAL_DMA_IRQHandler+0xa48>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d022      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x984>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a42      	ldr	r2, [pc, #264]	; (8007e04 <HAL_DMA_IRQHandler+0xa4c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d01d      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x984>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a40      	ldr	r2, [pc, #256]	; (8007e08 <HAL_DMA_IRQHandler+0xa50>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d018      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x984>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a3f      	ldr	r2, [pc, #252]	; (8007e0c <HAL_DMA_IRQHandler+0xa54>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d013      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x984>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a3d      	ldr	r2, [pc, #244]	; (8007e10 <HAL_DMA_IRQHandler+0xa58>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d00e      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x984>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a3c      	ldr	r2, [pc, #240]	; (8007e14 <HAL_DMA_IRQHandler+0xa5c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d009      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x984>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a3a      	ldr	r2, [pc, #232]	; (8007e18 <HAL_DMA_IRQHandler+0xa60>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d004      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x984>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a39      	ldr	r2, [pc, #228]	; (8007e1c <HAL_DMA_IRQHandler+0xa64>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d101      	bne.n	8007d40 <HAL_DMA_IRQHandler+0x988>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e000      	b.n	8007d42 <HAL_DMA_IRQHandler+0x98a>
 8007d40:	2300      	movs	r3, #0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f000 823f 	beq.w	80081c6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d54:	f003 031f 	and.w	r3, r3, #31
 8007d58:	2204      	movs	r2, #4
 8007d5a:	409a      	lsls	r2, r3
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	4013      	ands	r3, r2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 80cd 	beq.w	8007f00 <HAL_DMA_IRQHandler+0xb48>
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 80c7 	beq.w	8007f00 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d76:	f003 031f 	and.w	r3, r3, #31
 8007d7a:	2204      	movs	r2, #4
 8007d7c:	409a      	lsls	r2, r3
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d049      	beq.n	8007e20 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d109      	bne.n	8007daa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 8210 	beq.w	80081c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007da8:	e20a      	b.n	80081c0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 8206 	beq.w	80081c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dbc:	e200      	b.n	80081c0 <HAL_DMA_IRQHandler+0xe08>
 8007dbe:	bf00      	nop
 8007dc0:	40020010 	.word	0x40020010
 8007dc4:	40020028 	.word	0x40020028
 8007dc8:	40020040 	.word	0x40020040
 8007dcc:	40020058 	.word	0x40020058
 8007dd0:	40020070 	.word	0x40020070
 8007dd4:	40020088 	.word	0x40020088
 8007dd8:	400200a0 	.word	0x400200a0
 8007ddc:	400200b8 	.word	0x400200b8
 8007de0:	40020410 	.word	0x40020410
 8007de4:	40020428 	.word	0x40020428
 8007de8:	40020440 	.word	0x40020440
 8007dec:	40020458 	.word	0x40020458
 8007df0:	40020470 	.word	0x40020470
 8007df4:	40020488 	.word	0x40020488
 8007df8:	400204a0 	.word	0x400204a0
 8007dfc:	400204b8 	.word	0x400204b8
 8007e00:	58025408 	.word	0x58025408
 8007e04:	5802541c 	.word	0x5802541c
 8007e08:	58025430 	.word	0x58025430
 8007e0c:	58025444 	.word	0x58025444
 8007e10:	58025458 	.word	0x58025458
 8007e14:	5802546c 	.word	0x5802546c
 8007e18:	58025480 	.word	0x58025480
 8007e1c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f003 0320 	and.w	r3, r3, #32
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d160      	bne.n	8007eec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a7f      	ldr	r2, [pc, #508]	; (800802c <HAL_DMA_IRQHandler+0xc74>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d04a      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a7d      	ldr	r2, [pc, #500]	; (8008030 <HAL_DMA_IRQHandler+0xc78>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d045      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a7c      	ldr	r2, [pc, #496]	; (8008034 <HAL_DMA_IRQHandler+0xc7c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d040      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a7a      	ldr	r2, [pc, #488]	; (8008038 <HAL_DMA_IRQHandler+0xc80>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d03b      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a79      	ldr	r2, [pc, #484]	; (800803c <HAL_DMA_IRQHandler+0xc84>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d036      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a77      	ldr	r2, [pc, #476]	; (8008040 <HAL_DMA_IRQHandler+0xc88>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d031      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a76      	ldr	r2, [pc, #472]	; (8008044 <HAL_DMA_IRQHandler+0xc8c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d02c      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a74      	ldr	r2, [pc, #464]	; (8008048 <HAL_DMA_IRQHandler+0xc90>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d027      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a73      	ldr	r2, [pc, #460]	; (800804c <HAL_DMA_IRQHandler+0xc94>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d022      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a71      	ldr	r2, [pc, #452]	; (8008050 <HAL_DMA_IRQHandler+0xc98>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d01d      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a70      	ldr	r2, [pc, #448]	; (8008054 <HAL_DMA_IRQHandler+0xc9c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d018      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a6e      	ldr	r2, [pc, #440]	; (8008058 <HAL_DMA_IRQHandler+0xca0>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d013      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a6d      	ldr	r2, [pc, #436]	; (800805c <HAL_DMA_IRQHandler+0xca4>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d00e      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a6b      	ldr	r2, [pc, #428]	; (8008060 <HAL_DMA_IRQHandler+0xca8>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d009      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a6a      	ldr	r2, [pc, #424]	; (8008064 <HAL_DMA_IRQHandler+0xcac>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d004      	beq.n	8007eca <HAL_DMA_IRQHandler+0xb12>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a68      	ldr	r2, [pc, #416]	; (8008068 <HAL_DMA_IRQHandler+0xcb0>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d108      	bne.n	8007edc <HAL_DMA_IRQHandler+0xb24>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f022 0208 	bic.w	r2, r2, #8
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	e007      	b.n	8007eec <HAL_DMA_IRQHandler+0xb34>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0204 	bic.w	r2, r2, #4
 8007eea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 8165 	beq.w	80081c0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007efe:	e15f      	b.n	80081c0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f04:	f003 031f 	and.w	r3, r3, #31
 8007f08:	2202      	movs	r2, #2
 8007f0a:	409a      	lsls	r2, r3
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	4013      	ands	r3, r2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 80c5 	beq.w	80080a0 <HAL_DMA_IRQHandler+0xce8>
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 80bf 	beq.w	80080a0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f26:	f003 031f 	and.w	r3, r3, #31
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	409a      	lsls	r2, r3
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d018      	beq.n	8007f6e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d109      	bne.n	8007f5a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 813a 	beq.w	80081c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f58:	e134      	b.n	80081c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 8130 	beq.w	80081c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f6c:	e12a      	b.n	80081c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f003 0320 	and.w	r3, r3, #32
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f040 8089 	bne.w	800808c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a2b      	ldr	r2, [pc, #172]	; (800802c <HAL_DMA_IRQHandler+0xc74>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d04a      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a29      	ldr	r2, [pc, #164]	; (8008030 <HAL_DMA_IRQHandler+0xc78>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d045      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a28      	ldr	r2, [pc, #160]	; (8008034 <HAL_DMA_IRQHandler+0xc7c>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d040      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a26      	ldr	r2, [pc, #152]	; (8008038 <HAL_DMA_IRQHandler+0xc80>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d03b      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a25      	ldr	r2, [pc, #148]	; (800803c <HAL_DMA_IRQHandler+0xc84>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d036      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a23      	ldr	r2, [pc, #140]	; (8008040 <HAL_DMA_IRQHandler+0xc88>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d031      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a22      	ldr	r2, [pc, #136]	; (8008044 <HAL_DMA_IRQHandler+0xc8c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d02c      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a20      	ldr	r2, [pc, #128]	; (8008048 <HAL_DMA_IRQHandler+0xc90>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d027      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1f      	ldr	r2, [pc, #124]	; (800804c <HAL_DMA_IRQHandler+0xc94>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d022      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a1d      	ldr	r2, [pc, #116]	; (8008050 <HAL_DMA_IRQHandler+0xc98>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d01d      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a1c      	ldr	r2, [pc, #112]	; (8008054 <HAL_DMA_IRQHandler+0xc9c>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d018      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a1a      	ldr	r2, [pc, #104]	; (8008058 <HAL_DMA_IRQHandler+0xca0>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d013      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a19      	ldr	r2, [pc, #100]	; (800805c <HAL_DMA_IRQHandler+0xca4>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d00e      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a17      	ldr	r2, [pc, #92]	; (8008060 <HAL_DMA_IRQHandler+0xca8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d009      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a16      	ldr	r2, [pc, #88]	; (8008064 <HAL_DMA_IRQHandler+0xcac>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d004      	beq.n	800801a <HAL_DMA_IRQHandler+0xc62>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a14      	ldr	r2, [pc, #80]	; (8008068 <HAL_DMA_IRQHandler+0xcb0>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d128      	bne.n	800806c <HAL_DMA_IRQHandler+0xcb4>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0214 	bic.w	r2, r2, #20
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	e027      	b.n	800807c <HAL_DMA_IRQHandler+0xcc4>
 800802c:	40020010 	.word	0x40020010
 8008030:	40020028 	.word	0x40020028
 8008034:	40020040 	.word	0x40020040
 8008038:	40020058 	.word	0x40020058
 800803c:	40020070 	.word	0x40020070
 8008040:	40020088 	.word	0x40020088
 8008044:	400200a0 	.word	0x400200a0
 8008048:	400200b8 	.word	0x400200b8
 800804c:	40020410 	.word	0x40020410
 8008050:	40020428 	.word	0x40020428
 8008054:	40020440 	.word	0x40020440
 8008058:	40020458 	.word	0x40020458
 800805c:	40020470 	.word	0x40020470
 8008060:	40020488 	.word	0x40020488
 8008064:	400204a0 	.word	0x400204a0
 8008068:	400204b8 	.word	0x400204b8
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f022 020a 	bic.w	r2, r2, #10
 800807a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 8097 	beq.w	80081c4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800809e:	e091      	b.n	80081c4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a4:	f003 031f 	and.w	r3, r3, #31
 80080a8:	2208      	movs	r2, #8
 80080aa:	409a      	lsls	r2, r3
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	4013      	ands	r3, r2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 8088 	beq.w	80081c6 <HAL_DMA_IRQHandler+0xe0e>
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f003 0308 	and.w	r3, r3, #8
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 8082 	beq.w	80081c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a41      	ldr	r2, [pc, #260]	; (80081cc <HAL_DMA_IRQHandler+0xe14>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d04a      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a3f      	ldr	r2, [pc, #252]	; (80081d0 <HAL_DMA_IRQHandler+0xe18>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d045      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a3e      	ldr	r2, [pc, #248]	; (80081d4 <HAL_DMA_IRQHandler+0xe1c>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d040      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a3c      	ldr	r2, [pc, #240]	; (80081d8 <HAL_DMA_IRQHandler+0xe20>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d03b      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a3b      	ldr	r2, [pc, #236]	; (80081dc <HAL_DMA_IRQHandler+0xe24>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d036      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a39      	ldr	r2, [pc, #228]	; (80081e0 <HAL_DMA_IRQHandler+0xe28>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d031      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a38      	ldr	r2, [pc, #224]	; (80081e4 <HAL_DMA_IRQHandler+0xe2c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d02c      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a36      	ldr	r2, [pc, #216]	; (80081e8 <HAL_DMA_IRQHandler+0xe30>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d027      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a35      	ldr	r2, [pc, #212]	; (80081ec <HAL_DMA_IRQHandler+0xe34>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d022      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a33      	ldr	r2, [pc, #204]	; (80081f0 <HAL_DMA_IRQHandler+0xe38>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d01d      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a32      	ldr	r2, [pc, #200]	; (80081f4 <HAL_DMA_IRQHandler+0xe3c>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d018      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a30      	ldr	r2, [pc, #192]	; (80081f8 <HAL_DMA_IRQHandler+0xe40>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d013      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a2f      	ldr	r2, [pc, #188]	; (80081fc <HAL_DMA_IRQHandler+0xe44>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d00e      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a2d      	ldr	r2, [pc, #180]	; (8008200 <HAL_DMA_IRQHandler+0xe48>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d009      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a2c      	ldr	r2, [pc, #176]	; (8008204 <HAL_DMA_IRQHandler+0xe4c>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d004      	beq.n	8008162 <HAL_DMA_IRQHandler+0xdaa>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a2a      	ldr	r2, [pc, #168]	; (8008208 <HAL_DMA_IRQHandler+0xe50>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d108      	bne.n	8008174 <HAL_DMA_IRQHandler+0xdbc>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 021c 	bic.w	r2, r2, #28
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	e007      	b.n	8008184 <HAL_DMA_IRQHandler+0xdcc>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f022 020e 	bic.w	r2, r2, #14
 8008182:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008188:	f003 031f 	and.w	r3, r3, #31
 800818c:	2201      	movs	r2, #1
 800818e:	409a      	lsls	r2, r3
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d009      	beq.n	80081c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
 80081ba:	e004      	b.n	80081c6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80081bc:	bf00      	nop
 80081be:	e002      	b.n	80081c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081c0:	bf00      	nop
 80081c2:	e000      	b.n	80081c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081c4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80081c6:	3728      	adds	r7, #40	; 0x28
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	40020010 	.word	0x40020010
 80081d0:	40020028 	.word	0x40020028
 80081d4:	40020040 	.word	0x40020040
 80081d8:	40020058 	.word	0x40020058
 80081dc:	40020070 	.word	0x40020070
 80081e0:	40020088 	.word	0x40020088
 80081e4:	400200a0 	.word	0x400200a0
 80081e8:	400200b8 	.word	0x400200b8
 80081ec:	40020410 	.word	0x40020410
 80081f0:	40020428 	.word	0x40020428
 80081f4:	40020440 	.word	0x40020440
 80081f8:	40020458 	.word	0x40020458
 80081fc:	40020470 	.word	0x40020470
 8008200:	40020488 	.word	0x40020488
 8008204:	400204a0 	.word	0x400204a0
 8008208:	400204b8 	.word	0x400204b8

0800820c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a42      	ldr	r2, [pc, #264]	; (8008324 <DMA_CalcBaseAndBitshift+0x118>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d04a      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a41      	ldr	r2, [pc, #260]	; (8008328 <DMA_CalcBaseAndBitshift+0x11c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d045      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a3f      	ldr	r2, [pc, #252]	; (800832c <DMA_CalcBaseAndBitshift+0x120>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d040      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a3e      	ldr	r2, [pc, #248]	; (8008330 <DMA_CalcBaseAndBitshift+0x124>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d03b      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a3c      	ldr	r2, [pc, #240]	; (8008334 <DMA_CalcBaseAndBitshift+0x128>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d036      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a3b      	ldr	r2, [pc, #236]	; (8008338 <DMA_CalcBaseAndBitshift+0x12c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d031      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a39      	ldr	r2, [pc, #228]	; (800833c <DMA_CalcBaseAndBitshift+0x130>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d02c      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a38      	ldr	r2, [pc, #224]	; (8008340 <DMA_CalcBaseAndBitshift+0x134>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d027      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a36      	ldr	r2, [pc, #216]	; (8008344 <DMA_CalcBaseAndBitshift+0x138>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d022      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a35      	ldr	r2, [pc, #212]	; (8008348 <DMA_CalcBaseAndBitshift+0x13c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d01d      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a33      	ldr	r2, [pc, #204]	; (800834c <DMA_CalcBaseAndBitshift+0x140>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d018      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a32      	ldr	r2, [pc, #200]	; (8008350 <DMA_CalcBaseAndBitshift+0x144>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d013      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a30      	ldr	r2, [pc, #192]	; (8008354 <DMA_CalcBaseAndBitshift+0x148>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00e      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a2f      	ldr	r2, [pc, #188]	; (8008358 <DMA_CalcBaseAndBitshift+0x14c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d009      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a2d      	ldr	r2, [pc, #180]	; (800835c <DMA_CalcBaseAndBitshift+0x150>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d004      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xa8>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a2c      	ldr	r2, [pc, #176]	; (8008360 <DMA_CalcBaseAndBitshift+0x154>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d101      	bne.n	80082b8 <DMA_CalcBaseAndBitshift+0xac>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e000      	b.n	80082ba <DMA_CalcBaseAndBitshift+0xae>
 80082b8:	2300      	movs	r3, #0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d024      	beq.n	8008308 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	3b10      	subs	r3, #16
 80082c6:	4a27      	ldr	r2, [pc, #156]	; (8008364 <DMA_CalcBaseAndBitshift+0x158>)
 80082c8:	fba2 2303 	umull	r2, r3, r2, r3
 80082cc:	091b      	lsrs	r3, r3, #4
 80082ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	4a24      	ldr	r2, [pc, #144]	; (8008368 <DMA_CalcBaseAndBitshift+0x15c>)
 80082d8:	5cd3      	ldrb	r3, [r2, r3]
 80082da:	461a      	mov	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d908      	bls.n	80082f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	4b1f      	ldr	r3, [pc, #124]	; (800836c <DMA_CalcBaseAndBitshift+0x160>)
 80082ee:	4013      	ands	r3, r2
 80082f0:	1d1a      	adds	r2, r3, #4
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	659a      	str	r2, [r3, #88]	; 0x58
 80082f6:	e00d      	b.n	8008314 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	461a      	mov	r2, r3
 80082fe:	4b1b      	ldr	r3, [pc, #108]	; (800836c <DMA_CalcBaseAndBitshift+0x160>)
 8008300:	4013      	ands	r3, r2
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6593      	str	r3, [r2, #88]	; 0x58
 8008306:	e005      	b.n	8008314 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	40020010 	.word	0x40020010
 8008328:	40020028 	.word	0x40020028
 800832c:	40020040 	.word	0x40020040
 8008330:	40020058 	.word	0x40020058
 8008334:	40020070 	.word	0x40020070
 8008338:	40020088 	.word	0x40020088
 800833c:	400200a0 	.word	0x400200a0
 8008340:	400200b8 	.word	0x400200b8
 8008344:	40020410 	.word	0x40020410
 8008348:	40020428 	.word	0x40020428
 800834c:	40020440 	.word	0x40020440
 8008350:	40020458 	.word	0x40020458
 8008354:	40020470 	.word	0x40020470
 8008358:	40020488 	.word	0x40020488
 800835c:	400204a0 	.word	0x400204a0
 8008360:	400204b8 	.word	0x400204b8
 8008364:	aaaaaaab 	.word	0xaaaaaaab
 8008368:	08010a9c 	.word	0x08010a9c
 800836c:	fffffc00 	.word	0xfffffc00

08008370 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a38      	ldr	r2, [pc, #224]	; (8008464 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d022      	beq.n	80083ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a36      	ldr	r2, [pc, #216]	; (8008468 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d01d      	beq.n	80083ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a35      	ldr	r2, [pc, #212]	; (800846c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d018      	beq.n	80083ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a33      	ldr	r2, [pc, #204]	; (8008470 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d013      	beq.n	80083ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a32      	ldr	r2, [pc, #200]	; (8008474 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00e      	beq.n	80083ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a30      	ldr	r2, [pc, #192]	; (8008478 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d009      	beq.n	80083ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a2f      	ldr	r2, [pc, #188]	; (800847c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d004      	beq.n	80083ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a2d      	ldr	r2, [pc, #180]	; (8008480 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d101      	bne.n	80083d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80083ce:	2301      	movs	r3, #1
 80083d0:	e000      	b.n	80083d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80083d2:	2300      	movs	r3, #0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01a      	beq.n	800840e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	3b08      	subs	r3, #8
 80083e0:	4a28      	ldr	r2, [pc, #160]	; (8008484 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80083e2:	fba2 2303 	umull	r2, r3, r2, r3
 80083e6:	091b      	lsrs	r3, r3, #4
 80083e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	4b26      	ldr	r3, [pc, #152]	; (8008488 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	461a      	mov	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a24      	ldr	r2, [pc, #144]	; (800848c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80083fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f003 031f 	and.w	r3, r3, #31
 8008404:	2201      	movs	r2, #1
 8008406:	409a      	lsls	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800840c:	e024      	b.n	8008458 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	b2db      	uxtb	r3, r3
 8008414:	3b10      	subs	r3, #16
 8008416:	4a1e      	ldr	r2, [pc, #120]	; (8008490 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008418:	fba2 2303 	umull	r2, r3, r2, r3
 800841c:	091b      	lsrs	r3, r3, #4
 800841e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4a1c      	ldr	r2, [pc, #112]	; (8008494 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d806      	bhi.n	8008436 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	4a1b      	ldr	r2, [pc, #108]	; (8008498 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d902      	bls.n	8008436 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3308      	adds	r3, #8
 8008434:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	4b18      	ldr	r3, [pc, #96]	; (800849c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800843a:	4413      	add	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	461a      	mov	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a16      	ldr	r2, [pc, #88]	; (80084a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008448:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f003 031f 	and.w	r3, r3, #31
 8008450:	2201      	movs	r2, #1
 8008452:	409a      	lsls	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008458:	bf00      	nop
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	58025408 	.word	0x58025408
 8008468:	5802541c 	.word	0x5802541c
 800846c:	58025430 	.word	0x58025430
 8008470:	58025444 	.word	0x58025444
 8008474:	58025458 	.word	0x58025458
 8008478:	5802546c 	.word	0x5802546c
 800847c:	58025480 	.word	0x58025480
 8008480:	58025494 	.word	0x58025494
 8008484:	cccccccd 	.word	0xcccccccd
 8008488:	16009600 	.word	0x16009600
 800848c:	58025880 	.word	0x58025880
 8008490:	aaaaaaab 	.word	0xaaaaaaab
 8008494:	400204b8 	.word	0x400204b8
 8008498:	4002040f 	.word	0x4002040f
 800849c:	10008200 	.word	0x10008200
 80084a0:	40020880 	.word	0x40020880

080084a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d04a      	beq.n	8008550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2b08      	cmp	r3, #8
 80084be:	d847      	bhi.n	8008550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a25      	ldr	r2, [pc, #148]	; (800855c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d022      	beq.n	8008510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a24      	ldr	r2, [pc, #144]	; (8008560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d01d      	beq.n	8008510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a22      	ldr	r2, [pc, #136]	; (8008564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d018      	beq.n	8008510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a21      	ldr	r2, [pc, #132]	; (8008568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d013      	beq.n	8008510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a1f      	ldr	r2, [pc, #124]	; (800856c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00e      	beq.n	8008510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a1e      	ldr	r2, [pc, #120]	; (8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d009      	beq.n	8008510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a1c      	ldr	r2, [pc, #112]	; (8008574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d004      	beq.n	8008510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1b      	ldr	r2, [pc, #108]	; (8008578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d101      	bne.n	8008514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008510:	2301      	movs	r3, #1
 8008512:	e000      	b.n	8008516 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008514:	2300      	movs	r3, #0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4b17      	ldr	r3, [pc, #92]	; (800857c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800851e:	4413      	add	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	461a      	mov	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a15      	ldr	r2, [pc, #84]	; (8008580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800852c:	671a      	str	r2, [r3, #112]	; 0x70
 800852e:	e009      	b.n	8008544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4b14      	ldr	r3, [pc, #80]	; (8008584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	461a      	mov	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a11      	ldr	r2, [pc, #68]	; (8008588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008542:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3b01      	subs	r3, #1
 8008548:	2201      	movs	r2, #1
 800854a:	409a      	lsls	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008550:	bf00      	nop
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	58025408 	.word	0x58025408
 8008560:	5802541c 	.word	0x5802541c
 8008564:	58025430 	.word	0x58025430
 8008568:	58025444 	.word	0x58025444
 800856c:	58025458 	.word	0x58025458
 8008570:	5802546c 	.word	0x5802546c
 8008574:	58025480 	.word	0x58025480
 8008578:	58025494 	.word	0x58025494
 800857c:	1600963f 	.word	0x1600963f
 8008580:	58025940 	.word	0x58025940
 8008584:	1000823f 	.word	0x1000823f
 8008588:	40020940 	.word	0x40020940

0800858c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e04f      	b.n	800863e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d106      	bne.n	80085b8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f84e 	bl	8008654 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	4b20      	ldr	r3, [pc, #128]	; (8008648 <HAL_DMA2D_Init+0xbc>)
 80085c8:	4013      	ands	r3, r2
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6851      	ldr	r1, [r2, #4]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	69d2      	ldr	r2, [r2, #28]
 80085d2:	4311      	orrs	r1, r2
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6812      	ldr	r2, [r2, #0]
 80085d8:	430b      	orrs	r3, r1
 80085da:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085e2:	4b1a      	ldr	r3, [pc, #104]	; (800864c <HAL_DMA2D_Init+0xc0>)
 80085e4:	4013      	ands	r3, r2
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	6891      	ldr	r1, [r2, #8]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	6992      	ldr	r2, [r2, #24]
 80085ee:	4311      	orrs	r1, r2
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	430b      	orrs	r3, r1
 80085f6:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085fe:	4b14      	ldr	r3, [pc, #80]	; (8008650 <HAL_DMA2D_Init+0xc4>)
 8008600:	4013      	ands	r3, r2
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	68d1      	ldr	r1, [r2, #12]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6812      	ldr	r2, [r2, #0]
 800860a:	430b      	orrs	r3, r1
 800860c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008614:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	051a      	lsls	r2, r3, #20
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	055b      	lsls	r3, r3, #21
 8008624:	431a      	orrs	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	fff8ffbf 	.word	0xfff8ffbf
 800864c:	fffffef8 	.word	0xfffffef8
 8008650:	ffff0000 	.word	0xffff0000

08008654 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af02      	add	r7, sp, #8
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_DMA2D_Start+0x1c>
 8008680:	2302      	movs	r3, #2
 8008682:	e018      	b.n	80086b6 <HAL_DMA2D_Start+0x4e>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	68b9      	ldr	r1, [r7, #8]
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 f9a4 	bl	80089ec <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0201 	orr.w	r2, r2, #1
 80086b2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b086      	sub	sp, #24
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d056      	beq.n	8008788 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80086da:	f7fd fdc5 	bl	8006268 <HAL_GetTick>
 80086de:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80086e0:	e04b      	b.n	800877a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d023      	beq.n	800873c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f003 0320 	and.w	r3, r3, #32
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d005      	beq.n	800870a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008702:	f043 0202 	orr.w	r2, r3, #2
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	2b00      	cmp	r3, #0
 8008712:	d005      	beq.n	8008720 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008718:	f043 0201 	orr.w	r2, r3, #1
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2221      	movs	r2, #33	; 0x21
 8008726:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2204      	movs	r2, #4
 800872c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e0a5      	b.n	8008888 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008742:	d01a      	beq.n	800877a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008744:	f7fd fd90 	bl	8006268 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	429a      	cmp	r2, r3
 8008752:	d302      	bcc.n	800875a <HAL_DMA2D_PollForTransfer+0x9c>
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10f      	bne.n	800877a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800875e:	f043 0220 	orr.w	r2, r3, #32
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2203      	movs	r2, #3
 800876a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e086      	b.n	8008888 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	f003 0302 	and.w	r3, r3, #2
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0ac      	beq.n	80086e2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	f003 0320 	and.w	r3, r3, #32
 8008792:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	f003 0320 	and.w	r3, r3, #32
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d061      	beq.n	800886e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80087aa:	f7fd fd5d 	bl	8006268 <HAL_GetTick>
 80087ae:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80087b0:	e056      	b.n	8008860 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d02e      	beq.n	8008822 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f003 0308 	and.w	r3, r3, #8
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d005      	beq.n	80087da <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087d2:	f043 0204 	orr.w	r2, r3, #4
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f003 0320 	and.w	r3, r3, #32
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d005      	beq.n	80087f0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087e8:	f043 0202 	orr.w	r2, r3, #2
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087fe:	f043 0201 	orr.w	r2, r3, #1
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2229      	movs	r2, #41	; 0x29
 800880c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2204      	movs	r2, #4
 8008812:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e032      	b.n	8008888 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008828:	d01a      	beq.n	8008860 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800882a:	f7fd fd1d 	bl	8006268 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d302      	bcc.n	8008840 <HAL_DMA2D_PollForTransfer+0x182>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10f      	bne.n	8008860 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008844:	f043 0220 	orr.w	r2, r3, #32
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2203      	movs	r2, #3
 8008850:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e013      	b.n	8008888 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f003 0310 	and.w	r3, r3, #16
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0a1      	beq.n	80087b2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2212      	movs	r2, #18
 8008874:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d101      	bne.n	80088b4 <HAL_DMA2D_ConfigLayer+0x24>
 80088b0:	2302      	movs	r3, #2
 80088b2:	e092      	b.n	80089da <HAL_DMA2D_ConfigLayer+0x14a>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2202      	movs	r2, #2
 80088c0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	4613      	mov	r3, r2
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	1a9b      	subs	r3, r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	3328      	adds	r3, #40	; 0x28
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	4413      	add	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	685a      	ldr	r2, [r3, #4]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	041b      	lsls	r3, r3, #16
 80088e0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80088e8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80088f0:	4313      	orrs	r3, r2
 80088f2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80088f4:	4b3c      	ldr	r3, [pc, #240]	; (80089e8 <HAL_DMA2D_ConfigLayer+0x158>)
 80088f6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	2b0a      	cmp	r3, #10
 80088fe:	d003      	beq.n	8008908 <HAL_DMA2D_ConfigLayer+0x78>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	2b09      	cmp	r3, #9
 8008906:	d107      	bne.n	8008918 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	4313      	orrs	r3, r2
 8008914:	613b      	str	r3, [r7, #16]
 8008916:	e005      	b.n	8008924 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	061b      	lsls	r3, r3, #24
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	4313      	orrs	r3, r2
 8008922:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d120      	bne.n	800896c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	43db      	mvns	r3, r3
 8008934:	ea02 0103 	and.w	r1, r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	430a      	orrs	r2, r1
 8008940:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	6812      	ldr	r2, [r2, #0]
 800894a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	2b0a      	cmp	r3, #10
 8008952:	d003      	beq.n	800895c <HAL_DMA2D_ConfigLayer+0xcc>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	2b09      	cmp	r3, #9
 800895a:	d135      	bne.n	80089c8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	68da      	ldr	r2, [r3, #12]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008968:	629a      	str	r2, [r3, #40]	; 0x28
 800896a:	e02d      	b.n	80089c8 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	2b0b      	cmp	r3, #11
 8008972:	d109      	bne.n	8008988 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	049b      	lsls	r3, r3, #18
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	4313      	orrs	r3, r2
 800897e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8008986:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	69da      	ldr	r2, [r3, #28]
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	43db      	mvns	r3, r3
 8008992:	ea02 0103 	and.w	r1, r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	430a      	orrs	r2, r1
 800899e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	6812      	ldr	r2, [r2, #0]
 80089a8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	2b0a      	cmp	r3, #10
 80089b0:	d003      	beq.n	80089ba <HAL_DMA2D_ConfigLayer+0x12a>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	2b09      	cmp	r3, #9
 80089b8:	d106      	bne.n	80089c8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80089c6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	371c      	adds	r7, #28
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	ff33000f 	.word	0xff33000f

080089ec <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b08b      	sub	sp, #44	; 0x2c
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a00:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	041a      	lsls	r2, r3, #16
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	430a      	orrs	r2, r1
 8008a12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a24:	d174      	bne.n	8008b10 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008a2c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a34:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008a3c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d108      	bne.n	8008a5e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	431a      	orrs	r2, r3
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a5c:	e053      	b.n	8008b06 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d106      	bne.n	8008a74 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
 8008a72:	e048      	b.n	8008b06 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d111      	bne.n	8008aa0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	0cdb      	lsrs	r3, r3, #19
 8008a80:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	0a9b      	lsrs	r3, r3, #10
 8008a86:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	08db      	lsrs	r3, r3, #3
 8008a8c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	02db      	lsls	r3, r3, #11
 8008a96:	4313      	orrs	r3, r2
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a9e:	e032      	b.n	8008b06 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d117      	bne.n	8008ad8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	0fdb      	lsrs	r3, r3, #31
 8008aac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	0cdb      	lsrs	r3, r3, #19
 8008ab2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	0adb      	lsrs	r3, r3, #11
 8008ab8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	08db      	lsrs	r3, r3, #3
 8008abe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	029b      	lsls	r3, r3, #10
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	03db      	lsls	r3, r3, #15
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad6:	e016      	b.n	8008b06 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	0f1b      	lsrs	r3, r3, #28
 8008adc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	0d1b      	lsrs	r3, r3, #20
 8008ae2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	0b1b      	lsrs	r3, r3, #12
 8008ae8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	091b      	lsrs	r3, r3, #4
 8008aee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	011a      	lsls	r2, r3, #4
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	021b      	lsls	r3, r3, #8
 8008af8:	431a      	orrs	r2, r3
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	031b      	lsls	r3, r3, #12
 8008afe:	4313      	orrs	r3, r2
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008b0e:	e00d      	b.n	8008b2c <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b18:	d104      	bne.n	8008b24 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	615a      	str	r2, [r3, #20]
}
 8008b22:	e003      	b.n	8008b2c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	60da      	str	r2, [r3, #12]
}
 8008b2c:	bf00      	nop
 8008b2e:	372c      	adds	r7, #44	; 0x2c
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	460b      	mov	r3, r1
 8008b42:	607a      	str	r2, [r7, #4]
 8008b44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d101      	bne.n	8008b54 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e00a      	b.n	8008b6a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8008b54:	7afb      	ldrb	r3, [r7, #11]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d103      	bne.n	8008b62 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	605a      	str	r2, [r3, #4]
      break;
 8008b60:	e002      	b.n	8008b68 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	75fb      	strb	r3, [r7, #23]
      break;
 8008b66:	bf00      	nop
  }

  return status;
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b083      	sub	sp, #12
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e003      	b.n	8008b92 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008b90:	2300      	movs	r3, #0
  }
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
	...

08008ba0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	0c1b      	lsrs	r3, r3, #16
 8008bae:	f003 0303 	and.w	r3, r3, #3
 8008bb2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 031f 	and.w	r3, r3, #31
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc2:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	011a      	lsls	r2, r3, #4
 8008bc8:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <HAL_EXTI_IRQHandler+0x5c>)
 8008bca:	4413      	add	r3, r2
 8008bcc:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d009      	beq.n	8008bf2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4798      	blx	r3
    }
  }
}
 8008bf2:	bf00      	nop
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	58000088 	.word	0x58000088

08008c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b089      	sub	sp, #36	; 0x24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c0e:	4b89      	ldr	r3, [pc, #548]	; (8008e34 <HAL_GPIO_Init+0x234>)
 8008c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c12:	e194      	b.n	8008f3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	2101      	movs	r1, #1
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c20:	4013      	ands	r3, r2
 8008c22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 8186 	beq.w	8008f38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	f003 0303 	and.w	r3, r3, #3
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d005      	beq.n	8008c44 <HAL_GPIO_Init+0x44>
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f003 0303 	and.w	r3, r3, #3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d130      	bne.n	8008ca6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	005b      	lsls	r3, r3, #1
 8008c4e:	2203      	movs	r2, #3
 8008c50:	fa02 f303 	lsl.w	r3, r2, r3
 8008c54:	43db      	mvns	r3, r3
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	4013      	ands	r3, r2
 8008c5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	68da      	ldr	r2, [r3, #12]
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	fa02 f303 	lsl.w	r3, r2, r3
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	43db      	mvns	r3, r3
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	4013      	ands	r3, r2
 8008c88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	091b      	lsrs	r3, r3, #4
 8008c90:	f003 0201 	and.w	r2, r3, #1
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f003 0303 	and.w	r3, r3, #3
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d017      	beq.n	8008ce2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	005b      	lsls	r3, r3, #1
 8008cbc:	2203      	movs	r2, #3
 8008cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc2:	43db      	mvns	r3, r3
 8008cc4:	69ba      	ldr	r2, [r7, #24]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f003 0303 	and.w	r3, r3, #3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d123      	bne.n	8008d36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	08da      	lsrs	r2, r3, #3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	3208      	adds	r2, #8
 8008cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	f003 0307 	and.w	r3, r3, #7
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	220f      	movs	r2, #15
 8008d06:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0a:	43db      	mvns	r3, r3
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	4013      	ands	r3, r2
 8008d10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	691a      	ldr	r2, [r3, #16]
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	f003 0307 	and.w	r3, r3, #7
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	08da      	lsrs	r2, r3, #3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3208      	adds	r2, #8
 8008d30:	69b9      	ldr	r1, [r7, #24]
 8008d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	2203      	movs	r2, #3
 8008d42:	fa02 f303 	lsl.w	r3, r2, r3
 8008d46:	43db      	mvns	r3, r3
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f003 0203 	and.w	r2, r3, #3
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 80e0 	beq.w	8008f38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d78:	4b2f      	ldr	r3, [pc, #188]	; (8008e38 <HAL_GPIO_Init+0x238>)
 8008d7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d7e:	4a2e      	ldr	r2, [pc, #184]	; (8008e38 <HAL_GPIO_Init+0x238>)
 8008d80:	f043 0302 	orr.w	r3, r3, #2
 8008d84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008d88:	4b2b      	ldr	r3, [pc, #172]	; (8008e38 <HAL_GPIO_Init+0x238>)
 8008d8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d8e:	f003 0302 	and.w	r3, r3, #2
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d96:	4a29      	ldr	r2, [pc, #164]	; (8008e3c <HAL_GPIO_Init+0x23c>)
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	089b      	lsrs	r3, r3, #2
 8008d9c:	3302      	adds	r3, #2
 8008d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	f003 0303 	and.w	r3, r3, #3
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	220f      	movs	r2, #15
 8008dae:	fa02 f303 	lsl.w	r3, r2, r3
 8008db2:	43db      	mvns	r3, r3
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	4013      	ands	r3, r2
 8008db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a20      	ldr	r2, [pc, #128]	; (8008e40 <HAL_GPIO_Init+0x240>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d052      	beq.n	8008e68 <HAL_GPIO_Init+0x268>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a1f      	ldr	r2, [pc, #124]	; (8008e44 <HAL_GPIO_Init+0x244>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d031      	beq.n	8008e2e <HAL_GPIO_Init+0x22e>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a1e      	ldr	r2, [pc, #120]	; (8008e48 <HAL_GPIO_Init+0x248>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d02b      	beq.n	8008e2a <HAL_GPIO_Init+0x22a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a1d      	ldr	r2, [pc, #116]	; (8008e4c <HAL_GPIO_Init+0x24c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d025      	beq.n	8008e26 <HAL_GPIO_Init+0x226>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a1c      	ldr	r2, [pc, #112]	; (8008e50 <HAL_GPIO_Init+0x250>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d01f      	beq.n	8008e22 <HAL_GPIO_Init+0x222>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a1b      	ldr	r2, [pc, #108]	; (8008e54 <HAL_GPIO_Init+0x254>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d019      	beq.n	8008e1e <HAL_GPIO_Init+0x21e>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a1a      	ldr	r2, [pc, #104]	; (8008e58 <HAL_GPIO_Init+0x258>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d013      	beq.n	8008e1a <HAL_GPIO_Init+0x21a>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a19      	ldr	r2, [pc, #100]	; (8008e5c <HAL_GPIO_Init+0x25c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00d      	beq.n	8008e16 <HAL_GPIO_Init+0x216>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a18      	ldr	r2, [pc, #96]	; (8008e60 <HAL_GPIO_Init+0x260>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d007      	beq.n	8008e12 <HAL_GPIO_Init+0x212>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a17      	ldr	r2, [pc, #92]	; (8008e64 <HAL_GPIO_Init+0x264>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d101      	bne.n	8008e0e <HAL_GPIO_Init+0x20e>
 8008e0a:	2309      	movs	r3, #9
 8008e0c:	e02d      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e0e:	230a      	movs	r3, #10
 8008e10:	e02b      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e12:	2308      	movs	r3, #8
 8008e14:	e029      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e16:	2307      	movs	r3, #7
 8008e18:	e027      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e1a:	2306      	movs	r3, #6
 8008e1c:	e025      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e1e:	2305      	movs	r3, #5
 8008e20:	e023      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e22:	2304      	movs	r3, #4
 8008e24:	e021      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e26:	2303      	movs	r3, #3
 8008e28:	e01f      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	e01d      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e01b      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e32:	bf00      	nop
 8008e34:	58000080 	.word	0x58000080
 8008e38:	58024400 	.word	0x58024400
 8008e3c:	58000400 	.word	0x58000400
 8008e40:	58020000 	.word	0x58020000
 8008e44:	58020400 	.word	0x58020400
 8008e48:	58020800 	.word	0x58020800
 8008e4c:	58020c00 	.word	0x58020c00
 8008e50:	58021000 	.word	0x58021000
 8008e54:	58021400 	.word	0x58021400
 8008e58:	58021800 	.word	0x58021800
 8008e5c:	58021c00 	.word	0x58021c00
 8008e60:	58022000 	.word	0x58022000
 8008e64:	58022400 	.word	0x58022400
 8008e68:	2300      	movs	r3, #0
 8008e6a:	69fa      	ldr	r2, [r7, #28]
 8008e6c:	f002 0203 	and.w	r2, r2, #3
 8008e70:	0092      	lsls	r2, r2, #2
 8008e72:	4093      	lsls	r3, r2
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e7a:	4938      	ldr	r1, [pc, #224]	; (8008f5c <HAL_GPIO_Init+0x35c>)
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	089b      	lsrs	r3, r3, #2
 8008e80:	3302      	adds	r3, #2
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	43db      	mvns	r3, r3
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	4013      	ands	r3, r2
 8008e98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	43db      	mvns	r3, r3
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d003      	beq.n	8008edc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	43db      	mvns	r3, r3
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d003      	beq.n	8008f08 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	43db      	mvns	r3, r3
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	fa22 f303 	lsr.w	r3, r2, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f47f ae63 	bne.w	8008c14 <HAL_GPIO_Init+0x14>
  }
}
 8008f4e:	bf00      	nop
 8008f50:	bf00      	nop
 8008f52:	3724      	adds	r7, #36	; 0x24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	58000400 	.word	0x58000400

08008f60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008f6e:	4b75      	ldr	r3, [pc, #468]	; (8009144 <HAL_GPIO_DeInit+0x1e4>)
 8008f70:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008f72:	e0d9      	b.n	8009128 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008f74:	2201      	movs	r2, #1
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	4013      	ands	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 80cc 	beq.w	8009122 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008f8a:	4a6f      	ldr	r2, [pc, #444]	; (8009148 <HAL_GPIO_DeInit+0x1e8>)
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	089b      	lsrs	r3, r3, #2
 8008f90:	3302      	adds	r3, #2
 8008f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f96:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f003 0303 	and.w	r3, r3, #3
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	220f      	movs	r2, #15
 8008fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	4013      	ands	r3, r2
 8008faa:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a67      	ldr	r2, [pc, #412]	; (800914c <HAL_GPIO_DeInit+0x1ec>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d037      	beq.n	8009024 <HAL_GPIO_DeInit+0xc4>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a66      	ldr	r2, [pc, #408]	; (8009150 <HAL_GPIO_DeInit+0x1f0>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d031      	beq.n	8009020 <HAL_GPIO_DeInit+0xc0>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a65      	ldr	r2, [pc, #404]	; (8009154 <HAL_GPIO_DeInit+0x1f4>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d02b      	beq.n	800901c <HAL_GPIO_DeInit+0xbc>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a64      	ldr	r2, [pc, #400]	; (8009158 <HAL_GPIO_DeInit+0x1f8>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d025      	beq.n	8009018 <HAL_GPIO_DeInit+0xb8>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a63      	ldr	r2, [pc, #396]	; (800915c <HAL_GPIO_DeInit+0x1fc>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d01f      	beq.n	8009014 <HAL_GPIO_DeInit+0xb4>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a62      	ldr	r2, [pc, #392]	; (8009160 <HAL_GPIO_DeInit+0x200>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d019      	beq.n	8009010 <HAL_GPIO_DeInit+0xb0>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a61      	ldr	r2, [pc, #388]	; (8009164 <HAL_GPIO_DeInit+0x204>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d013      	beq.n	800900c <HAL_GPIO_DeInit+0xac>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a60      	ldr	r2, [pc, #384]	; (8009168 <HAL_GPIO_DeInit+0x208>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d00d      	beq.n	8009008 <HAL_GPIO_DeInit+0xa8>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a5f      	ldr	r2, [pc, #380]	; (800916c <HAL_GPIO_DeInit+0x20c>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d007      	beq.n	8009004 <HAL_GPIO_DeInit+0xa4>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a5e      	ldr	r2, [pc, #376]	; (8009170 <HAL_GPIO_DeInit+0x210>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d101      	bne.n	8009000 <HAL_GPIO_DeInit+0xa0>
 8008ffc:	2309      	movs	r3, #9
 8008ffe:	e012      	b.n	8009026 <HAL_GPIO_DeInit+0xc6>
 8009000:	230a      	movs	r3, #10
 8009002:	e010      	b.n	8009026 <HAL_GPIO_DeInit+0xc6>
 8009004:	2308      	movs	r3, #8
 8009006:	e00e      	b.n	8009026 <HAL_GPIO_DeInit+0xc6>
 8009008:	2307      	movs	r3, #7
 800900a:	e00c      	b.n	8009026 <HAL_GPIO_DeInit+0xc6>
 800900c:	2306      	movs	r3, #6
 800900e:	e00a      	b.n	8009026 <HAL_GPIO_DeInit+0xc6>
 8009010:	2305      	movs	r3, #5
 8009012:	e008      	b.n	8009026 <HAL_GPIO_DeInit+0xc6>
 8009014:	2304      	movs	r3, #4
 8009016:	e006      	b.n	8009026 <HAL_GPIO_DeInit+0xc6>
 8009018:	2303      	movs	r3, #3
 800901a:	e004      	b.n	8009026 <HAL_GPIO_DeInit+0xc6>
 800901c:	2302      	movs	r3, #2
 800901e:	e002      	b.n	8009026 <HAL_GPIO_DeInit+0xc6>
 8009020:	2301      	movs	r3, #1
 8009022:	e000      	b.n	8009026 <HAL_GPIO_DeInit+0xc6>
 8009024:	2300      	movs	r3, #0
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	f002 0203 	and.w	r2, r2, #3
 800902c:	0092      	lsls	r2, r2, #2
 800902e:	4093      	lsls	r3, r2
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	429a      	cmp	r2, r3
 8009034:	d136      	bne.n	80090a4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	43db      	mvns	r3, r3
 800903e:	401a      	ands	r2, r3
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	43db      	mvns	r3, r3
 800904c:	401a      	ands	r2, r3
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8009052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	43db      	mvns	r3, r3
 800905c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009060:	4013      	ands	r3, r2
 8009062:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	43db      	mvns	r3, r3
 800906e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009072:	4013      	ands	r3, r2
 8009074:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	f003 0303 	and.w	r3, r3, #3
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	220f      	movs	r2, #15
 8009080:	fa02 f303 	lsl.w	r3, r2, r3
 8009084:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009086:	4a30      	ldr	r2, [pc, #192]	; (8009148 <HAL_GPIO_DeInit+0x1e8>)
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	089b      	lsrs	r3, r3, #2
 800908c:	3302      	adds	r3, #2
 800908e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	43da      	mvns	r2, r3
 8009096:	482c      	ldr	r0, [pc, #176]	; (8009148 <HAL_GPIO_DeInit+0x1e8>)
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	089b      	lsrs	r3, r3, #2
 800909c:	400a      	ands	r2, r1
 800909e:	3302      	adds	r3, #2
 80090a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	2103      	movs	r1, #3
 80090ae:	fa01 f303 	lsl.w	r3, r1, r3
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	08da      	lsrs	r2, r3, #3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	3208      	adds	r2, #8
 80090c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f003 0307 	and.w	r3, r3, #7
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	220f      	movs	r2, #15
 80090ce:	fa02 f303 	lsl.w	r3, r2, r3
 80090d2:	43db      	mvns	r3, r3
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	08d2      	lsrs	r2, r2, #3
 80090d8:	4019      	ands	r1, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3208      	adds	r2, #8
 80090de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	005b      	lsls	r3, r3, #1
 80090ea:	2103      	movs	r1, #3
 80090ec:	fa01 f303 	lsl.w	r3, r1, r3
 80090f0:	43db      	mvns	r3, r3
 80090f2:	401a      	ands	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	2101      	movs	r1, #1
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	fa01 f303 	lsl.w	r3, r1, r3
 8009104:	43db      	mvns	r3, r3
 8009106:	401a      	ands	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	689a      	ldr	r2, [r3, #8]
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	2103      	movs	r1, #3
 8009116:	fa01 f303 	lsl.w	r3, r1, r3
 800911a:	43db      	mvns	r3, r3
 800911c:	401a      	ands	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	3301      	adds	r3, #1
 8009126:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	fa22 f303 	lsr.w	r3, r2, r3
 8009130:	2b00      	cmp	r3, #0
 8009132:	f47f af1f 	bne.w	8008f74 <HAL_GPIO_DeInit+0x14>
  }
}
 8009136:	bf00      	nop
 8009138:	bf00      	nop
 800913a:	371c      	adds	r7, #28
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr
 8009144:	58000080 	.word	0x58000080
 8009148:	58000400 	.word	0x58000400
 800914c:	58020000 	.word	0x58020000
 8009150:	58020400 	.word	0x58020400
 8009154:	58020800 	.word	0x58020800
 8009158:	58020c00 	.word	0x58020c00
 800915c:	58021000 	.word	0x58021000
 8009160:	58021400 	.word	0x58021400
 8009164:	58021800 	.word	0x58021800
 8009168:	58021c00 	.word	0x58021c00
 800916c:	58022000 	.word	0x58022000
 8009170:	58022400 	.word	0x58022400

08009174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	807b      	strh	r3, [r7, #2]
 8009180:	4613      	mov	r3, r2
 8009182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009184:	787b      	ldrb	r3, [r7, #1]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800918a:	887a      	ldrh	r2, [r7, #2]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009190:	e003      	b.n	800919a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009192:	887b      	ldrh	r3, [r7, #2]
 8009194:	041a      	lsls	r2, r3, #16
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	619a      	str	r2, [r3, #24]
}
 800919a:	bf00      	nop
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
	...

080091a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e07f      	b.n	80092ba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d106      	bne.n	80091d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f8a9 	bl	8009326 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2224      	movs	r2, #36	; 0x24
 80091d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 0201 	bic.w	r2, r2, #1
 80091ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80091f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009208:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d107      	bne.n	8009222 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689a      	ldr	r2, [r3, #8]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800921e:	609a      	str	r2, [r3, #8]
 8009220:	e006      	b.n	8009230 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	689a      	ldr	r2, [r3, #8]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800922e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	2b02      	cmp	r3, #2
 8009236:	d104      	bne.n	8009242 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009240:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6859      	ldr	r1, [r3, #4]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	4b1d      	ldr	r3, [pc, #116]	; (80092c4 <HAL_I2C_Init+0x11c>)
 800924e:	430b      	orrs	r3, r1
 8009250:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68da      	ldr	r2, [r3, #12]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009260:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	691a      	ldr	r2, [r3, #16]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	430a      	orrs	r2, r1
 800927a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	69d9      	ldr	r1, [r3, #28]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a1a      	ldr	r2, [r3, #32]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	430a      	orrs	r2, r1
 800928a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f042 0201 	orr.w	r2, r2, #1
 800929a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2220      	movs	r2, #32
 80092a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	02008000 	.word	0x02008000

080092c8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e021      	b.n	800931e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2224      	movs	r2, #36	; 0x24
 80092de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 0201 	bic.w	r2, r2, #1
 80092f0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f821 	bl	800933a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009326:	b480      	push	{r7}
 8009328:	b083      	sub	sp, #12
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800932e:	bf00      	nop
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800933a:	b480      	push	{r7}
 800933c:	b083      	sub	sp, #12
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009342:	bf00      	nop
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
	...

08009350 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b088      	sub	sp, #32
 8009354:	af02      	add	r7, sp, #8
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	4608      	mov	r0, r1
 800935a:	4611      	mov	r1, r2
 800935c:	461a      	mov	r2, r3
 800935e:	4603      	mov	r3, r0
 8009360:	817b      	strh	r3, [r7, #10]
 8009362:	460b      	mov	r3, r1
 8009364:	813b      	strh	r3, [r7, #8]
 8009366:	4613      	mov	r3, r2
 8009368:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b20      	cmp	r3, #32
 8009374:	f040 80f9 	bne.w	800956a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <HAL_I2C_Mem_Write+0x34>
 800937e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009380:	2b00      	cmp	r3, #0
 8009382:	d105      	bne.n	8009390 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800938a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e0ed      	b.n	800956c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009396:	2b01      	cmp	r3, #1
 8009398:	d101      	bne.n	800939e <HAL_I2C_Mem_Write+0x4e>
 800939a:	2302      	movs	r3, #2
 800939c:	e0e6      	b.n	800956c <HAL_I2C_Mem_Write+0x21c>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80093a6:	f7fc ff5f 	bl	8006268 <HAL_GetTick>
 80093aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	2319      	movs	r3, #25
 80093b2:	2201      	movs	r2, #1
 80093b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f000 fadd 	bl	8009978 <I2C_WaitOnFlagUntilTimeout>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e0d1      	b.n	800956c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2221      	movs	r2, #33	; 0x21
 80093cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2240      	movs	r2, #64	; 0x40
 80093d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6a3a      	ldr	r2, [r7, #32]
 80093e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80093e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80093f0:	88f8      	ldrh	r0, [r7, #6]
 80093f2:	893a      	ldrh	r2, [r7, #8]
 80093f4:	8979      	ldrh	r1, [r7, #10]
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	4603      	mov	r3, r0
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 f9ed 	bl	80097e0 <I2C_RequestMemoryWrite>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d005      	beq.n	8009418 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e0a9      	b.n	800956c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800941c:	b29b      	uxth	r3, r3
 800941e:	2bff      	cmp	r3, #255	; 0xff
 8009420:	d90e      	bls.n	8009440 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	22ff      	movs	r2, #255	; 0xff
 8009426:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942c:	b2da      	uxtb	r2, r3
 800942e:	8979      	ldrh	r1, [r7, #10]
 8009430:	2300      	movs	r3, #0
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 fc57 	bl	8009cec <I2C_TransferConfig>
 800943e:	e00f      	b.n	8009460 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009444:	b29a      	uxth	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800944e:	b2da      	uxtb	r2, r3
 8009450:	8979      	ldrh	r1, [r7, #10]
 8009452:	2300      	movs	r3, #0
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 fc46 	bl	8009cec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f000 fad6 	bl	8009a16 <I2C_WaitOnTXISFlagUntilTimeout>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e07b      	b.n	800956c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009478:	781a      	ldrb	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	1c5a      	adds	r2, r3, #1
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800948e:	b29b      	uxth	r3, r3
 8009490:	3b01      	subs	r3, #1
 8009492:	b29a      	uxth	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800949c:	3b01      	subs	r3, #1
 800949e:	b29a      	uxth	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d034      	beq.n	8009518 <HAL_I2C_Mem_Write+0x1c8>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d130      	bne.n	8009518 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094bc:	2200      	movs	r2, #0
 80094be:	2180      	movs	r1, #128	; 0x80
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 fa59 	bl	8009978 <I2C_WaitOnFlagUntilTimeout>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e04d      	b.n	800956c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	2bff      	cmp	r3, #255	; 0xff
 80094d8:	d90e      	bls.n	80094f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	22ff      	movs	r2, #255	; 0xff
 80094de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	8979      	ldrh	r1, [r7, #10]
 80094e8:	2300      	movs	r3, #0
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 fbfb 	bl	8009cec <I2C_TransferConfig>
 80094f6:	e00f      	b.n	8009518 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009506:	b2da      	uxtb	r2, r3
 8009508:	8979      	ldrh	r1, [r7, #10]
 800950a:	2300      	movs	r3, #0
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f000 fbea 	bl	8009cec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800951c:	b29b      	uxth	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d19e      	bne.n	8009460 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 fabc 	bl	8009aa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e01a      	b.n	800956c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2220      	movs	r2, #32
 800953c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	6859      	ldr	r1, [r3, #4]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	4b0a      	ldr	r3, [pc, #40]	; (8009574 <HAL_I2C_Mem_Write+0x224>)
 800954a:	400b      	ands	r3, r1
 800954c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2220      	movs	r2, #32
 8009552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	e000      	b.n	800956c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800956a:	2302      	movs	r3, #2
  }
}
 800956c:	4618      	mov	r0, r3
 800956e:	3718      	adds	r7, #24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	fe00e800 	.word	0xfe00e800

08009578 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b088      	sub	sp, #32
 800957c:	af02      	add	r7, sp, #8
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	4608      	mov	r0, r1
 8009582:	4611      	mov	r1, r2
 8009584:	461a      	mov	r2, r3
 8009586:	4603      	mov	r3, r0
 8009588:	817b      	strh	r3, [r7, #10]
 800958a:	460b      	mov	r3, r1
 800958c:	813b      	strh	r3, [r7, #8]
 800958e:	4613      	mov	r3, r2
 8009590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b20      	cmp	r3, #32
 800959c:	f040 80fd 	bne.w	800979a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80095a0:	6a3b      	ldr	r3, [r7, #32]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d002      	beq.n	80095ac <HAL_I2C_Mem_Read+0x34>
 80095a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d105      	bne.n	80095b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e0f1      	b.n	800979c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d101      	bne.n	80095c6 <HAL_I2C_Mem_Read+0x4e>
 80095c2:	2302      	movs	r3, #2
 80095c4:	e0ea      	b.n	800979c <HAL_I2C_Mem_Read+0x224>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80095ce:	f7fc fe4b 	bl	8006268 <HAL_GetTick>
 80095d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	2319      	movs	r3, #25
 80095da:	2201      	movs	r2, #1
 80095dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 f9c9 	bl	8009978 <I2C_WaitOnFlagUntilTimeout>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e0d5      	b.n	800979c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2222      	movs	r2, #34	; 0x22
 80095f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2240      	movs	r2, #64	; 0x40
 80095fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6a3a      	ldr	r2, [r7, #32]
 800960a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009610:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009618:	88f8      	ldrh	r0, [r7, #6]
 800961a:	893a      	ldrh	r2, [r7, #8]
 800961c:	8979      	ldrh	r1, [r7, #10]
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	4603      	mov	r3, r0
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 f92d 	bl	8009888 <I2C_RequestMemoryRead>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d005      	beq.n	8009640 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e0ad      	b.n	800979c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009644:	b29b      	uxth	r3, r3
 8009646:	2bff      	cmp	r3, #255	; 0xff
 8009648:	d90e      	bls.n	8009668 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	22ff      	movs	r2, #255	; 0xff
 800964e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009654:	b2da      	uxtb	r2, r3
 8009656:	8979      	ldrh	r1, [r7, #10]
 8009658:	4b52      	ldr	r3, [pc, #328]	; (80097a4 <HAL_I2C_Mem_Read+0x22c>)
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 fb43 	bl	8009cec <I2C_TransferConfig>
 8009666:	e00f      	b.n	8009688 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800966c:	b29a      	uxth	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009676:	b2da      	uxtb	r2, r3
 8009678:	8979      	ldrh	r1, [r7, #10]
 800967a:	4b4a      	ldr	r3, [pc, #296]	; (80097a4 <HAL_I2C_Mem_Read+0x22c>)
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 fb32 	bl	8009cec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	2200      	movs	r2, #0
 8009690:	2104      	movs	r1, #4
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f000 f970 	bl	8009978 <I2C_WaitOnFlagUntilTimeout>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e07c      	b.n	800979c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ac:	b2d2      	uxtb	r2, r2
 80096ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b4:	1c5a      	adds	r2, r3, #1
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096be:	3b01      	subs	r3, #1
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	3b01      	subs	r3, #1
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d8:	b29b      	uxth	r3, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d034      	beq.n	8009748 <HAL_I2C_Mem_Read+0x1d0>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d130      	bne.n	8009748 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	2200      	movs	r2, #0
 80096ee:	2180      	movs	r1, #128	; 0x80
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 f941 	bl	8009978 <I2C_WaitOnFlagUntilTimeout>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e04d      	b.n	800979c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009704:	b29b      	uxth	r3, r3
 8009706:	2bff      	cmp	r3, #255	; 0xff
 8009708:	d90e      	bls.n	8009728 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	22ff      	movs	r2, #255	; 0xff
 800970e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009714:	b2da      	uxtb	r2, r3
 8009716:	8979      	ldrh	r1, [r7, #10]
 8009718:	2300      	movs	r3, #0
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 fae3 	bl	8009cec <I2C_TransferConfig>
 8009726:	e00f      	b.n	8009748 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800972c:	b29a      	uxth	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009736:	b2da      	uxtb	r2, r3
 8009738:	8979      	ldrh	r1, [r7, #10]
 800973a:	2300      	movs	r3, #0
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 fad2 	bl	8009cec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800974c:	b29b      	uxth	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d19a      	bne.n	8009688 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f000 f9a4 	bl	8009aa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e01a      	b.n	800979c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2220      	movs	r2, #32
 800976c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	6859      	ldr	r1, [r3, #4]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	4b0b      	ldr	r3, [pc, #44]	; (80097a8 <HAL_I2C_Mem_Read+0x230>)
 800977a:	400b      	ands	r3, r1
 800977c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2220      	movs	r2, #32
 8009782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	e000      	b.n	800979c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800979a:	2302      	movs	r3, #2
  }
}
 800979c:	4618      	mov	r0, r3
 800979e:	3718      	adds	r7, #24
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	80002400 	.word	0x80002400
 80097a8:	fe00e800 	.word	0xfe00e800

080097ac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097ba:	b2db      	uxtb	r3, r3
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af02      	add	r7, sp, #8
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	4608      	mov	r0, r1
 80097ea:	4611      	mov	r1, r2
 80097ec:	461a      	mov	r2, r3
 80097ee:	4603      	mov	r3, r0
 80097f0:	817b      	strh	r3, [r7, #10]
 80097f2:	460b      	mov	r3, r1
 80097f4:	813b      	strh	r3, [r7, #8]
 80097f6:	4613      	mov	r3, r2
 80097f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80097fa:	88fb      	ldrh	r3, [r7, #6]
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	8979      	ldrh	r1, [r7, #10]
 8009800:	4b20      	ldr	r3, [pc, #128]	; (8009884 <I2C_RequestMemoryWrite+0xa4>)
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fa6f 	bl	8009cec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800980e:	69fa      	ldr	r2, [r7, #28]
 8009810:	69b9      	ldr	r1, [r7, #24]
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 f8ff 	bl	8009a16 <I2C_WaitOnTXISFlagUntilTimeout>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e02c      	b.n	800987c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009822:	88fb      	ldrh	r3, [r7, #6]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d105      	bne.n	8009834 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009828:	893b      	ldrh	r3, [r7, #8]
 800982a:	b2da      	uxtb	r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	629a      	str	r2, [r3, #40]	; 0x28
 8009832:	e015      	b.n	8009860 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009834:	893b      	ldrh	r3, [r7, #8]
 8009836:	0a1b      	lsrs	r3, r3, #8
 8009838:	b29b      	uxth	r3, r3
 800983a:	b2da      	uxtb	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	69b9      	ldr	r1, [r7, #24]
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f000 f8e5 	bl	8009a16 <I2C_WaitOnTXISFlagUntilTimeout>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d001      	beq.n	8009856 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e012      	b.n	800987c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009856:	893b      	ldrh	r3, [r7, #8]
 8009858:	b2da      	uxtb	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	2200      	movs	r2, #0
 8009868:	2180      	movs	r1, #128	; 0x80
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 f884 	bl	8009978 <I2C_WaitOnFlagUntilTimeout>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e000      	b.n	800987c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	80002000 	.word	0x80002000

08009888 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af02      	add	r7, sp, #8
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	4608      	mov	r0, r1
 8009892:	4611      	mov	r1, r2
 8009894:	461a      	mov	r2, r3
 8009896:	4603      	mov	r3, r0
 8009898:	817b      	strh	r3, [r7, #10]
 800989a:	460b      	mov	r3, r1
 800989c:	813b      	strh	r3, [r7, #8]
 800989e:	4613      	mov	r3, r2
 80098a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80098a2:	88fb      	ldrh	r3, [r7, #6]
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	8979      	ldrh	r1, [r7, #10]
 80098a8:	4b20      	ldr	r3, [pc, #128]	; (800992c <I2C_RequestMemoryRead+0xa4>)
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	2300      	movs	r3, #0
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f000 fa1c 	bl	8009cec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098b4:	69fa      	ldr	r2, [r7, #28]
 80098b6:	69b9      	ldr	r1, [r7, #24]
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f000 f8ac 	bl	8009a16 <I2C_WaitOnTXISFlagUntilTimeout>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e02c      	b.n	8009922 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80098c8:	88fb      	ldrh	r3, [r7, #6]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d105      	bne.n	80098da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80098ce:	893b      	ldrh	r3, [r7, #8]
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	629a      	str	r2, [r3, #40]	; 0x28
 80098d8:	e015      	b.n	8009906 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80098da:	893b      	ldrh	r3, [r7, #8]
 80098dc:	0a1b      	lsrs	r3, r3, #8
 80098de:	b29b      	uxth	r3, r3
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098e8:	69fa      	ldr	r2, [r7, #28]
 80098ea:	69b9      	ldr	r1, [r7, #24]
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 f892 	bl	8009a16 <I2C_WaitOnTXISFlagUntilTimeout>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e012      	b.n	8009922 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80098fc:	893b      	ldrh	r3, [r7, #8]
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	2200      	movs	r2, #0
 800990e:	2140      	movs	r1, #64	; 0x40
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f000 f831 	bl	8009978 <I2C_WaitOnFlagUntilTimeout>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d001      	beq.n	8009920 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e000      	b.n	8009922 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	80002000 	.word	0x80002000

08009930 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	699b      	ldr	r3, [r3, #24]
 800993e:	f003 0302 	and.w	r3, r3, #2
 8009942:	2b02      	cmp	r3, #2
 8009944:	d103      	bne.n	800994e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2200      	movs	r2, #0
 800994c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	f003 0301 	and.w	r3, r3, #1
 8009958:	2b01      	cmp	r3, #1
 800995a:	d007      	beq.n	800996c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	699a      	ldr	r2, [r3, #24]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f042 0201 	orr.w	r2, r2, #1
 800996a:	619a      	str	r2, [r3, #24]
  }
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	603b      	str	r3, [r7, #0]
 8009984:	4613      	mov	r3, r2
 8009986:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009988:	e031      	b.n	80099ee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009990:	d02d      	beq.n	80099ee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009992:	f7fc fc69 	bl	8006268 <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	683a      	ldr	r2, [r7, #0]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d302      	bcc.n	80099a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d122      	bne.n	80099ee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	699a      	ldr	r2, [r3, #24]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	4013      	ands	r3, r2
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	bf0c      	ite	eq
 80099b8:	2301      	moveq	r3, #1
 80099ba:	2300      	movne	r3, #0
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	461a      	mov	r2, r3
 80099c0:	79fb      	ldrb	r3, [r7, #7]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d113      	bne.n	80099ee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ca:	f043 0220 	orr.w	r2, r3, #32
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e00f      	b.n	8009a0e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	699a      	ldr	r2, [r3, #24]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	4013      	ands	r3, r2
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	bf0c      	ite	eq
 80099fe:	2301      	moveq	r3, #1
 8009a00:	2300      	movne	r3, #0
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	461a      	mov	r2, r3
 8009a06:	79fb      	ldrb	r3, [r7, #7]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d0be      	beq.n	800998a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	60f8      	str	r0, [r7, #12]
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a22:	e033      	b.n	8009a8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 f87f 	bl	8009b2c <I2C_IsErrorOccurred>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e031      	b.n	8009a9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3e:	d025      	beq.n	8009a8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a40:	f7fc fc12 	bl	8006268 <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d302      	bcc.n	8009a56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d11a      	bne.n	8009a8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	f003 0302 	and.w	r3, r3, #2
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d013      	beq.n	8009a8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a68:	f043 0220 	orr.w	r2, r3, #32
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2220      	movs	r2, #32
 8009a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e007      	b.n	8009a9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	f003 0302 	and.w	r3, r3, #2
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d1c4      	bne.n	8009a24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ab0:	e02f      	b.n	8009b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	68b9      	ldr	r1, [r7, #8]
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f000 f838 	bl	8009b2c <I2C_IsErrorOccurred>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e02d      	b.n	8009b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ac6:	f7fc fbcf 	bl	8006268 <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d302      	bcc.n	8009adc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d11a      	bne.n	8009b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	f003 0320 	and.w	r3, r3, #32
 8009ae6:	2b20      	cmp	r3, #32
 8009ae8:	d013      	beq.n	8009b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aee:	f043 0220 	orr.w	r2, r3, #32
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2220      	movs	r2, #32
 8009afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e007      	b.n	8009b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	f003 0320 	and.w	r3, r3, #32
 8009b1c:	2b20      	cmp	r3, #32
 8009b1e:	d1c8      	bne.n	8009ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b08a      	sub	sp, #40	; 0x28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	f003 0310 	and.w	r3, r3, #16
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d068      	beq.n	8009c2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2210      	movs	r2, #16
 8009b5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b60:	e049      	b.n	8009bf6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b68:	d045      	beq.n	8009bf6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009b6a:	f7fc fb7d 	bl	8006268 <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	68ba      	ldr	r2, [r7, #8]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d302      	bcc.n	8009b80 <I2C_IsErrorOccurred+0x54>
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d13a      	bne.n	8009bf6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba2:	d121      	bne.n	8009be8 <I2C_IsErrorOccurred+0xbc>
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009baa:	d01d      	beq.n	8009be8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009bac:	7cfb      	ldrb	r3, [r7, #19]
 8009bae:	2b20      	cmp	r3, #32
 8009bb0:	d01a      	beq.n	8009be8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bc0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009bc2:	f7fc fb51 	bl	8006268 <HAL_GetTick>
 8009bc6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009bc8:	e00e      	b.n	8009be8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009bca:	f7fc fb4d 	bl	8006268 <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	2b19      	cmp	r3, #25
 8009bd6:	d907      	bls.n	8009be8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	f043 0320 	orr.w	r3, r3, #32
 8009bde:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009be6:	e006      	b.n	8009bf6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b20      	cmp	r3, #32
 8009bf4:	d1e9      	bne.n	8009bca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	f003 0320 	and.w	r3, r3, #32
 8009c00:	2b20      	cmp	r3, #32
 8009c02:	d003      	beq.n	8009c0c <I2C_IsErrorOccurred+0xe0>
 8009c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d0aa      	beq.n	8009b62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d103      	bne.n	8009c1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2220      	movs	r2, #32
 8009c1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	f043 0304 	orr.w	r3, r3, #4
 8009c22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00b      	beq.n	8009c54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	f043 0301 	orr.w	r3, r3, #1
 8009c42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00b      	beq.n	8009c76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	f043 0308 	orr.w	r3, r3, #8
 8009c64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00b      	beq.n	8009c98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	f043 0302 	orr.w	r3, r3, #2
 8009c86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d01c      	beq.n	8009cda <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f7ff fe45 	bl	8009930 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6859      	ldr	r1, [r3, #4]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	4b0d      	ldr	r3, [pc, #52]	; (8009ce8 <I2C_IsErrorOccurred+0x1bc>)
 8009cb2:	400b      	ands	r3, r1
 8009cb4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	431a      	orrs	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009cda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3728      	adds	r7, #40	; 0x28
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	fe00e800 	.word	0xfe00e800

08009cec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	607b      	str	r3, [r7, #4]
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	817b      	strh	r3, [r7, #10]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009cfe:	897b      	ldrh	r3, [r7, #10]
 8009d00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d04:	7a7b      	ldrb	r3, [r7, #9]
 8009d06:	041b      	lsls	r3, r3, #16
 8009d08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d0c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d1a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	685a      	ldr	r2, [r3, #4]
 8009d22:	6a3b      	ldr	r3, [r7, #32]
 8009d24:	0d5b      	lsrs	r3, r3, #21
 8009d26:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009d2a:	4b08      	ldr	r3, [pc, #32]	; (8009d4c <I2C_TransferConfig+0x60>)
 8009d2c:	430b      	orrs	r3, r1
 8009d2e:	43db      	mvns	r3, r3
 8009d30:	ea02 0103 	and.w	r1, r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	697a      	ldr	r2, [r7, #20]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009d3e:	bf00      	nop
 8009d40:	371c      	adds	r7, #28
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	03ff63ff 	.word	0x03ff63ff

08009d50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b20      	cmp	r3, #32
 8009d64:	d138      	bne.n	8009dd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d101      	bne.n	8009d74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009d70:	2302      	movs	r3, #2
 8009d72:	e032      	b.n	8009dda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2224      	movs	r2, #36	; 0x24
 8009d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 0201 	bic.w	r2, r2, #1
 8009d92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009da2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6819      	ldr	r1, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	430a      	orrs	r2, r1
 8009db2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f042 0201 	orr.w	r2, r2, #1
 8009dc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	e000      	b.n	8009dda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009dd8:	2302      	movs	r3, #2
  }
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b085      	sub	sp, #20
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b20      	cmp	r3, #32
 8009dfa:	d139      	bne.n	8009e70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d101      	bne.n	8009e0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009e06:	2302      	movs	r3, #2
 8009e08:	e033      	b.n	8009e72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2224      	movs	r2, #36	; 0x24
 8009e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f022 0201 	bic.w	r2, r2, #1
 8009e28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	021b      	lsls	r3, r3, #8
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f042 0201 	orr.w	r2, r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	e000      	b.n	8009e72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009e70:	2302      	movs	r3, #2
  }
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
	...

08009e80 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e0bf      	b.n	800a012 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d106      	bne.n	8009eac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f8ba 	bl	800a020 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	699a      	ldr	r2, [r3, #24]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009ec2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6999      	ldr	r1, [r3, #24]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009ed8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6899      	ldr	r1, [r3, #8]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	4b4a      	ldr	r3, [pc, #296]	; (800a01c <HAL_LTDC_Init+0x19c>)
 8009ef4:	400b      	ands	r3, r1
 8009ef6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	041b      	lsls	r3, r3, #16
 8009efe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6899      	ldr	r1, [r3, #8]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	699a      	ldr	r2, [r3, #24]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	431a      	orrs	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68d9      	ldr	r1, [r3, #12]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	4b3e      	ldr	r3, [pc, #248]	; (800a01c <HAL_LTDC_Init+0x19c>)
 8009f22:	400b      	ands	r3, r1
 8009f24:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	69db      	ldr	r3, [r3, #28]
 8009f2a:	041b      	lsls	r3, r3, #16
 8009f2c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68d9      	ldr	r1, [r3, #12]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a1a      	ldr	r2, [r3, #32]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	430a      	orrs	r2, r1
 8009f42:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6919      	ldr	r1, [r3, #16]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	4b33      	ldr	r3, [pc, #204]	; (800a01c <HAL_LTDC_Init+0x19c>)
 8009f50:	400b      	ands	r3, r1
 8009f52:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f58:	041b      	lsls	r3, r3, #16
 8009f5a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6919      	ldr	r1, [r3, #16]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6959      	ldr	r1, [r3, #20]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	4b27      	ldr	r3, [pc, #156]	; (800a01c <HAL_LTDC_Init+0x19c>)
 8009f7e:	400b      	ands	r3, r1
 8009f80:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f86:	041b      	lsls	r3, r3, #16
 8009f88:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6959      	ldr	r1, [r3, #20]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	431a      	orrs	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009fa6:	021b      	lsls	r3, r3, #8
 8009fa8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009fb0:	041b      	lsls	r3, r3, #16
 8009fb2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	430a      	orrs	r2, r1
 8009fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f042 0206 	orr.w	r2, r2, #6
 8009fee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	699a      	ldr	r2, [r3, #24]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f042 0201 	orr.w	r2, r2, #1
 8009ffe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	f000f800 	.word	0xf000f800

0800a020 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a034:	b5b0      	push	{r4, r5, r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a046:	2b01      	cmp	r3, #1
 800a048:	d101      	bne.n	800a04e <HAL_LTDC_ConfigLayer+0x1a>
 800a04a:	2302      	movs	r3, #2
 800a04c:	e02c      	b.n	800a0a8 <HAL_LTDC_ConfigLayer+0x74>
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2202      	movs	r2, #2
 800a05a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2134      	movs	r1, #52	; 0x34
 800a064:	fb01 f303 	mul.w	r3, r1, r3
 800a068:	4413      	add	r3, r2
 800a06a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	4614      	mov	r4, r2
 800a072:	461d      	mov	r5, r3
 800a074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a07a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a07c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a07e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a080:	682b      	ldr	r3, [r5, #0]
 800a082:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 f811 	bl	800a0b0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2201      	movs	r2, #1
 800a094:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bdb0      	pop	{r4, r5, r7, pc}

0800a0b0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b089      	sub	sp, #36	; 0x24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	685a      	ldr	r2, [r3, #4]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	0c1b      	lsrs	r3, r3, #16
 800a0c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0cc:	4413      	add	r3, r2
 800a0ce:	041b      	lsls	r3, r3, #16
 800a0d0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	01db      	lsls	r3, r3, #7
 800a0dc:	4413      	add	r3, r2
 800a0de:	3384      	adds	r3, #132	; 0x84
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	6812      	ldr	r2, [r2, #0]
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	01d2      	lsls	r2, r2, #7
 800a0ec:	440a      	add	r2, r1
 800a0ee:	3284      	adds	r2, #132	; 0x84
 800a0f0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a0f4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	0c1b      	lsrs	r3, r3, #16
 800a102:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a106:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a108:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4619      	mov	r1, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	01db      	lsls	r3, r3, #7
 800a114:	440b      	add	r3, r1
 800a116:	3384      	adds	r3, #132	; 0x84
 800a118:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a11e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	68da      	ldr	r2, [r3, #12]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a12e:	4413      	add	r3, r2
 800a130:	041b      	lsls	r3, r3, #16
 800a132:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	461a      	mov	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	01db      	lsls	r3, r3, #7
 800a13e:	4413      	add	r3, r2
 800a140:	3384      	adds	r3, #132	; 0x84
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	6812      	ldr	r2, [r2, #0]
 800a148:	4611      	mov	r1, r2
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	01d2      	lsls	r2, r2, #7
 800a14e:	440a      	add	r2, r1
 800a150:	3284      	adds	r2, #132	; 0x84
 800a152:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a156:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	689a      	ldr	r2, [r3, #8]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a166:	4413      	add	r3, r2
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4619      	mov	r1, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	01db      	lsls	r3, r3, #7
 800a174:	440b      	add	r3, r1
 800a176:	3384      	adds	r3, #132	; 0x84
 800a178:	4619      	mov	r1, r3
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	461a      	mov	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	01db      	lsls	r3, r3, #7
 800a18a:	4413      	add	r3, r2
 800a18c:	3384      	adds	r3, #132	; 0x84
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	6812      	ldr	r2, [r2, #0]
 800a194:	4611      	mov	r1, r2
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	01d2      	lsls	r2, r2, #7
 800a19a:	440a      	add	r2, r1
 800a19c:	3284      	adds	r2, #132	; 0x84
 800a19e:	f023 0307 	bic.w	r3, r3, #7
 800a1a2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	01db      	lsls	r3, r3, #7
 800a1ae:	4413      	add	r3, r2
 800a1b0:	3384      	adds	r3, #132	; 0x84
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1c0:	021b      	lsls	r3, r3, #8
 800a1c2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a1ca:	041b      	lsls	r3, r3, #16
 800a1cc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	061b      	lsls	r3, r3, #24
 800a1d4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	01db      	lsls	r3, r3, #7
 800a1e0:	4413      	add	r3, r2
 800a1e2:	3384      	adds	r3, #132	; 0x84
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	01db      	lsls	r3, r3, #7
 800a1f0:	4413      	add	r3, r2
 800a1f2:	3384      	adds	r3, #132	; 0x84
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a200:	461a      	mov	r2, r3
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	431a      	orrs	r2, r3
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	431a      	orrs	r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4619      	mov	r1, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	01db      	lsls	r3, r3, #7
 800a214:	440b      	add	r3, r1
 800a216:	3384      	adds	r3, #132	; 0x84
 800a218:	4619      	mov	r1, r3
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	461a      	mov	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	01db      	lsls	r3, r3, #7
 800a22a:	4413      	add	r3, r2
 800a22c:	3384      	adds	r3, #132	; 0x84
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	6812      	ldr	r2, [r2, #0]
 800a234:	4611      	mov	r1, r2
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	01d2      	lsls	r2, r2, #7
 800a23a:	440a      	add	r2, r1
 800a23c:	3284      	adds	r2, #132	; 0x84
 800a23e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a242:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	461a      	mov	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	01db      	lsls	r3, r3, #7
 800a24e:	4413      	add	r3, r2
 800a250:	3384      	adds	r3, #132	; 0x84
 800a252:	461a      	mov	r2, r3
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	01db      	lsls	r3, r3, #7
 800a264:	4413      	add	r3, r2
 800a266:	3384      	adds	r3, #132	; 0x84
 800a268:	69da      	ldr	r2, [r3, #28]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4619      	mov	r1, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	01db      	lsls	r3, r3, #7
 800a274:	440b      	add	r3, r1
 800a276:	3384      	adds	r3, #132	; 0x84
 800a278:	4619      	mov	r1, r3
 800a27a:	4b58      	ldr	r3, [pc, #352]	; (800a3dc <LTDC_SetConfig+0x32c>)
 800a27c:	4013      	ands	r3, r2
 800a27e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	69da      	ldr	r2, [r3, #28]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	6a1b      	ldr	r3, [r3, #32]
 800a288:	68f9      	ldr	r1, [r7, #12]
 800a28a:	6809      	ldr	r1, [r1, #0]
 800a28c:	4608      	mov	r0, r1
 800a28e:	6879      	ldr	r1, [r7, #4]
 800a290:	01c9      	lsls	r1, r1, #7
 800a292:	4401      	add	r1, r0
 800a294:	3184      	adds	r1, #132	; 0x84
 800a296:	4313      	orrs	r3, r2
 800a298:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	01db      	lsls	r3, r3, #7
 800a2a4:	4413      	add	r3, r2
 800a2a6:	3384      	adds	r3, #132	; 0x84
 800a2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	01db      	lsls	r3, r3, #7
 800a2b4:	4413      	add	r3, r2
 800a2b6:	3384      	adds	r3, #132	; 0x84
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	01db      	lsls	r3, r3, #7
 800a2c8:	4413      	add	r3, r2
 800a2ca:	3384      	adds	r3, #132	; 0x84
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d102      	bne.n	800a2e2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a2dc:	2304      	movs	r3, #4
 800a2de:	61fb      	str	r3, [r7, #28]
 800a2e0:	e01b      	b.n	800a31a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d102      	bne.n	800a2f0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	61fb      	str	r3, [r7, #28]
 800a2ee:	e014      	b.n	800a31a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	2b04      	cmp	r3, #4
 800a2f6:	d00b      	beq.n	800a310 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d007      	beq.n	800a310 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a304:	2b03      	cmp	r3, #3
 800a306:	d003      	beq.n	800a310 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a30c:	2b07      	cmp	r3, #7
 800a30e:	d102      	bne.n	800a316 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a310:	2302      	movs	r3, #2
 800a312:	61fb      	str	r3, [r7, #28]
 800a314:	e001      	b.n	800a31a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a316:	2301      	movs	r3, #1
 800a318:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	01db      	lsls	r3, r3, #7
 800a324:	4413      	add	r3, r2
 800a326:	3384      	adds	r3, #132	; 0x84
 800a328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	6812      	ldr	r2, [r2, #0]
 800a32e:	4611      	mov	r1, r2
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	01d2      	lsls	r2, r2, #7
 800a334:	440a      	add	r2, r1
 800a336:	3284      	adds	r2, #132	; 0x84
 800a338:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a33c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a342:	69fa      	ldr	r2, [r7, #28]
 800a344:	fb02 f303 	mul.w	r3, r2, r3
 800a348:	041a      	lsls	r2, r3, #16
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	6859      	ldr	r1, [r3, #4]
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	1acb      	subs	r3, r1, r3
 800a354:	69f9      	ldr	r1, [r7, #28]
 800a356:	fb01 f303 	mul.w	r3, r1, r3
 800a35a:	3307      	adds	r3, #7
 800a35c:	68f9      	ldr	r1, [r7, #12]
 800a35e:	6809      	ldr	r1, [r1, #0]
 800a360:	4608      	mov	r0, r1
 800a362:	6879      	ldr	r1, [r7, #4]
 800a364:	01c9      	lsls	r1, r1, #7
 800a366:	4401      	add	r1, r0
 800a368:	3184      	adds	r1, #132	; 0x84
 800a36a:	4313      	orrs	r3, r2
 800a36c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	01db      	lsls	r3, r3, #7
 800a378:	4413      	add	r3, r2
 800a37a:	3384      	adds	r3, #132	; 0x84
 800a37c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4619      	mov	r1, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	01db      	lsls	r3, r3, #7
 800a388:	440b      	add	r3, r1
 800a38a:	3384      	adds	r3, #132	; 0x84
 800a38c:	4619      	mov	r1, r3
 800a38e:	4b14      	ldr	r3, [pc, #80]	; (800a3e0 <LTDC_SetConfig+0x330>)
 800a390:	4013      	ands	r3, r2
 800a392:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	461a      	mov	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	01db      	lsls	r3, r3, #7
 800a39e:	4413      	add	r3, r2
 800a3a0:	3384      	adds	r3, #132	; 0x84
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	01db      	lsls	r3, r3, #7
 800a3b4:	4413      	add	r3, r2
 800a3b6:	3384      	adds	r3, #132	; 0x84
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	6812      	ldr	r2, [r2, #0]
 800a3be:	4611      	mov	r1, r2
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	01d2      	lsls	r2, r2, #7
 800a3c4:	440a      	add	r2, r1
 800a3c6:	3284      	adds	r2, #132	; 0x84
 800a3c8:	f043 0301 	orr.w	r3, r3, #1
 800a3cc:	6013      	str	r3, [r2, #0]
}
 800a3ce:	bf00      	nop
 800a3d0:	3724      	adds	r7, #36	; 0x24
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	fffff8f8 	.word	0xfffff8f8
 800a3e0:	fffff800 	.word	0xfffff800

0800a3e4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a3ec:	f7fb ff3c 	bl	8006268 <HAL_GetTick>
 800a3f0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e03b      	b.n	800a474 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2202      	movs	r2, #2
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68da      	ldr	r2, [r3, #12]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f022 0201 	bic.w	r2, r2, #1
 800a41a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a41c:	e00f      	b.n	800a43e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800a41e:	f7fb ff23 	bl	8006268 <HAL_GetTick>
 800a422:	4602      	mov	r2, r0
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	2b05      	cmp	r3, #5
 800a42a:	d908      	bls.n	800a43e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2240      	movs	r2, #64	; 0x40
 800a430:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2203      	movs	r2, #3
 800a436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e01a      	b.n	800a474 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	f003 0301 	and.w	r3, r3, #1
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1e8      	bne.n	800a41e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f9c1 	bl	800a7d4 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d101      	bne.n	800a48e <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e048      	b.n	800a520 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68da      	ldr	r2, [r3, #12]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f022 0201 	bic.w	r2, r2, #1
 800a49c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	221f      	movs	r2, #31
 800a4f4:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a538:	4b91      	ldr	r3, [pc, #580]	; (800a780 <HAL_MDMA_IRQHandler+0x254>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a91      	ldr	r2, [pc, #580]	; (800a784 <HAL_MDMA_IRQHandler+0x258>)
 800a53e:	fba2 2303 	umull	r2, r3, r2, r3
 800a542:	0a9b      	lsrs	r3, r3, #10
 800a544:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	461a      	mov	r2, r3
 800a54c:	4b8e      	ldr	r3, [pc, #568]	; (800a788 <HAL_MDMA_IRQHandler+0x25c>)
 800a54e:	4413      	add	r3, r2
 800a550:	099b      	lsrs	r3, r3, #6
 800a552:	f003 031f 	and.w	r3, r3, #31
 800a556:	2201      	movs	r2, #1
 800a558:	fa02 f303 	lsl.w	r3, r2, r3
 800a55c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a55e:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	4013      	ands	r3, r2
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f000 812d 	beq.w	800a7c8 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 0301 	and.w	r3, r3, #1
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d054      	beq.n	800a626 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	f003 0302 	and.w	r3, r3, #2
 800a586:	2b00      	cmp	r3, #0
 800a588:	d04d      	beq.n	800a626 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68da      	ldr	r2, [r3, #12]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f022 0202 	bic.w	r2, r2, #2
 800a598:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d106      	bne.n	800a5ba <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5b0:	f043 0201 	orr.w	r2, r3, #1
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	669a      	str	r2, [r3, #104]	; 0x68
 800a5b8:	e005      	b.n	800a5c6 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5be:	f043 0202 	orr.w	r2, r3, #2
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d005      	beq.n	800a5dc <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5d4:	f043 0204 	orr.w	r2, r3, #4
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d005      	beq.n	800a5f2 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5ea:	f043 0208 	orr.w	r2, r3, #8
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d005      	beq.n	800a608 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a600:	f043 0210 	orr.w	r2, r3, #16
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d005      	beq.n	800a61e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a616:	f043 0220 	orr.w	r2, r3, #32
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2201      	movs	r2, #1
 800a624:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 0310 	and.w	r3, r3, #16
 800a630:	2b00      	cmp	r3, #0
 800a632:	d012      	beq.n	800a65a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	f003 0320 	and.w	r3, r3, #32
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00b      	beq.n	800a65a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2210      	movs	r2, #16
 800a648:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d003      	beq.n	800a65a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 0308 	and.w	r3, r3, #8
 800a664:	2b00      	cmp	r3, #0
 800a666:	d012      	beq.n	800a68e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	f003 0310 	and.w	r3, r3, #16
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00b      	beq.n	800a68e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2208      	movs	r2, #8
 800a67c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0304 	and.w	r3, r3, #4
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d012      	beq.n	800a6c2 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	f003 0308 	and.w	r3, r3, #8
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00b      	beq.n	800a6c2 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2204      	movs	r2, #4
 800a6b0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 0302 	and.w	r3, r3, #2
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d039      	beq.n	800a744 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f003 0304 	and.w	r3, r3, #4
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d032      	beq.n	800a744 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	68da      	ldr	r2, [r3, #12]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800a6ec:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d110      	bne.n	800a71c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d05c      	beq.n	800a7cc <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	4798      	blx	r3
        }
        return;
 800a71a:	e057      	b.n	800a7cc <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2202      	movs	r2, #2
 800a722:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d003      	beq.n	800a744 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d040      	beq.n	800a7ce <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2204      	movs	r2, #4
 800a750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68da      	ldr	r2, [r3, #12]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f022 0201 	bic.w	r2, r2, #1
 800a762:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	3301      	adds	r3, #1
 800a768:	60bb      	str	r3, [r7, #8]
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d30d      	bcc.n	800a78c <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	f003 0301 	and.w	r3, r3, #1
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1f2      	bne.n	800a764 <HAL_MDMA_IRQHandler+0x238>
 800a77e:	e006      	b.n	800a78e <HAL_MDMA_IRQHandler+0x262>
 800a780:	24000004 	.word	0x24000004
 800a784:	1b4e81b5 	.word	0x1b4e81b5
 800a788:	adffffc0 	.word	0xadffffc0
        break;
 800a78c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d004      	beq.n	800a7ae <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2203      	movs	r2, #3
 800a7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a7ac:	e003      	b.n	800a7b6 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d007      	beq.n	800a7ce <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	4798      	blx	r3
 800a7c6:	e002      	b.n	800a7ce <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800a7c8:	bf00      	nop
 800a7ca:	e000      	b.n	800a7ce <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800a7cc:	bf00      	nop
    }
  }
}
 800a7ce:	3718      	adds	r7, #24
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	68d9      	ldr	r1, [r3, #12]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	691a      	ldr	r2, [r3, #16]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	695a      	ldr	r2, [r3, #20]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800a7fa:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800a806:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800a812:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a818:	3b01      	subs	r3, #1
 800a81a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800a81c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800a828:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800a82a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a834:	d107      	bne.n	800a846 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	691a      	ldr	r2, [r3, #16]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800a844:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2200      	movs	r2, #0
 800a84c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a852:	2b00      	cmp	r3, #0
 800a854:	da11      	bge.n	800a87a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	695a      	ldr	r2, [r3, #20]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a864:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a86a:	425b      	negs	r3, r3
 800a86c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	b292      	uxth	r2, r2
 800a876:	621a      	str	r2, [r3, #32]
 800a878:	e006      	b.n	800a888 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a87e:	461a      	mov	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	b292      	uxth	r2, r2
 800a886:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	da15      	bge.n	800a8bc <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	695a      	ldr	r2, [r3, #20]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a89e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a4:	425b      	negs	r3, r3
 800a8a6:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6a19      	ldr	r1, [r3, #32]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	041a      	lsls	r2, r3, #16
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	430a      	orrs	r2, r1
 800a8b8:	621a      	str	r2, [r3, #32]
 800a8ba:	e009      	b.n	800a8d0 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6a19      	ldr	r1, [r3, #32]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c6:	041a      	lsls	r2, r3, #16
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	430a      	orrs	r2, r1
 800a8ce:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8d8:	d006      	beq.n	800a8e8 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	685a      	ldr	r2, [r3, #4]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	b2d2      	uxtb	r2, r2
 800a8e4:	629a      	str	r2, [r3, #40]	; 0x28
 800a8e6:	e003      	b.n	800a8f0 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a8f8:	bf00      	nop
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a90c:	4b19      	ldr	r3, [pc, #100]	; (800a974 <HAL_PWREx_ConfigSupply+0x70>)
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	f003 0304 	and.w	r3, r3, #4
 800a914:	2b04      	cmp	r3, #4
 800a916:	d00a      	beq.n	800a92e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a918:	4b16      	ldr	r3, [pc, #88]	; (800a974 <HAL_PWREx_ConfigSupply+0x70>)
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	f003 0307 	and.w	r3, r3, #7
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	429a      	cmp	r2, r3
 800a924:	d001      	beq.n	800a92a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e01f      	b.n	800a96a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	e01d      	b.n	800a96a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a92e:	4b11      	ldr	r3, [pc, #68]	; (800a974 <HAL_PWREx_ConfigSupply+0x70>)
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	f023 0207 	bic.w	r2, r3, #7
 800a936:	490f      	ldr	r1, [pc, #60]	; (800a974 <HAL_PWREx_ConfigSupply+0x70>)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a93e:	f7fb fc93 	bl	8006268 <HAL_GetTick>
 800a942:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a944:	e009      	b.n	800a95a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a946:	f7fb fc8f 	bl	8006268 <HAL_GetTick>
 800a94a:	4602      	mov	r2, r0
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a954:	d901      	bls.n	800a95a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e007      	b.n	800a96a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a95a:	4b06      	ldr	r3, [pc, #24]	; (800a974 <HAL_PWREx_ConfigSupply+0x70>)
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a966:	d1ee      	bne.n	800a946 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	58024800 	.word	0x58024800

0800a978 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08c      	sub	sp, #48	; 0x30
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d102      	bne.n	800a98c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	f000 bc48 	b.w	800b21c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	2b00      	cmp	r3, #0
 800a996:	f000 8088 	beq.w	800aaaa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a99a:	4b99      	ldr	r3, [pc, #612]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a9a4:	4b96      	ldr	r3, [pc, #600]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800a9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	2b10      	cmp	r3, #16
 800a9ae:	d007      	beq.n	800a9c0 <HAL_RCC_OscConfig+0x48>
 800a9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b2:	2b18      	cmp	r3, #24
 800a9b4:	d111      	bne.n	800a9da <HAL_RCC_OscConfig+0x62>
 800a9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b8:	f003 0303 	and.w	r3, r3, #3
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d10c      	bne.n	800a9da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9c0:	4b8f      	ldr	r3, [pc, #572]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d06d      	beq.n	800aaa8 <HAL_RCC_OscConfig+0x130>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d169      	bne.n	800aaa8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	f000 bc21 	b.w	800b21c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9e2:	d106      	bne.n	800a9f2 <HAL_RCC_OscConfig+0x7a>
 800a9e4:	4b86      	ldr	r3, [pc, #536]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a85      	ldr	r2, [pc, #532]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800a9ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	e02e      	b.n	800aa50 <HAL_RCC_OscConfig+0xd8>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10c      	bne.n	800aa14 <HAL_RCC_OscConfig+0x9c>
 800a9fa:	4b81      	ldr	r3, [pc, #516]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a80      	ldr	r2, [pc, #512]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aa00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa04:	6013      	str	r3, [r2, #0]
 800aa06:	4b7e      	ldr	r3, [pc, #504]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a7d      	ldr	r2, [pc, #500]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aa0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa10:	6013      	str	r3, [r2, #0]
 800aa12:	e01d      	b.n	800aa50 <HAL_RCC_OscConfig+0xd8>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa1c:	d10c      	bne.n	800aa38 <HAL_RCC_OscConfig+0xc0>
 800aa1e:	4b78      	ldr	r3, [pc, #480]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a77      	ldr	r2, [pc, #476]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aa24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	4b75      	ldr	r3, [pc, #468]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a74      	ldr	r2, [pc, #464]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aa30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa34:	6013      	str	r3, [r2, #0]
 800aa36:	e00b      	b.n	800aa50 <HAL_RCC_OscConfig+0xd8>
 800aa38:	4b71      	ldr	r3, [pc, #452]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a70      	ldr	r2, [pc, #448]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aa3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa42:	6013      	str	r3, [r2, #0]
 800aa44:	4b6e      	ldr	r3, [pc, #440]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a6d      	ldr	r2, [pc, #436]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aa4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d013      	beq.n	800aa80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa58:	f7fb fc06 	bl	8006268 <HAL_GetTick>
 800aa5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa5e:	e008      	b.n	800aa72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa60:	f7fb fc02 	bl	8006268 <HAL_GetTick>
 800aa64:	4602      	mov	r2, r0
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	2b64      	cmp	r3, #100	; 0x64
 800aa6c:	d901      	bls.n	800aa72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e3d4      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa72:	4b63      	ldr	r3, [pc, #396]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d0f0      	beq.n	800aa60 <HAL_RCC_OscConfig+0xe8>
 800aa7e:	e014      	b.n	800aaaa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa80:	f7fb fbf2 	bl	8006268 <HAL_GetTick>
 800aa84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa86:	e008      	b.n	800aa9a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa88:	f7fb fbee 	bl	8006268 <HAL_GetTick>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	2b64      	cmp	r3, #100	; 0x64
 800aa94:	d901      	bls.n	800aa9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800aa96:	2303      	movs	r3, #3
 800aa98:	e3c0      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa9a:	4b59      	ldr	r3, [pc, #356]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1f0      	bne.n	800aa88 <HAL_RCC_OscConfig+0x110>
 800aaa6:	e000      	b.n	800aaaa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aaa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f003 0302 	and.w	r3, r3, #2
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 80ca 	beq.w	800ac4c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aab8:	4b51      	ldr	r3, [pc, #324]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aac0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aac2:	4b4f      	ldr	r3, [pc, #316]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aac8:	6a3b      	ldr	r3, [r7, #32]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d007      	beq.n	800aade <HAL_RCC_OscConfig+0x166>
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	2b18      	cmp	r3, #24
 800aad2:	d156      	bne.n	800ab82 <HAL_RCC_OscConfig+0x20a>
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	f003 0303 	and.w	r3, r3, #3
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d151      	bne.n	800ab82 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aade:	4b48      	ldr	r3, [pc, #288]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 0304 	and.w	r3, r3, #4
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d005      	beq.n	800aaf6 <HAL_RCC_OscConfig+0x17e>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e392      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aaf6:	4b42      	ldr	r3, [pc, #264]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f023 0219 	bic.w	r2, r3, #25
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	493f      	ldr	r1, [pc, #252]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800ab04:	4313      	orrs	r3, r2
 800ab06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab08:	f7fb fbae 	bl	8006268 <HAL_GetTick>
 800ab0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab0e:	e008      	b.n	800ab22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab10:	f7fb fbaa 	bl	8006268 <HAL_GetTick>
 800ab14:	4602      	mov	r2, r0
 800ab16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d901      	bls.n	800ab22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	e37c      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab22:	4b37      	ldr	r3, [pc, #220]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 0304 	and.w	r3, r3, #4
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d0f0      	beq.n	800ab10 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab2e:	f7fb fbcb 	bl	80062c8 <HAL_GetREVID>
 800ab32:	4603      	mov	r3, r0
 800ab34:	f241 0203 	movw	r2, #4099	; 0x1003
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d817      	bhi.n	800ab6c <HAL_RCC_OscConfig+0x1f4>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b40      	cmp	r3, #64	; 0x40
 800ab42:	d108      	bne.n	800ab56 <HAL_RCC_OscConfig+0x1de>
 800ab44:	4b2e      	ldr	r3, [pc, #184]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ab4c:	4a2c      	ldr	r2, [pc, #176]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800ab4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab52:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab54:	e07a      	b.n	800ac4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab56:	4b2a      	ldr	r3, [pc, #168]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	031b      	lsls	r3, r3, #12
 800ab64:	4926      	ldr	r1, [pc, #152]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800ab66:	4313      	orrs	r3, r2
 800ab68:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab6a:	e06f      	b.n	800ac4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab6c:	4b24      	ldr	r3, [pc, #144]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	061b      	lsls	r3, r3, #24
 800ab7a:	4921      	ldr	r1, [pc, #132]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab80:	e064      	b.n	800ac4c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d047      	beq.n	800ac1a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ab8a:	4b1d      	ldr	r3, [pc, #116]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f023 0219 	bic.w	r2, r3, #25
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	491a      	ldr	r1, [pc, #104]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab9c:	f7fb fb64 	bl	8006268 <HAL_GetTick>
 800aba0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aba2:	e008      	b.n	800abb6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aba4:	f7fb fb60 	bl	8006268 <HAL_GetTick>
 800aba8:	4602      	mov	r2, r0
 800abaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d901      	bls.n	800abb6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	e332      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abb6:	4b12      	ldr	r3, [pc, #72]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 0304 	and.w	r3, r3, #4
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d0f0      	beq.n	800aba4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abc2:	f7fb fb81 	bl	80062c8 <HAL_GetREVID>
 800abc6:	4603      	mov	r3, r0
 800abc8:	f241 0203 	movw	r2, #4099	; 0x1003
 800abcc:	4293      	cmp	r3, r2
 800abce:	d819      	bhi.n	800ac04 <HAL_RCC_OscConfig+0x28c>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	2b40      	cmp	r3, #64	; 0x40
 800abd6:	d108      	bne.n	800abea <HAL_RCC_OscConfig+0x272>
 800abd8:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800abe0:	4a07      	ldr	r2, [pc, #28]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800abe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abe6:	6053      	str	r3, [r2, #4]
 800abe8:	e030      	b.n	800ac4c <HAL_RCC_OscConfig+0x2d4>
 800abea:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	031b      	lsls	r3, r3, #12
 800abf8:	4901      	ldr	r1, [pc, #4]	; (800ac00 <HAL_RCC_OscConfig+0x288>)
 800abfa:	4313      	orrs	r3, r2
 800abfc:	604b      	str	r3, [r1, #4]
 800abfe:	e025      	b.n	800ac4c <HAL_RCC_OscConfig+0x2d4>
 800ac00:	58024400 	.word	0x58024400
 800ac04:	4b9a      	ldr	r3, [pc, #616]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	061b      	lsls	r3, r3, #24
 800ac12:	4997      	ldr	r1, [pc, #604]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ac14:	4313      	orrs	r3, r2
 800ac16:	604b      	str	r3, [r1, #4]
 800ac18:	e018      	b.n	800ac4c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac1a:	4b95      	ldr	r3, [pc, #596]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a94      	ldr	r2, [pc, #592]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ac20:	f023 0301 	bic.w	r3, r3, #1
 800ac24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac26:	f7fb fb1f 	bl	8006268 <HAL_GetTick>
 800ac2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac2c:	e008      	b.n	800ac40 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac2e:	f7fb fb1b 	bl	8006268 <HAL_GetTick>
 800ac32:	4602      	mov	r2, r0
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d901      	bls.n	800ac40 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	e2ed      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac40:	4b8b      	ldr	r3, [pc, #556]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 0304 	and.w	r3, r3, #4
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1f0      	bne.n	800ac2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 0310 	and.w	r3, r3, #16
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 80a9 	beq.w	800adac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac5a:	4b85      	ldr	r3, [pc, #532]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ac64:	4b82      	ldr	r3, [pc, #520]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ac66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac68:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	2b08      	cmp	r3, #8
 800ac6e:	d007      	beq.n	800ac80 <HAL_RCC_OscConfig+0x308>
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	2b18      	cmp	r3, #24
 800ac74:	d13a      	bne.n	800acec <HAL_RCC_OscConfig+0x374>
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f003 0303 	and.w	r3, r3, #3
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d135      	bne.n	800acec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac80:	4b7b      	ldr	r3, [pc, #492]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d005      	beq.n	800ac98 <HAL_RCC_OscConfig+0x320>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	69db      	ldr	r3, [r3, #28]
 800ac90:	2b80      	cmp	r3, #128	; 0x80
 800ac92:	d001      	beq.n	800ac98 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	e2c1      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac98:	f7fb fb16 	bl	80062c8 <HAL_GetREVID>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	f241 0203 	movw	r2, #4099	; 0x1003
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d817      	bhi.n	800acd6 <HAL_RCC_OscConfig+0x35e>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	2b20      	cmp	r3, #32
 800acac:	d108      	bne.n	800acc0 <HAL_RCC_OscConfig+0x348>
 800acae:	4b70      	ldr	r3, [pc, #448]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800acb6:	4a6e      	ldr	r2, [pc, #440]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800acb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acbc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800acbe:	e075      	b.n	800adac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800acc0:	4b6b      	ldr	r3, [pc, #428]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6a1b      	ldr	r3, [r3, #32]
 800accc:	069b      	lsls	r3, r3, #26
 800acce:	4968      	ldr	r1, [pc, #416]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800acd0:	4313      	orrs	r3, r2
 800acd2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800acd4:	e06a      	b.n	800adac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800acd6:	4b66      	ldr	r3, [pc, #408]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	061b      	lsls	r3, r3, #24
 800ace4:	4962      	ldr	r1, [pc, #392]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ace6:	4313      	orrs	r3, r2
 800ace8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800acea:	e05f      	b.n	800adac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	69db      	ldr	r3, [r3, #28]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d042      	beq.n	800ad7a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800acf4:	4b5e      	ldr	r3, [pc, #376]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a5d      	ldr	r2, [pc, #372]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800acfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad00:	f7fb fab2 	bl	8006268 <HAL_GetTick>
 800ad04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad06:	e008      	b.n	800ad1a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ad08:	f7fb faae 	bl	8006268 <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d901      	bls.n	800ad1a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ad16:	2303      	movs	r3, #3
 800ad18:	e280      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad1a:	4b55      	ldr	r3, [pc, #340]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0f0      	beq.n	800ad08 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad26:	f7fb facf 	bl	80062c8 <HAL_GetREVID>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	f241 0203 	movw	r2, #4099	; 0x1003
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d817      	bhi.n	800ad64 <HAL_RCC_OscConfig+0x3ec>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a1b      	ldr	r3, [r3, #32]
 800ad38:	2b20      	cmp	r3, #32
 800ad3a:	d108      	bne.n	800ad4e <HAL_RCC_OscConfig+0x3d6>
 800ad3c:	4b4c      	ldr	r3, [pc, #304]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ad44:	4a4a      	ldr	r2, [pc, #296]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ad46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad4a:	6053      	str	r3, [r2, #4]
 800ad4c:	e02e      	b.n	800adac <HAL_RCC_OscConfig+0x434>
 800ad4e:	4b48      	ldr	r3, [pc, #288]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	069b      	lsls	r3, r3, #26
 800ad5c:	4944      	ldr	r1, [pc, #272]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	604b      	str	r3, [r1, #4]
 800ad62:	e023      	b.n	800adac <HAL_RCC_OscConfig+0x434>
 800ad64:	4b42      	ldr	r3, [pc, #264]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a1b      	ldr	r3, [r3, #32]
 800ad70:	061b      	lsls	r3, r3, #24
 800ad72:	493f      	ldr	r1, [pc, #252]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ad74:	4313      	orrs	r3, r2
 800ad76:	60cb      	str	r3, [r1, #12]
 800ad78:	e018      	b.n	800adac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ad7a:	4b3d      	ldr	r3, [pc, #244]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a3c      	ldr	r2, [pc, #240]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ad80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad86:	f7fb fa6f 	bl	8006268 <HAL_GetTick>
 800ad8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad8c:	e008      	b.n	800ada0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ad8e:	f7fb fa6b 	bl	8006268 <HAL_GetTick>
 800ad92:	4602      	mov	r2, r0
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	1ad3      	subs	r3, r2, r3
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d901      	bls.n	800ada0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ad9c:	2303      	movs	r3, #3
 800ad9e:	e23d      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ada0:	4b33      	ldr	r3, [pc, #204]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1f0      	bne.n	800ad8e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 0308 	and.w	r3, r3, #8
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d036      	beq.n	800ae26 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d019      	beq.n	800adf4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800adc0:	4b2b      	ldr	r3, [pc, #172]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800adc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adc4:	4a2a      	ldr	r2, [pc, #168]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800adc6:	f043 0301 	orr.w	r3, r3, #1
 800adca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adcc:	f7fb fa4c 	bl	8006268 <HAL_GetTick>
 800add0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800add2:	e008      	b.n	800ade6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800add4:	f7fb fa48 	bl	8006268 <HAL_GetTick>
 800add8:	4602      	mov	r2, r0
 800adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d901      	bls.n	800ade6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800ade2:	2303      	movs	r3, #3
 800ade4:	e21a      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ade6:	4b22      	ldr	r3, [pc, #136]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ade8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adea:	f003 0302 	and.w	r3, r3, #2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0f0      	beq.n	800add4 <HAL_RCC_OscConfig+0x45c>
 800adf2:	e018      	b.n	800ae26 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800adf4:	4b1e      	ldr	r3, [pc, #120]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800adf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adf8:	4a1d      	ldr	r2, [pc, #116]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800adfa:	f023 0301 	bic.w	r3, r3, #1
 800adfe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae00:	f7fb fa32 	bl	8006268 <HAL_GetTick>
 800ae04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ae06:	e008      	b.n	800ae1a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae08:	f7fb fa2e 	bl	8006268 <HAL_GetTick>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d901      	bls.n	800ae1a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800ae16:	2303      	movs	r3, #3
 800ae18:	e200      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ae1a:	4b15      	ldr	r3, [pc, #84]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ae1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae1e:	f003 0302 	and.w	r3, r3, #2
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1f0      	bne.n	800ae08 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 0320 	and.w	r3, r3, #32
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d039      	beq.n	800aea6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d01c      	beq.n	800ae74 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ae3a:	4b0d      	ldr	r3, [pc, #52]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a0c      	ldr	r2, [pc, #48]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ae40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ae44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ae46:	f7fb fa0f 	bl	8006268 <HAL_GetTick>
 800ae4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae4c:	e008      	b.n	800ae60 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae4e:	f7fb fa0b 	bl	8006268 <HAL_GetTick>
 800ae52:	4602      	mov	r2, r0
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d901      	bls.n	800ae60 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	e1dd      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae60:	4b03      	ldr	r3, [pc, #12]	; (800ae70 <HAL_RCC_OscConfig+0x4f8>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d0f0      	beq.n	800ae4e <HAL_RCC_OscConfig+0x4d6>
 800ae6c:	e01b      	b.n	800aea6 <HAL_RCC_OscConfig+0x52e>
 800ae6e:	bf00      	nop
 800ae70:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ae74:	4b9b      	ldr	r3, [pc, #620]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a9a      	ldr	r2, [pc, #616]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800ae7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ae80:	f7fb f9f2 	bl	8006268 <HAL_GetTick>
 800ae84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae86:	e008      	b.n	800ae9a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae88:	f7fb f9ee 	bl	8006268 <HAL_GetTick>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d901      	bls.n	800ae9a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e1c0      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae9a:	4b92      	ldr	r3, [pc, #584]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1f0      	bne.n	800ae88 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f003 0304 	and.w	r3, r3, #4
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 8081 	beq.w	800afb6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aeb4:	4b8c      	ldr	r3, [pc, #560]	; (800b0e8 <HAL_RCC_OscConfig+0x770>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a8b      	ldr	r2, [pc, #556]	; (800b0e8 <HAL_RCC_OscConfig+0x770>)
 800aeba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aebe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aec0:	f7fb f9d2 	bl	8006268 <HAL_GetTick>
 800aec4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aec6:	e008      	b.n	800aeda <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aec8:	f7fb f9ce 	bl	8006268 <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	2b64      	cmp	r3, #100	; 0x64
 800aed4:	d901      	bls.n	800aeda <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800aed6:	2303      	movs	r3, #3
 800aed8:	e1a0      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aeda:	4b83      	ldr	r3, [pc, #524]	; (800b0e8 <HAL_RCC_OscConfig+0x770>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d0f0      	beq.n	800aec8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d106      	bne.n	800aefc <HAL_RCC_OscConfig+0x584>
 800aeee:	4b7d      	ldr	r3, [pc, #500]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800aef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aef2:	4a7c      	ldr	r2, [pc, #496]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800aef4:	f043 0301 	orr.w	r3, r3, #1
 800aef8:	6713      	str	r3, [r2, #112]	; 0x70
 800aefa:	e02d      	b.n	800af58 <HAL_RCC_OscConfig+0x5e0>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10c      	bne.n	800af1e <HAL_RCC_OscConfig+0x5a6>
 800af04:	4b77      	ldr	r3, [pc, #476]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800af06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af08:	4a76      	ldr	r2, [pc, #472]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800af0a:	f023 0301 	bic.w	r3, r3, #1
 800af0e:	6713      	str	r3, [r2, #112]	; 0x70
 800af10:	4b74      	ldr	r3, [pc, #464]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800af12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af14:	4a73      	ldr	r2, [pc, #460]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800af16:	f023 0304 	bic.w	r3, r3, #4
 800af1a:	6713      	str	r3, [r2, #112]	; 0x70
 800af1c:	e01c      	b.n	800af58 <HAL_RCC_OscConfig+0x5e0>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	2b05      	cmp	r3, #5
 800af24:	d10c      	bne.n	800af40 <HAL_RCC_OscConfig+0x5c8>
 800af26:	4b6f      	ldr	r3, [pc, #444]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800af28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af2a:	4a6e      	ldr	r2, [pc, #440]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800af2c:	f043 0304 	orr.w	r3, r3, #4
 800af30:	6713      	str	r3, [r2, #112]	; 0x70
 800af32:	4b6c      	ldr	r3, [pc, #432]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800af34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af36:	4a6b      	ldr	r2, [pc, #428]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800af38:	f043 0301 	orr.w	r3, r3, #1
 800af3c:	6713      	str	r3, [r2, #112]	; 0x70
 800af3e:	e00b      	b.n	800af58 <HAL_RCC_OscConfig+0x5e0>
 800af40:	4b68      	ldr	r3, [pc, #416]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800af42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af44:	4a67      	ldr	r2, [pc, #412]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800af46:	f023 0301 	bic.w	r3, r3, #1
 800af4a:	6713      	str	r3, [r2, #112]	; 0x70
 800af4c:	4b65      	ldr	r3, [pc, #404]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800af4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af50:	4a64      	ldr	r2, [pc, #400]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800af52:	f023 0304 	bic.w	r3, r3, #4
 800af56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d015      	beq.n	800af8c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af60:	f7fb f982 	bl	8006268 <HAL_GetTick>
 800af64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af66:	e00a      	b.n	800af7e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af68:	f7fb f97e 	bl	8006268 <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	f241 3288 	movw	r2, #5000	; 0x1388
 800af76:	4293      	cmp	r3, r2
 800af78:	d901      	bls.n	800af7e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e14e      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af7e:	4b59      	ldr	r3, [pc, #356]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800af80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0ee      	beq.n	800af68 <HAL_RCC_OscConfig+0x5f0>
 800af8a:	e014      	b.n	800afb6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af8c:	f7fb f96c 	bl	8006268 <HAL_GetTick>
 800af90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af92:	e00a      	b.n	800afaa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af94:	f7fb f968 	bl	8006268 <HAL_GetTick>
 800af98:	4602      	mov	r2, r0
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d901      	bls.n	800afaa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e138      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800afaa:	4b4e      	ldr	r3, [pc, #312]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800afac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afae:	f003 0302 	and.w	r3, r3, #2
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1ee      	bne.n	800af94 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 812d 	beq.w	800b21a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800afc0:	4b48      	ldr	r3, [pc, #288]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afc8:	2b18      	cmp	r3, #24
 800afca:	f000 80bd 	beq.w	800b148 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	f040 809e 	bne.w	800b114 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afd8:	4b42      	ldr	r3, [pc, #264]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a41      	ldr	r2, [pc, #260]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800afde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800afe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afe4:	f7fb f940 	bl	8006268 <HAL_GetTick>
 800afe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afea:	e008      	b.n	800affe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afec:	f7fb f93c 	bl	8006268 <HAL_GetTick>
 800aff0:	4602      	mov	r2, r0
 800aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d901      	bls.n	800affe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800affa:	2303      	movs	r3, #3
 800affc:	e10e      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800affe:	4b39      	ldr	r3, [pc, #228]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1f0      	bne.n	800afec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b00a:	4b36      	ldr	r3, [pc, #216]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b00c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b00e:	4b37      	ldr	r3, [pc, #220]	; (800b0ec <HAL_RCC_OscConfig+0x774>)
 800b010:	4013      	ands	r3, r2
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b01a:	0112      	lsls	r2, r2, #4
 800b01c:	430a      	orrs	r2, r1
 800b01e:	4931      	ldr	r1, [pc, #196]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b020:	4313      	orrs	r3, r2
 800b022:	628b      	str	r3, [r1, #40]	; 0x28
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b028:	3b01      	subs	r3, #1
 800b02a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b032:	3b01      	subs	r3, #1
 800b034:	025b      	lsls	r3, r3, #9
 800b036:	b29b      	uxth	r3, r3
 800b038:	431a      	orrs	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03e:	3b01      	subs	r3, #1
 800b040:	041b      	lsls	r3, r3, #16
 800b042:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b046:	431a      	orrs	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b04c:	3b01      	subs	r3, #1
 800b04e:	061b      	lsls	r3, r3, #24
 800b050:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b054:	4923      	ldr	r1, [pc, #140]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b056:	4313      	orrs	r3, r2
 800b058:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b05a:	4b22      	ldr	r3, [pc, #136]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05e:	4a21      	ldr	r2, [pc, #132]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b060:	f023 0301 	bic.w	r3, r3, #1
 800b064:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b066:	4b1f      	ldr	r3, [pc, #124]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b06a:	4b21      	ldr	r3, [pc, #132]	; (800b0f0 <HAL_RCC_OscConfig+0x778>)
 800b06c:	4013      	ands	r3, r2
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b072:	00d2      	lsls	r2, r2, #3
 800b074:	491b      	ldr	r1, [pc, #108]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b076:	4313      	orrs	r3, r2
 800b078:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b07a:	4b1a      	ldr	r3, [pc, #104]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07e:	f023 020c 	bic.w	r2, r3, #12
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b086:	4917      	ldr	r1, [pc, #92]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b088:	4313      	orrs	r3, r2
 800b08a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b08c:	4b15      	ldr	r3, [pc, #84]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b090:	f023 0202 	bic.w	r2, r3, #2
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b098:	4912      	ldr	r1, [pc, #72]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b09a:	4313      	orrs	r3, r2
 800b09c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b09e:	4b11      	ldr	r3, [pc, #68]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a2:	4a10      	ldr	r2, [pc, #64]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b0a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0aa:	4b0e      	ldr	r3, [pc, #56]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ae:	4a0d      	ldr	r2, [pc, #52]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b0b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b0b6:	4b0b      	ldr	r3, [pc, #44]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ba:	4a0a      	ldr	r2, [pc, #40]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b0bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b0c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b0c2:	4b08      	ldr	r3, [pc, #32]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c6:	4a07      	ldr	r2, [pc, #28]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b0c8:	f043 0301 	orr.w	r3, r3, #1
 800b0cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0ce:	4b05      	ldr	r3, [pc, #20]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a04      	ldr	r2, [pc, #16]	; (800b0e4 <HAL_RCC_OscConfig+0x76c>)
 800b0d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0da:	f7fb f8c5 	bl	8006268 <HAL_GetTick>
 800b0de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b0e0:	e011      	b.n	800b106 <HAL_RCC_OscConfig+0x78e>
 800b0e2:	bf00      	nop
 800b0e4:	58024400 	.word	0x58024400
 800b0e8:	58024800 	.word	0x58024800
 800b0ec:	fffffc0c 	.word	0xfffffc0c
 800b0f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0f4:	f7fb f8b8 	bl	8006268 <HAL_GetTick>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d901      	bls.n	800b106 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b102:	2303      	movs	r3, #3
 800b104:	e08a      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b106:	4b47      	ldr	r3, [pc, #284]	; (800b224 <HAL_RCC_OscConfig+0x8ac>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d0f0      	beq.n	800b0f4 <HAL_RCC_OscConfig+0x77c>
 800b112:	e082      	b.n	800b21a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b114:	4b43      	ldr	r3, [pc, #268]	; (800b224 <HAL_RCC_OscConfig+0x8ac>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a42      	ldr	r2, [pc, #264]	; (800b224 <HAL_RCC_OscConfig+0x8ac>)
 800b11a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b11e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b120:	f7fb f8a2 	bl	8006268 <HAL_GetTick>
 800b124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b126:	e008      	b.n	800b13a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b128:	f7fb f89e 	bl	8006268 <HAL_GetTick>
 800b12c:	4602      	mov	r2, r0
 800b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	2b02      	cmp	r3, #2
 800b134:	d901      	bls.n	800b13a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b136:	2303      	movs	r3, #3
 800b138:	e070      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b13a:	4b3a      	ldr	r3, [pc, #232]	; (800b224 <HAL_RCC_OscConfig+0x8ac>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1f0      	bne.n	800b128 <HAL_RCC_OscConfig+0x7b0>
 800b146:	e068      	b.n	800b21a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b148:	4b36      	ldr	r3, [pc, #216]	; (800b224 <HAL_RCC_OscConfig+0x8ac>)
 800b14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b14e:	4b35      	ldr	r3, [pc, #212]	; (800b224 <HAL_RCC_OscConfig+0x8ac>)
 800b150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b152:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d031      	beq.n	800b1c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	f003 0203 	and.w	r2, r3, #3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b166:	429a      	cmp	r2, r3
 800b168:	d12a      	bne.n	800b1c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	091b      	lsrs	r3, r3, #4
 800b16e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b176:	429a      	cmp	r2, r3
 800b178:	d122      	bne.n	800b1c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b184:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b186:	429a      	cmp	r2, r3
 800b188:	d11a      	bne.n	800b1c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	0a5b      	lsrs	r3, r3, #9
 800b18e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b196:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b198:	429a      	cmp	r2, r3
 800b19a:	d111      	bne.n	800b1c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	0c1b      	lsrs	r3, r3, #16
 800b1a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d108      	bne.n	800b1c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	0e1b      	lsrs	r3, r3, #24
 800b1b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d001      	beq.n	800b1c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e02b      	b.n	800b21c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b1c4:	4b17      	ldr	r3, [pc, #92]	; (800b224 <HAL_RCC_OscConfig+0x8ac>)
 800b1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1c8:	08db      	lsrs	r3, r3, #3
 800b1ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d01f      	beq.n	800b21a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b1da:	4b12      	ldr	r3, [pc, #72]	; (800b224 <HAL_RCC_OscConfig+0x8ac>)
 800b1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1de:	4a11      	ldr	r2, [pc, #68]	; (800b224 <HAL_RCC_OscConfig+0x8ac>)
 800b1e0:	f023 0301 	bic.w	r3, r3, #1
 800b1e4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b1e6:	f7fb f83f 	bl	8006268 <HAL_GetTick>
 800b1ea:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b1ec:	bf00      	nop
 800b1ee:	f7fb f83b 	bl	8006268 <HAL_GetTick>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d0f9      	beq.n	800b1ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b1fa:	4b0a      	ldr	r3, [pc, #40]	; (800b224 <HAL_RCC_OscConfig+0x8ac>)
 800b1fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1fe:	4b0a      	ldr	r3, [pc, #40]	; (800b228 <HAL_RCC_OscConfig+0x8b0>)
 800b200:	4013      	ands	r3, r2
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b206:	00d2      	lsls	r2, r2, #3
 800b208:	4906      	ldr	r1, [pc, #24]	; (800b224 <HAL_RCC_OscConfig+0x8ac>)
 800b20a:	4313      	orrs	r3, r2
 800b20c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b20e:	4b05      	ldr	r3, [pc, #20]	; (800b224 <HAL_RCC_OscConfig+0x8ac>)
 800b210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b212:	4a04      	ldr	r2, [pc, #16]	; (800b224 <HAL_RCC_OscConfig+0x8ac>)
 800b214:	f043 0301 	orr.w	r3, r3, #1
 800b218:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3730      	adds	r7, #48	; 0x30
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	58024400 	.word	0x58024400
 800b228:	ffff0007 	.word	0xffff0007

0800b22c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b086      	sub	sp, #24
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d101      	bne.n	800b240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	e19c      	b.n	800b57a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b240:	4b8a      	ldr	r3, [pc, #552]	; (800b46c <HAL_RCC_ClockConfig+0x240>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 030f 	and.w	r3, r3, #15
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d910      	bls.n	800b270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b24e:	4b87      	ldr	r3, [pc, #540]	; (800b46c <HAL_RCC_ClockConfig+0x240>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f023 020f 	bic.w	r2, r3, #15
 800b256:	4985      	ldr	r1, [pc, #532]	; (800b46c <HAL_RCC_ClockConfig+0x240>)
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b25e:	4b83      	ldr	r3, [pc, #524]	; (800b46c <HAL_RCC_ClockConfig+0x240>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f003 030f 	and.w	r3, r3, #15
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d001      	beq.n	800b270 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e184      	b.n	800b57a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d010      	beq.n	800b29e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691a      	ldr	r2, [r3, #16]
 800b280:	4b7b      	ldr	r3, [pc, #492]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b288:	429a      	cmp	r2, r3
 800b28a:	d908      	bls.n	800b29e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b28c:	4b78      	ldr	r3, [pc, #480]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	4975      	ldr	r1, [pc, #468]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b29a:	4313      	orrs	r3, r2
 800b29c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 0308 	and.w	r3, r3, #8
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d010      	beq.n	800b2cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	695a      	ldr	r2, [r3, #20]
 800b2ae:	4b70      	ldr	r3, [pc, #448]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d908      	bls.n	800b2cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b2ba:	4b6d      	ldr	r3, [pc, #436]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b2bc:	69db      	ldr	r3, [r3, #28]
 800b2be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	695b      	ldr	r3, [r3, #20]
 800b2c6:	496a      	ldr	r1, [pc, #424]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0310 	and.w	r3, r3, #16
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d010      	beq.n	800b2fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	699a      	ldr	r2, [r3, #24]
 800b2dc:	4b64      	ldr	r3, [pc, #400]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b2de:	69db      	ldr	r3, [r3, #28]
 800b2e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d908      	bls.n	800b2fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b2e8:	4b61      	ldr	r3, [pc, #388]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b2ea:	69db      	ldr	r3, [r3, #28]
 800b2ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	699b      	ldr	r3, [r3, #24]
 800b2f4:	495e      	ldr	r1, [pc, #376]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 0320 	and.w	r3, r3, #32
 800b302:	2b00      	cmp	r3, #0
 800b304:	d010      	beq.n	800b328 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	69da      	ldr	r2, [r3, #28]
 800b30a:	4b59      	ldr	r3, [pc, #356]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b312:	429a      	cmp	r2, r3
 800b314:	d908      	bls.n	800b328 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b316:	4b56      	ldr	r3, [pc, #344]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b318:	6a1b      	ldr	r3, [r3, #32]
 800b31a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	69db      	ldr	r3, [r3, #28]
 800b322:	4953      	ldr	r1, [pc, #332]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b324:	4313      	orrs	r3, r2
 800b326:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f003 0302 	and.w	r3, r3, #2
 800b330:	2b00      	cmp	r3, #0
 800b332:	d010      	beq.n	800b356 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	68da      	ldr	r2, [r3, #12]
 800b338:	4b4d      	ldr	r3, [pc, #308]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	f003 030f 	and.w	r3, r3, #15
 800b340:	429a      	cmp	r2, r3
 800b342:	d908      	bls.n	800b356 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b344:	4b4a      	ldr	r3, [pc, #296]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b346:	699b      	ldr	r3, [r3, #24]
 800b348:	f023 020f 	bic.w	r2, r3, #15
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	4947      	ldr	r1, [pc, #284]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b352:	4313      	orrs	r3, r2
 800b354:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d055      	beq.n	800b40e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b362:	4b43      	ldr	r3, [pc, #268]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b364:	699b      	ldr	r3, [r3, #24]
 800b366:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	4940      	ldr	r1, [pc, #256]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b370:	4313      	orrs	r3, r2
 800b372:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d107      	bne.n	800b38c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b37c:	4b3c      	ldr	r3, [pc, #240]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d121      	bne.n	800b3cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	e0f6      	b.n	800b57a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	2b03      	cmp	r3, #3
 800b392:	d107      	bne.n	800b3a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b394:	4b36      	ldr	r3, [pc, #216]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d115      	bne.n	800b3cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e0ea      	b.n	800b57a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d107      	bne.n	800b3bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b3ac:	4b30      	ldr	r3, [pc, #192]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d109      	bne.n	800b3cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e0de      	b.n	800b57a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b3bc:	4b2c      	ldr	r3, [pc, #176]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 0304 	and.w	r3, r3, #4
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d101      	bne.n	800b3cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e0d6      	b.n	800b57a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b3cc:	4b28      	ldr	r3, [pc, #160]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	f023 0207 	bic.w	r2, r3, #7
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	4925      	ldr	r1, [pc, #148]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3de:	f7fa ff43 	bl	8006268 <HAL_GetTick>
 800b3e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3e4:	e00a      	b.n	800b3fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3e6:	f7fa ff3f 	bl	8006268 <HAL_GetTick>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	1ad3      	subs	r3, r2, r3
 800b3f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d901      	bls.n	800b3fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b3f8:	2303      	movs	r3, #3
 800b3fa:	e0be      	b.n	800b57a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3fc:	4b1c      	ldr	r3, [pc, #112]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	00db      	lsls	r3, r3, #3
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d1eb      	bne.n	800b3e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 0302 	and.w	r3, r3, #2
 800b416:	2b00      	cmp	r3, #0
 800b418:	d010      	beq.n	800b43c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	68da      	ldr	r2, [r3, #12]
 800b41e:	4b14      	ldr	r3, [pc, #80]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b420:	699b      	ldr	r3, [r3, #24]
 800b422:	f003 030f 	and.w	r3, r3, #15
 800b426:	429a      	cmp	r2, r3
 800b428:	d208      	bcs.n	800b43c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b42a:	4b11      	ldr	r3, [pc, #68]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b42c:	699b      	ldr	r3, [r3, #24]
 800b42e:	f023 020f 	bic.w	r2, r3, #15
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	490e      	ldr	r1, [pc, #56]	; (800b470 <HAL_RCC_ClockConfig+0x244>)
 800b438:	4313      	orrs	r3, r2
 800b43a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b43c:	4b0b      	ldr	r3, [pc, #44]	; (800b46c <HAL_RCC_ClockConfig+0x240>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f003 030f 	and.w	r3, r3, #15
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	429a      	cmp	r2, r3
 800b448:	d214      	bcs.n	800b474 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b44a:	4b08      	ldr	r3, [pc, #32]	; (800b46c <HAL_RCC_ClockConfig+0x240>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f023 020f 	bic.w	r2, r3, #15
 800b452:	4906      	ldr	r1, [pc, #24]	; (800b46c <HAL_RCC_ClockConfig+0x240>)
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	4313      	orrs	r3, r2
 800b458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b45a:	4b04      	ldr	r3, [pc, #16]	; (800b46c <HAL_RCC_ClockConfig+0x240>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f003 030f 	and.w	r3, r3, #15
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	429a      	cmp	r2, r3
 800b466:	d005      	beq.n	800b474 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b468:	2301      	movs	r3, #1
 800b46a:	e086      	b.n	800b57a <HAL_RCC_ClockConfig+0x34e>
 800b46c:	52002000 	.word	0x52002000
 800b470:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f003 0304 	and.w	r3, r3, #4
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d010      	beq.n	800b4a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	691a      	ldr	r2, [r3, #16]
 800b484:	4b3f      	ldr	r3, [pc, #252]	; (800b584 <HAL_RCC_ClockConfig+0x358>)
 800b486:	699b      	ldr	r3, [r3, #24]
 800b488:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d208      	bcs.n	800b4a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b490:	4b3c      	ldr	r3, [pc, #240]	; (800b584 <HAL_RCC_ClockConfig+0x358>)
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	4939      	ldr	r1, [pc, #228]	; (800b584 <HAL_RCC_ClockConfig+0x358>)
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 0308 	and.w	r3, r3, #8
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d010      	beq.n	800b4d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	695a      	ldr	r2, [r3, #20]
 800b4b2:	4b34      	ldr	r3, [pc, #208]	; (800b584 <HAL_RCC_ClockConfig+0x358>)
 800b4b4:	69db      	ldr	r3, [r3, #28]
 800b4b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d208      	bcs.n	800b4d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b4be:	4b31      	ldr	r3, [pc, #196]	; (800b584 <HAL_RCC_ClockConfig+0x358>)
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	492e      	ldr	r1, [pc, #184]	; (800b584 <HAL_RCC_ClockConfig+0x358>)
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0310 	and.w	r3, r3, #16
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d010      	beq.n	800b4fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	699a      	ldr	r2, [r3, #24]
 800b4e0:	4b28      	ldr	r3, [pc, #160]	; (800b584 <HAL_RCC_ClockConfig+0x358>)
 800b4e2:	69db      	ldr	r3, [r3, #28]
 800b4e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d208      	bcs.n	800b4fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b4ec:	4b25      	ldr	r3, [pc, #148]	; (800b584 <HAL_RCC_ClockConfig+0x358>)
 800b4ee:	69db      	ldr	r3, [r3, #28]
 800b4f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	4922      	ldr	r1, [pc, #136]	; (800b584 <HAL_RCC_ClockConfig+0x358>)
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f003 0320 	and.w	r3, r3, #32
 800b506:	2b00      	cmp	r3, #0
 800b508:	d010      	beq.n	800b52c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	69da      	ldr	r2, [r3, #28]
 800b50e:	4b1d      	ldr	r3, [pc, #116]	; (800b584 <HAL_RCC_ClockConfig+0x358>)
 800b510:	6a1b      	ldr	r3, [r3, #32]
 800b512:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b516:	429a      	cmp	r2, r3
 800b518:	d208      	bcs.n	800b52c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b51a:	4b1a      	ldr	r3, [pc, #104]	; (800b584 <HAL_RCC_ClockConfig+0x358>)
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	4917      	ldr	r1, [pc, #92]	; (800b584 <HAL_RCC_ClockConfig+0x358>)
 800b528:	4313      	orrs	r3, r2
 800b52a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b52c:	f000 f834 	bl	800b598 <HAL_RCC_GetSysClockFreq>
 800b530:	4602      	mov	r2, r0
 800b532:	4b14      	ldr	r3, [pc, #80]	; (800b584 <HAL_RCC_ClockConfig+0x358>)
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	0a1b      	lsrs	r3, r3, #8
 800b538:	f003 030f 	and.w	r3, r3, #15
 800b53c:	4912      	ldr	r1, [pc, #72]	; (800b588 <HAL_RCC_ClockConfig+0x35c>)
 800b53e:	5ccb      	ldrb	r3, [r1, r3]
 800b540:	f003 031f 	and.w	r3, r3, #31
 800b544:	fa22 f303 	lsr.w	r3, r2, r3
 800b548:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b54a:	4b0e      	ldr	r3, [pc, #56]	; (800b584 <HAL_RCC_ClockConfig+0x358>)
 800b54c:	699b      	ldr	r3, [r3, #24]
 800b54e:	f003 030f 	and.w	r3, r3, #15
 800b552:	4a0d      	ldr	r2, [pc, #52]	; (800b588 <HAL_RCC_ClockConfig+0x35c>)
 800b554:	5cd3      	ldrb	r3, [r2, r3]
 800b556:	f003 031f 	and.w	r3, r3, #31
 800b55a:	693a      	ldr	r2, [r7, #16]
 800b55c:	fa22 f303 	lsr.w	r3, r2, r3
 800b560:	4a0a      	ldr	r2, [pc, #40]	; (800b58c <HAL_RCC_ClockConfig+0x360>)
 800b562:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b564:	4a0a      	ldr	r2, [pc, #40]	; (800b590 <HAL_RCC_ClockConfig+0x364>)
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b56a:	4b0a      	ldr	r3, [pc, #40]	; (800b594 <HAL_RCC_ClockConfig+0x368>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fa fe30 	bl	80061d4 <HAL_InitTick>
 800b574:	4603      	mov	r3, r0
 800b576:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b578:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3718      	adds	r7, #24
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	58024400 	.word	0x58024400
 800b588:	080109d0 	.word	0x080109d0
 800b58c:	24000008 	.word	0x24000008
 800b590:	24000004 	.word	0x24000004
 800b594:	24000050 	.word	0x24000050

0800b598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b598:	b480      	push	{r7}
 800b59a:	b089      	sub	sp, #36	; 0x24
 800b59c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b59e:	4bb3      	ldr	r3, [pc, #716]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5a6:	2b18      	cmp	r3, #24
 800b5a8:	f200 8155 	bhi.w	800b856 <HAL_RCC_GetSysClockFreq+0x2be>
 800b5ac:	a201      	add	r2, pc, #4	; (adr r2, 800b5b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b2:	bf00      	nop
 800b5b4:	0800b619 	.word	0x0800b619
 800b5b8:	0800b857 	.word	0x0800b857
 800b5bc:	0800b857 	.word	0x0800b857
 800b5c0:	0800b857 	.word	0x0800b857
 800b5c4:	0800b857 	.word	0x0800b857
 800b5c8:	0800b857 	.word	0x0800b857
 800b5cc:	0800b857 	.word	0x0800b857
 800b5d0:	0800b857 	.word	0x0800b857
 800b5d4:	0800b63f 	.word	0x0800b63f
 800b5d8:	0800b857 	.word	0x0800b857
 800b5dc:	0800b857 	.word	0x0800b857
 800b5e0:	0800b857 	.word	0x0800b857
 800b5e4:	0800b857 	.word	0x0800b857
 800b5e8:	0800b857 	.word	0x0800b857
 800b5ec:	0800b857 	.word	0x0800b857
 800b5f0:	0800b857 	.word	0x0800b857
 800b5f4:	0800b645 	.word	0x0800b645
 800b5f8:	0800b857 	.word	0x0800b857
 800b5fc:	0800b857 	.word	0x0800b857
 800b600:	0800b857 	.word	0x0800b857
 800b604:	0800b857 	.word	0x0800b857
 800b608:	0800b857 	.word	0x0800b857
 800b60c:	0800b857 	.word	0x0800b857
 800b610:	0800b857 	.word	0x0800b857
 800b614:	0800b64b 	.word	0x0800b64b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b618:	4b94      	ldr	r3, [pc, #592]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 0320 	and.w	r3, r3, #32
 800b620:	2b00      	cmp	r3, #0
 800b622:	d009      	beq.n	800b638 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b624:	4b91      	ldr	r3, [pc, #580]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	08db      	lsrs	r3, r3, #3
 800b62a:	f003 0303 	and.w	r3, r3, #3
 800b62e:	4a90      	ldr	r2, [pc, #576]	; (800b870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b630:	fa22 f303 	lsr.w	r3, r2, r3
 800b634:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b636:	e111      	b.n	800b85c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b638:	4b8d      	ldr	r3, [pc, #564]	; (800b870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b63a:	61bb      	str	r3, [r7, #24]
      break;
 800b63c:	e10e      	b.n	800b85c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b63e:	4b8d      	ldr	r3, [pc, #564]	; (800b874 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b640:	61bb      	str	r3, [r7, #24]
      break;
 800b642:	e10b      	b.n	800b85c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b644:	4b8c      	ldr	r3, [pc, #560]	; (800b878 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b646:	61bb      	str	r3, [r7, #24]
      break;
 800b648:	e108      	b.n	800b85c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b64a:	4b88      	ldr	r3, [pc, #544]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64e:	f003 0303 	and.w	r3, r3, #3
 800b652:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b654:	4b85      	ldr	r3, [pc, #532]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b658:	091b      	lsrs	r3, r3, #4
 800b65a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b65e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b660:	4b82      	ldr	r3, [pc, #520]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b664:	f003 0301 	and.w	r3, r3, #1
 800b668:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b66a:	4b80      	ldr	r3, [pc, #512]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b66e:	08db      	lsrs	r3, r3, #3
 800b670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	fb02 f303 	mul.w	r3, r2, r3
 800b67a:	ee07 3a90 	vmov	s15, r3
 800b67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b682:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f000 80e1 	beq.w	800b850 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	2b02      	cmp	r3, #2
 800b692:	f000 8083 	beq.w	800b79c <HAL_RCC_GetSysClockFreq+0x204>
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	2b02      	cmp	r3, #2
 800b69a:	f200 80a1 	bhi.w	800b7e0 <HAL_RCC_GetSysClockFreq+0x248>
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <HAL_RCC_GetSysClockFreq+0x114>
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d056      	beq.n	800b758 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b6aa:	e099      	b.n	800b7e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6ac:	4b6f      	ldr	r3, [pc, #444]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f003 0320 	and.w	r3, r3, #32
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d02d      	beq.n	800b714 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6b8:	4b6c      	ldr	r3, [pc, #432]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	08db      	lsrs	r3, r3, #3
 800b6be:	f003 0303 	and.w	r3, r3, #3
 800b6c2:	4a6b      	ldr	r2, [pc, #428]	; (800b870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b6c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	ee07 3a90 	vmov	s15, r3
 800b6d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	ee07 3a90 	vmov	s15, r3
 800b6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6e2:	4b62      	ldr	r3, [pc, #392]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ea:	ee07 3a90 	vmov	s15, r3
 800b6ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b87c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b70a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b70e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b712:	e087      	b.n	800b824 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	ee07 3a90 	vmov	s15, r3
 800b71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b71e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b880 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b726:	4b51      	ldr	r3, [pc, #324]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b72e:	ee07 3a90 	vmov	s15, r3
 800b732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b736:	ed97 6a02 	vldr	s12, [r7, #8]
 800b73a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b87c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b73e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b74a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b74e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b752:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b756:	e065      	b.n	800b824 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	ee07 3a90 	vmov	s15, r3
 800b75e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b762:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b884 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b76a:	4b40      	ldr	r3, [pc, #256]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b76e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b772:	ee07 3a90 	vmov	s15, r3
 800b776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b77a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b77e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b87c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b78a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b78e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b792:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b796:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b79a:	e043      	b.n	800b824 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b888 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b7aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ae:	4b2f      	ldr	r3, [pc, #188]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b6:	ee07 3a90 	vmov	s15, r3
 800b7ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7be:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b87c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b7de:	e021      	b.n	800b824 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	ee07 3a90 	vmov	s15, r3
 800b7e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b884 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b7ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7f2:	4b1e      	ldr	r3, [pc, #120]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7fa:	ee07 3a90 	vmov	s15, r3
 800b7fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b802:	ed97 6a02 	vldr	s12, [r7, #8]
 800b806:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b87c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b80a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b80e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b81a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b81e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b822:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b824:	4b11      	ldr	r3, [pc, #68]	; (800b86c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b828:	0a5b      	lsrs	r3, r3, #9
 800b82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b82e:	3301      	adds	r3, #1
 800b830:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	ee07 3a90 	vmov	s15, r3
 800b838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b83c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b848:	ee17 3a90 	vmov	r3, s15
 800b84c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b84e:	e005      	b.n	800b85c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b850:	2300      	movs	r3, #0
 800b852:	61bb      	str	r3, [r7, #24]
      break;
 800b854:	e002      	b.n	800b85c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b856:	4b07      	ldr	r3, [pc, #28]	; (800b874 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b858:	61bb      	str	r3, [r7, #24]
      break;
 800b85a:	bf00      	nop
  }

  return sysclockfreq;
 800b85c:	69bb      	ldr	r3, [r7, #24]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3724      	adds	r7, #36	; 0x24
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	58024400 	.word	0x58024400
 800b870:	03d09000 	.word	0x03d09000
 800b874:	003d0900 	.word	0x003d0900
 800b878:	017d7840 	.word	0x017d7840
 800b87c:	46000000 	.word	0x46000000
 800b880:	4c742400 	.word	0x4c742400
 800b884:	4a742400 	.word	0x4a742400
 800b888:	4bbebc20 	.word	0x4bbebc20

0800b88c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b892:	f7ff fe81 	bl	800b598 <HAL_RCC_GetSysClockFreq>
 800b896:	4602      	mov	r2, r0
 800b898:	4b10      	ldr	r3, [pc, #64]	; (800b8dc <HAL_RCC_GetHCLKFreq+0x50>)
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	0a1b      	lsrs	r3, r3, #8
 800b89e:	f003 030f 	and.w	r3, r3, #15
 800b8a2:	490f      	ldr	r1, [pc, #60]	; (800b8e0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b8a4:	5ccb      	ldrb	r3, [r1, r3]
 800b8a6:	f003 031f 	and.w	r3, r3, #31
 800b8aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b8b0:	4b0a      	ldr	r3, [pc, #40]	; (800b8dc <HAL_RCC_GetHCLKFreq+0x50>)
 800b8b2:	699b      	ldr	r3, [r3, #24]
 800b8b4:	f003 030f 	and.w	r3, r3, #15
 800b8b8:	4a09      	ldr	r2, [pc, #36]	; (800b8e0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b8ba:	5cd3      	ldrb	r3, [r2, r3]
 800b8bc:	f003 031f 	and.w	r3, r3, #31
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b8c6:	4a07      	ldr	r2, [pc, #28]	; (800b8e4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b8c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b8ca:	4a07      	ldr	r2, [pc, #28]	; (800b8e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b8d0:	4b04      	ldr	r3, [pc, #16]	; (800b8e4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3708      	adds	r7, #8
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	58024400 	.word	0x58024400
 800b8e0:	080109d0 	.word	0x080109d0
 800b8e4:	24000008 	.word	0x24000008
 800b8e8:	24000004 	.word	0x24000004

0800b8ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b8f0:	f7ff ffcc 	bl	800b88c <HAL_RCC_GetHCLKFreq>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	4b06      	ldr	r3, [pc, #24]	; (800b910 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8f8:	69db      	ldr	r3, [r3, #28]
 800b8fa:	091b      	lsrs	r3, r3, #4
 800b8fc:	f003 0307 	and.w	r3, r3, #7
 800b900:	4904      	ldr	r1, [pc, #16]	; (800b914 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b902:	5ccb      	ldrb	r3, [r1, r3]
 800b904:	f003 031f 	and.w	r3, r3, #31
 800b908:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	58024400 	.word	0x58024400
 800b914:	080109d0 	.word	0x080109d0

0800b918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b91c:	f7ff ffb6 	bl	800b88c <HAL_RCC_GetHCLKFreq>
 800b920:	4602      	mov	r2, r0
 800b922:	4b06      	ldr	r3, [pc, #24]	; (800b93c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b924:	69db      	ldr	r3, [r3, #28]
 800b926:	0a1b      	lsrs	r3, r3, #8
 800b928:	f003 0307 	and.w	r3, r3, #7
 800b92c:	4904      	ldr	r1, [pc, #16]	; (800b940 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b92e:	5ccb      	ldrb	r3, [r1, r3]
 800b930:	f003 031f 	and.w	r3, r3, #31
 800b934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b938:	4618      	mov	r0, r3
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	58024400 	.word	0x58024400
 800b940:	080109d0 	.word	0x080109d0

0800b944 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b948:	b0ca      	sub	sp, #296	; 0x128
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b950:	2300      	movs	r3, #0
 800b952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b956:	2300      	movs	r3, #0
 800b958:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b95c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b964:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b968:	2500      	movs	r5, #0
 800b96a:	ea54 0305 	orrs.w	r3, r4, r5
 800b96e:	d049      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b976:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b97a:	d02f      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b97c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b980:	d828      	bhi.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b986:	d01a      	beq.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b988:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b98c:	d822      	bhi.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d003      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b996:	d007      	beq.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b998:	e01c      	b.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b99a:	4bb8      	ldr	r3, [pc, #736]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99e:	4ab7      	ldr	r2, [pc, #732]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b9a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b9a6:	e01a      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ac:	3308      	adds	r3, #8
 800b9ae:	2102      	movs	r1, #2
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f001 fc8f 	bl	800d2d4 <RCCEx_PLL2_Config>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b9bc:	e00f      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9c2:	3328      	adds	r3, #40	; 0x28
 800b9c4:	2102      	movs	r1, #2
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f001 fd36 	bl	800d438 <RCCEx_PLL3_Config>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b9d2:	e004      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9da:	e000      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b9dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d10a      	bne.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b9e6:	4ba5      	ldr	r3, [pc, #660]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b9e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9f4:	4aa1      	ldr	r2, [pc, #644]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b9f6:	430b      	orrs	r3, r1
 800b9f8:	6513      	str	r3, [r2, #80]	; 0x50
 800b9fa:	e003      	b.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ba04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ba10:	f04f 0900 	mov.w	r9, #0
 800ba14:	ea58 0309 	orrs.w	r3, r8, r9
 800ba18:	d047      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ba1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba20:	2b04      	cmp	r3, #4
 800ba22:	d82a      	bhi.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ba24:	a201      	add	r2, pc, #4	; (adr r2, 800ba2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ba26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba2a:	bf00      	nop
 800ba2c:	0800ba41 	.word	0x0800ba41
 800ba30:	0800ba4f 	.word	0x0800ba4f
 800ba34:	0800ba65 	.word	0x0800ba65
 800ba38:	0800ba83 	.word	0x0800ba83
 800ba3c:	0800ba83 	.word	0x0800ba83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba40:	4b8e      	ldr	r3, [pc, #568]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba44:	4a8d      	ldr	r2, [pc, #564]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba4c:	e01a      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba52:	3308      	adds	r3, #8
 800ba54:	2100      	movs	r1, #0
 800ba56:	4618      	mov	r0, r3
 800ba58:	f001 fc3c 	bl	800d2d4 <RCCEx_PLL2_Config>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba62:	e00f      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba68:	3328      	adds	r3, #40	; 0x28
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f001 fce3 	bl	800d438 <RCCEx_PLL3_Config>
 800ba72:	4603      	mov	r3, r0
 800ba74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba78:	e004      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba80:	e000      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ba82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10a      	bne.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba8c:	4b7b      	ldr	r3, [pc, #492]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba90:	f023 0107 	bic.w	r1, r3, #7
 800ba94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba9a:	4a78      	ldr	r2, [pc, #480]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba9c:	430b      	orrs	r3, r1
 800ba9e:	6513      	str	r3, [r2, #80]	; 0x50
 800baa0:	e003      	b.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800baaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800bab6:	f04f 0b00 	mov.w	fp, #0
 800baba:	ea5a 030b 	orrs.w	r3, sl, fp
 800babe:	d04c      	beq.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800bac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baca:	d030      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800bacc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bad0:	d829      	bhi.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bad2:	2bc0      	cmp	r3, #192	; 0xc0
 800bad4:	d02d      	beq.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bad6:	2bc0      	cmp	r3, #192	; 0xc0
 800bad8:	d825      	bhi.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bada:	2b80      	cmp	r3, #128	; 0x80
 800badc:	d018      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800bade:	2b80      	cmp	r3, #128	; 0x80
 800bae0:	d821      	bhi.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d002      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800bae6:	2b40      	cmp	r3, #64	; 0x40
 800bae8:	d007      	beq.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800baea:	e01c      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baec:	4b63      	ldr	r3, [pc, #396]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800baee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf0:	4a62      	ldr	r2, [pc, #392]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800baf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800baf8:	e01c      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bafe:	3308      	adds	r3, #8
 800bb00:	2100      	movs	r1, #0
 800bb02:	4618      	mov	r0, r3
 800bb04:	f001 fbe6 	bl	800d2d4 <RCCEx_PLL2_Config>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800bb0e:	e011      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb14:	3328      	adds	r3, #40	; 0x28
 800bb16:	2100      	movs	r1, #0
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f001 fc8d 	bl	800d438 <RCCEx_PLL3_Config>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800bb24:	e006      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb2c:	e002      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800bb2e:	bf00      	nop
 800bb30:	e000      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800bb32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10a      	bne.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bb3c:	4b4f      	ldr	r3, [pc, #316]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb40:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800bb44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb4a:	4a4c      	ldr	r2, [pc, #304]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb4c:	430b      	orrs	r3, r1
 800bb4e:	6513      	str	r3, [r2, #80]	; 0x50
 800bb50:	e003      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bb5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb62:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800bb66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800bb70:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800bb74:	460b      	mov	r3, r1
 800bb76:	4313      	orrs	r3, r2
 800bb78:	d053      	beq.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bb7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bb82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb86:	d035      	beq.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800bb88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb8c:	d82e      	bhi.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bb8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb92:	d031      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800bb94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb98:	d828      	bhi.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bb9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb9e:	d01a      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800bba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bba4:	d822      	bhi.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800bbaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bbae:	d007      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800bbb0:	e01c      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbb2:	4b32      	ldr	r3, [pc, #200]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bbb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb6:	4a31      	ldr	r2, [pc, #196]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bbb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbbe:	e01c      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbc4:	3308      	adds	r3, #8
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f001 fb83 	bl	800d2d4 <RCCEx_PLL2_Config>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bbd4:	e011      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbda:	3328      	adds	r3, #40	; 0x28
 800bbdc:	2100      	movs	r1, #0
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f001 fc2a 	bl	800d438 <RCCEx_PLL3_Config>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbea:	e006      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbf2:	e002      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800bbf4:	bf00      	nop
 800bbf6:	e000      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800bbf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10b      	bne.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bc02:	4b1e      	ldr	r3, [pc, #120]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc06:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800bc0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bc12:	4a1a      	ldr	r2, [pc, #104]	; (800bc7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc14:	430b      	orrs	r3, r1
 800bc16:	6593      	str	r3, [r2, #88]	; 0x58
 800bc18:	e003      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bc22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800bc2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bc32:	2300      	movs	r3, #0
 800bc34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bc38:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	d056      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc4e:	d038      	beq.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bc50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc54:	d831      	bhi.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bc56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bc5a:	d034      	beq.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800bc5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bc60:	d82b      	bhi.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bc62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc66:	d01d      	beq.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800bc68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc6c:	d825      	bhi.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d006      	beq.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800bc72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc76:	d00a      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800bc78:	e01f      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bc7a:	bf00      	nop
 800bc7c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc80:	4ba2      	ldr	r3, [pc, #648]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc84:	4aa1      	ldr	r2, [pc, #644]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bc86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc8c:	e01c      	b.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc92:	3308      	adds	r3, #8
 800bc94:	2100      	movs	r1, #0
 800bc96:	4618      	mov	r0, r3
 800bc98:	f001 fb1c 	bl	800d2d4 <RCCEx_PLL2_Config>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bca2:	e011      	b.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bca8:	3328      	adds	r3, #40	; 0x28
 800bcaa:	2100      	movs	r1, #0
 800bcac:	4618      	mov	r0, r3
 800bcae:	f001 fbc3 	bl	800d438 <RCCEx_PLL3_Config>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bcb8:	e006      	b.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcc0:	e002      	b.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800bcc2:	bf00      	nop
 800bcc4:	e000      	b.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800bcc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10b      	bne.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bcd0:	4b8e      	ldr	r3, [pc, #568]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bcd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcd4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800bcd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bce0:	4a8a      	ldr	r2, [pc, #552]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bce2:	430b      	orrs	r3, r1
 800bce4:	6593      	str	r3, [r2, #88]	; 0x58
 800bce6:	e003      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bce8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bcf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800bcfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bd00:	2300      	movs	r3, #0
 800bd02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bd06:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	d03a      	beq.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800bd10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd16:	2b30      	cmp	r3, #48	; 0x30
 800bd18:	d01f      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800bd1a:	2b30      	cmp	r3, #48	; 0x30
 800bd1c:	d819      	bhi.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800bd1e:	2b20      	cmp	r3, #32
 800bd20:	d00c      	beq.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800bd22:	2b20      	cmp	r3, #32
 800bd24:	d815      	bhi.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d019      	beq.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800bd2a:	2b10      	cmp	r3, #16
 800bd2c:	d111      	bne.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd2e:	4b77      	ldr	r3, [pc, #476]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd32:	4a76      	ldr	r2, [pc, #472]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bd34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bd3a:	e011      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd40:	3308      	adds	r3, #8
 800bd42:	2102      	movs	r1, #2
 800bd44:	4618      	mov	r0, r3
 800bd46:	f001 fac5 	bl	800d2d4 <RCCEx_PLL2_Config>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bd50:	e006      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd58:	e002      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800bd5a:	bf00      	nop
 800bd5c:	e000      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800bd5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10a      	bne.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bd68:	4b68      	ldr	r3, [pc, #416]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bd6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd6c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800bd70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd76:	4a65      	ldr	r2, [pc, #404]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bd78:	430b      	orrs	r3, r1
 800bd7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bd7c:	e003      	b.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bd86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bd92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd96:	2300      	movs	r3, #0
 800bd98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bd9c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800bda0:	460b      	mov	r3, r1
 800bda2:	4313      	orrs	r3, r2
 800bda4:	d051      	beq.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdb0:	d035      	beq.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800bdb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdb6:	d82e      	bhi.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bdb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bdbc:	d031      	beq.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800bdbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bdc2:	d828      	bhi.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bdc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdc8:	d01a      	beq.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800bdca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdce:	d822      	bhi.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d003      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x498>
 800bdd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdd8:	d007      	beq.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800bdda:	e01c      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bddc:	4b4b      	ldr	r3, [pc, #300]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bdde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde0:	4a4a      	ldr	r2, [pc, #296]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bde2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bde6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bde8:	e01c      	b.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdee:	3308      	adds	r3, #8
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f001 fa6e 	bl	800d2d4 <RCCEx_PLL2_Config>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bdfe:	e011      	b.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be04:	3328      	adds	r3, #40	; 0x28
 800be06:	2100      	movs	r1, #0
 800be08:	4618      	mov	r0, r3
 800be0a:	f001 fb15 	bl	800d438 <RCCEx_PLL3_Config>
 800be0e:	4603      	mov	r3, r0
 800be10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800be14:	e006      	b.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be1c:	e002      	b.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800be1e:	bf00      	nop
 800be20:	e000      	b.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800be22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10a      	bne.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800be2c:	4b37      	ldr	r3, [pc, #220]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800be2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be30:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800be34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be3a:	4a34      	ldr	r2, [pc, #208]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800be3c:	430b      	orrs	r3, r1
 800be3e:	6513      	str	r3, [r2, #80]	; 0x50
 800be40:	e003      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800be4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800be56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800be5a:	2300      	movs	r3, #0
 800be5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800be60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800be64:	460b      	mov	r3, r1
 800be66:	4313      	orrs	r3, r2
 800be68:	d056      	beq.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800be6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be74:	d033      	beq.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800be76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be7a:	d82c      	bhi.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800be7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be80:	d02f      	beq.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800be82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be86:	d826      	bhi.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800be88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be8c:	d02b      	beq.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800be8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be92:	d820      	bhi.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800be94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be98:	d012      	beq.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800be9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be9e:	d81a      	bhi.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d022      	beq.n	800beea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bea8:	d115      	bne.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800beaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beae:	3308      	adds	r3, #8
 800beb0:	2101      	movs	r1, #1
 800beb2:	4618      	mov	r0, r3
 800beb4:	f001 fa0e 	bl	800d2d4 <RCCEx_PLL2_Config>
 800beb8:	4603      	mov	r3, r0
 800beba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bebe:	e015      	b.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bec4:	3328      	adds	r3, #40	; 0x28
 800bec6:	2101      	movs	r1, #1
 800bec8:	4618      	mov	r0, r3
 800beca:	f001 fab5 	bl	800d438 <RCCEx_PLL3_Config>
 800bece:	4603      	mov	r3, r0
 800bed0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bed4:	e00a      	b.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bedc:	e006      	b.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bede:	bf00      	nop
 800bee0:	e004      	b.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bee2:	bf00      	nop
 800bee4:	e002      	b.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bee6:	bf00      	nop
 800bee8:	e000      	b.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800beea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10d      	bne.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bef4:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bef8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800befc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf02:	4a02      	ldr	r2, [pc, #8]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bf04:	430b      	orrs	r3, r1
 800bf06:	6513      	str	r3, [r2, #80]	; 0x50
 800bf08:	e006      	b.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bf0a:	bf00      	nop
 800bf0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bf18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf20:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bf24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bf28:	2300      	movs	r3, #0
 800bf2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bf2e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bf32:	460b      	mov	r3, r1
 800bf34:	4313      	orrs	r3, r2
 800bf36:	d055      	beq.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bf38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf44:	d033      	beq.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800bf46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf4a:	d82c      	bhi.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bf4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf50:	d02f      	beq.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800bf52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf56:	d826      	bhi.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bf58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf5c:	d02b      	beq.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800bf5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf62:	d820      	bhi.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bf64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf68:	d012      	beq.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800bf6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf6e:	d81a      	bhi.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d022      	beq.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x676>
 800bf74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf78:	d115      	bne.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7e:	3308      	adds	r3, #8
 800bf80:	2101      	movs	r1, #1
 800bf82:	4618      	mov	r0, r3
 800bf84:	f001 f9a6 	bl	800d2d4 <RCCEx_PLL2_Config>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bf8e:	e015      	b.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf94:	3328      	adds	r3, #40	; 0x28
 800bf96:	2101      	movs	r1, #1
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f001 fa4d 	bl	800d438 <RCCEx_PLL3_Config>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bfa4:	e00a      	b.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bfac:	e006      	b.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bfae:	bf00      	nop
 800bfb0:	e004      	b.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bfb2:	bf00      	nop
 800bfb4:	e002      	b.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bfb6:	bf00      	nop
 800bfb8:	e000      	b.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bfba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d10b      	bne.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bfc4:	4ba3      	ldr	r3, [pc, #652]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bfc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfc8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bfcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfd4:	4a9f      	ldr	r2, [pc, #636]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bfd6:	430b      	orrs	r3, r1
 800bfd8:	6593      	str	r3, [r2, #88]	; 0x58
 800bfda:	e003      	b.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfe0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bfe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfec:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bff4:	2300      	movs	r3, #0
 800bff6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bffa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bffe:	460b      	mov	r3, r1
 800c000:	4313      	orrs	r3, r2
 800c002:	d037      	beq.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c00a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c00e:	d00e      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800c010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c014:	d816      	bhi.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800c016:	2b00      	cmp	r3, #0
 800c018:	d018      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800c01a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c01e:	d111      	bne.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c020:	4b8c      	ldr	r3, [pc, #560]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c024:	4a8b      	ldr	r2, [pc, #556]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c02a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c02c:	e00f      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c032:	3308      	adds	r3, #8
 800c034:	2101      	movs	r1, #1
 800c036:	4618      	mov	r0, r3
 800c038:	f001 f94c 	bl	800d2d4 <RCCEx_PLL2_Config>
 800c03c:	4603      	mov	r3, r0
 800c03e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c042:	e004      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c04a:	e000      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800c04c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c04e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10a      	bne.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c056:	4b7f      	ldr	r3, [pc, #508]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c05a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c064:	4a7b      	ldr	r2, [pc, #492]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c066:	430b      	orrs	r3, r1
 800c068:	6513      	str	r3, [r2, #80]	; 0x50
 800c06a:	e003      	b.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c06c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c070:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800c080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c084:	2300      	movs	r3, #0
 800c086:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c08a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800c08e:	460b      	mov	r3, r1
 800c090:	4313      	orrs	r3, r2
 800c092:	d039      	beq.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c09a:	2b03      	cmp	r3, #3
 800c09c:	d81c      	bhi.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800c09e:	a201      	add	r2, pc, #4	; (adr r2, 800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800c0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a4:	0800c0e1 	.word	0x0800c0e1
 800c0a8:	0800c0b5 	.word	0x0800c0b5
 800c0ac:	0800c0c3 	.word	0x0800c0c3
 800c0b0:	0800c0e1 	.word	0x0800c0e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0b4:	4b67      	ldr	r3, [pc, #412]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b8:	4a66      	ldr	r2, [pc, #408]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c0ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c0c0:	e00f      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0c6:	3308      	adds	r3, #8
 800c0c8:	2102      	movs	r1, #2
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f001 f902 	bl	800d2d4 <RCCEx_PLL2_Config>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c0d6:	e004      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c0de:	e000      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800c0e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d10a      	bne.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c0ea:	4b5a      	ldr	r3, [pc, #360]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c0ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ee:	f023 0103 	bic.w	r1, r3, #3
 800c0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0f8:	4a56      	ldr	r2, [pc, #344]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c0fa:	430b      	orrs	r3, r1
 800c0fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c0fe:	e003      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c104:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c110:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800c114:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c118:	2300      	movs	r3, #0
 800c11a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c11e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c122:	460b      	mov	r3, r1
 800c124:	4313      	orrs	r3, r2
 800c126:	f000 809f 	beq.w	800c268 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c12a:	4b4b      	ldr	r3, [pc, #300]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a4a      	ldr	r2, [pc, #296]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c134:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c136:	f7fa f897 	bl	8006268 <HAL_GetTick>
 800c13a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c13e:	e00b      	b.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c140:	f7fa f892 	bl	8006268 <HAL_GetTick>
 800c144:	4602      	mov	r2, r0
 800c146:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	2b64      	cmp	r3, #100	; 0x64
 800c14e:	d903      	bls.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800c150:	2303      	movs	r3, #3
 800c152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c156:	e005      	b.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c158:	4b3f      	ldr	r3, [pc, #252]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c160:	2b00      	cmp	r3, #0
 800c162:	d0ed      	beq.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800c164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d179      	bne.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c16c:	4b39      	ldr	r3, [pc, #228]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c16e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c174:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c178:	4053      	eors	r3, r2
 800c17a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d015      	beq.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c182:	4b34      	ldr	r3, [pc, #208]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c18a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c18e:	4b31      	ldr	r3, [pc, #196]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c192:	4a30      	ldr	r2, [pc, #192]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c198:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c19a:	4b2e      	ldr	r3, [pc, #184]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c19e:	4a2d      	ldr	r2, [pc, #180]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1a4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c1a6:	4a2b      	ldr	r2, [pc, #172]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c1ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c1b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ba:	d118      	bne.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1bc:	f7fa f854 	bl	8006268 <HAL_GetTick>
 800c1c0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c1c4:	e00d      	b.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1c6:	f7fa f84f 	bl	8006268 <HAL_GetTick>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c1d0:	1ad2      	subs	r2, r2, r3
 800c1d2:	f241 3388 	movw	r3, #5000	; 0x1388
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d903      	bls.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800c1da:	2303      	movs	r3, #3
 800c1dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800c1e0:	e005      	b.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c1e2:	4b1c      	ldr	r3, [pc, #112]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1e6:	f003 0302 	and.w	r3, r3, #2
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d0eb      	beq.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800c1ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d129      	bne.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c1fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c206:	d10e      	bne.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800c208:	4b12      	ldr	r3, [pc, #72]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800c210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c214:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c218:	091a      	lsrs	r2, r3, #4
 800c21a:	4b10      	ldr	r3, [pc, #64]	; (800c25c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800c21c:	4013      	ands	r3, r2
 800c21e:	4a0d      	ldr	r2, [pc, #52]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c220:	430b      	orrs	r3, r1
 800c222:	6113      	str	r3, [r2, #16]
 800c224:	e005      	b.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800c226:	4b0b      	ldr	r3, [pc, #44]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	4a0a      	ldr	r2, [pc, #40]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c22c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c230:	6113      	str	r3, [r2, #16]
 800c232:	4b08      	ldr	r3, [pc, #32]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c234:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c23a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c23e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c242:	4a04      	ldr	r2, [pc, #16]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c244:	430b      	orrs	r3, r1
 800c246:	6713      	str	r3, [r2, #112]	; 0x70
 800c248:	e00e      	b.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c24a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c24e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800c252:	e009      	b.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800c254:	58024400 	.word	0x58024400
 800c258:	58024800 	.word	0x58024800
 800c25c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c264:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	f002 0301 	and.w	r3, r2, #1
 800c274:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c278:	2300      	movs	r3, #0
 800c27a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c27e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c282:	460b      	mov	r3, r1
 800c284:	4313      	orrs	r3, r2
 800c286:	f000 8089 	beq.w	800c39c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c28e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c290:	2b28      	cmp	r3, #40	; 0x28
 800c292:	d86b      	bhi.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800c294:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29a:	bf00      	nop
 800c29c:	0800c375 	.word	0x0800c375
 800c2a0:	0800c36d 	.word	0x0800c36d
 800c2a4:	0800c36d 	.word	0x0800c36d
 800c2a8:	0800c36d 	.word	0x0800c36d
 800c2ac:	0800c36d 	.word	0x0800c36d
 800c2b0:	0800c36d 	.word	0x0800c36d
 800c2b4:	0800c36d 	.word	0x0800c36d
 800c2b8:	0800c36d 	.word	0x0800c36d
 800c2bc:	0800c341 	.word	0x0800c341
 800c2c0:	0800c36d 	.word	0x0800c36d
 800c2c4:	0800c36d 	.word	0x0800c36d
 800c2c8:	0800c36d 	.word	0x0800c36d
 800c2cc:	0800c36d 	.word	0x0800c36d
 800c2d0:	0800c36d 	.word	0x0800c36d
 800c2d4:	0800c36d 	.word	0x0800c36d
 800c2d8:	0800c36d 	.word	0x0800c36d
 800c2dc:	0800c357 	.word	0x0800c357
 800c2e0:	0800c36d 	.word	0x0800c36d
 800c2e4:	0800c36d 	.word	0x0800c36d
 800c2e8:	0800c36d 	.word	0x0800c36d
 800c2ec:	0800c36d 	.word	0x0800c36d
 800c2f0:	0800c36d 	.word	0x0800c36d
 800c2f4:	0800c36d 	.word	0x0800c36d
 800c2f8:	0800c36d 	.word	0x0800c36d
 800c2fc:	0800c375 	.word	0x0800c375
 800c300:	0800c36d 	.word	0x0800c36d
 800c304:	0800c36d 	.word	0x0800c36d
 800c308:	0800c36d 	.word	0x0800c36d
 800c30c:	0800c36d 	.word	0x0800c36d
 800c310:	0800c36d 	.word	0x0800c36d
 800c314:	0800c36d 	.word	0x0800c36d
 800c318:	0800c36d 	.word	0x0800c36d
 800c31c:	0800c375 	.word	0x0800c375
 800c320:	0800c36d 	.word	0x0800c36d
 800c324:	0800c36d 	.word	0x0800c36d
 800c328:	0800c36d 	.word	0x0800c36d
 800c32c:	0800c36d 	.word	0x0800c36d
 800c330:	0800c36d 	.word	0x0800c36d
 800c334:	0800c36d 	.word	0x0800c36d
 800c338:	0800c36d 	.word	0x0800c36d
 800c33c:	0800c375 	.word	0x0800c375
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c344:	3308      	adds	r3, #8
 800c346:	2101      	movs	r1, #1
 800c348:	4618      	mov	r0, r3
 800c34a:	f000 ffc3 	bl	800d2d4 <RCCEx_PLL2_Config>
 800c34e:	4603      	mov	r3, r0
 800c350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c354:	e00f      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c35a:	3328      	adds	r3, #40	; 0x28
 800c35c:	2101      	movs	r1, #1
 800c35e:	4618      	mov	r0, r3
 800c360:	f001 f86a 	bl	800d438 <RCCEx_PLL3_Config>
 800c364:	4603      	mov	r3, r0
 800c366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c36a:	e004      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c36c:	2301      	movs	r3, #1
 800c36e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c372:	e000      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800c374:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10a      	bne.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c37e:	4bbf      	ldr	r3, [pc, #764]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c382:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c38a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c38c:	4abb      	ldr	r2, [pc, #748]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c38e:	430b      	orrs	r3, r1
 800c390:	6553      	str	r3, [r2, #84]	; 0x54
 800c392:	e003      	b.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c398:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a4:	f002 0302 	and.w	r3, r2, #2
 800c3a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c3b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	d041      	beq.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3c2:	2b05      	cmp	r3, #5
 800c3c4:	d824      	bhi.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800c3c6:	a201      	add	r2, pc, #4	; (adr r2, 800c3cc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800c3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3cc:	0800c419 	.word	0x0800c419
 800c3d0:	0800c3e5 	.word	0x0800c3e5
 800c3d4:	0800c3fb 	.word	0x0800c3fb
 800c3d8:	0800c419 	.word	0x0800c419
 800c3dc:	0800c419 	.word	0x0800c419
 800c3e0:	0800c419 	.word	0x0800c419
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3e8:	3308      	adds	r3, #8
 800c3ea:	2101      	movs	r1, #1
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f000 ff71 	bl	800d2d4 <RCCEx_PLL2_Config>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c3f8:	e00f      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3fe:	3328      	adds	r3, #40	; 0x28
 800c400:	2101      	movs	r1, #1
 800c402:	4618      	mov	r0, r3
 800c404:	f001 f818 	bl	800d438 <RCCEx_PLL3_Config>
 800c408:	4603      	mov	r3, r0
 800c40a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c40e:	e004      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c410:	2301      	movs	r3, #1
 800c412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c416:	e000      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800c418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c41a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10a      	bne.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c422:	4b96      	ldr	r3, [pc, #600]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c426:	f023 0107 	bic.w	r1, r3, #7
 800c42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c42e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c430:	4a92      	ldr	r2, [pc, #584]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c432:	430b      	orrs	r3, r1
 800c434:	6553      	str	r3, [r2, #84]	; 0x54
 800c436:	e003      	b.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c43c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c448:	f002 0304 	and.w	r3, r2, #4
 800c44c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c450:	2300      	movs	r3, #0
 800c452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c456:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c45a:	460b      	mov	r3, r1
 800c45c:	4313      	orrs	r3, r2
 800c45e:	d044      	beq.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c468:	2b05      	cmp	r3, #5
 800c46a:	d825      	bhi.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800c46c:	a201      	add	r2, pc, #4	; (adr r2, 800c474 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800c46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c472:	bf00      	nop
 800c474:	0800c4c1 	.word	0x0800c4c1
 800c478:	0800c48d 	.word	0x0800c48d
 800c47c:	0800c4a3 	.word	0x0800c4a3
 800c480:	0800c4c1 	.word	0x0800c4c1
 800c484:	0800c4c1 	.word	0x0800c4c1
 800c488:	0800c4c1 	.word	0x0800c4c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c490:	3308      	adds	r3, #8
 800c492:	2101      	movs	r1, #1
 800c494:	4618      	mov	r0, r3
 800c496:	f000 ff1d 	bl	800d2d4 <RCCEx_PLL2_Config>
 800c49a:	4603      	mov	r3, r0
 800c49c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c4a0:	e00f      	b.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4a6:	3328      	adds	r3, #40	; 0x28
 800c4a8:	2101      	movs	r1, #1
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f000 ffc4 	bl	800d438 <RCCEx_PLL3_Config>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c4b6:	e004      	b.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c4be:	e000      	b.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800c4c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d10b      	bne.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c4ca:	4b6c      	ldr	r3, [pc, #432]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ce:	f023 0107 	bic.w	r1, r3, #7
 800c4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4da:	4a68      	ldr	r2, [pc, #416]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c4dc:	430b      	orrs	r3, r1
 800c4de:	6593      	str	r3, [r2, #88]	; 0x58
 800c4e0:	e003      	b.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	f002 0320 	and.w	r3, r2, #32
 800c4f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c504:	460b      	mov	r3, r1
 800c506:	4313      	orrs	r3, r2
 800c508:	d055      	beq.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c516:	d033      	beq.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800c518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c51c:	d82c      	bhi.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c51e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c522:	d02f      	beq.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800c524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c528:	d826      	bhi.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c52a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c52e:	d02b      	beq.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800c530:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c534:	d820      	bhi.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c53a:	d012      	beq.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c53c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c540:	d81a      	bhi.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c542:	2b00      	cmp	r3, #0
 800c544:	d022      	beq.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800c546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c54a:	d115      	bne.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c550:	3308      	adds	r3, #8
 800c552:	2100      	movs	r1, #0
 800c554:	4618      	mov	r0, r3
 800c556:	f000 febd 	bl	800d2d4 <RCCEx_PLL2_Config>
 800c55a:	4603      	mov	r3, r0
 800c55c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c560:	e015      	b.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c566:	3328      	adds	r3, #40	; 0x28
 800c568:	2102      	movs	r1, #2
 800c56a:	4618      	mov	r0, r3
 800c56c:	f000 ff64 	bl	800d438 <RCCEx_PLL3_Config>
 800c570:	4603      	mov	r3, r0
 800c572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c576:	e00a      	b.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c578:	2301      	movs	r3, #1
 800c57a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c57e:	e006      	b.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c580:	bf00      	nop
 800c582:	e004      	b.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c584:	bf00      	nop
 800c586:	e002      	b.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c588:	bf00      	nop
 800c58a:	e000      	b.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c58c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c58e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c592:	2b00      	cmp	r3, #0
 800c594:	d10b      	bne.n	800c5ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c596:	4b39      	ldr	r3, [pc, #228]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c59a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5a6:	4a35      	ldr	r2, [pc, #212]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c5a8:	430b      	orrs	r3, r1
 800c5aa:	6553      	str	r3, [r2, #84]	; 0x54
 800c5ac:	e003      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5be:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c5c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c5cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	d058      	beq.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c5de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c5e2:	d033      	beq.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c5e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c5e8:	d82c      	bhi.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c5ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5ee:	d02f      	beq.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800c5f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5f4:	d826      	bhi.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c5f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c5fa:	d02b      	beq.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800c5fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c600:	d820      	bhi.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c606:	d012      	beq.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800c608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c60c:	d81a      	bhi.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d022      	beq.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800c612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c616:	d115      	bne.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c61c:	3308      	adds	r3, #8
 800c61e:	2100      	movs	r1, #0
 800c620:	4618      	mov	r0, r3
 800c622:	f000 fe57 	bl	800d2d4 <RCCEx_PLL2_Config>
 800c626:	4603      	mov	r3, r0
 800c628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c62c:	e015      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c632:	3328      	adds	r3, #40	; 0x28
 800c634:	2102      	movs	r1, #2
 800c636:	4618      	mov	r0, r3
 800c638:	f000 fefe 	bl	800d438 <RCCEx_PLL3_Config>
 800c63c:	4603      	mov	r3, r0
 800c63e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c642:	e00a      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c644:	2301      	movs	r3, #1
 800c646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c64a:	e006      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c64c:	bf00      	nop
 800c64e:	e004      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c650:	bf00      	nop
 800c652:	e002      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c654:	bf00      	nop
 800c656:	e000      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c65a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10e      	bne.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c662:	4b06      	ldr	r3, [pc, #24]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c666:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c66e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c672:	4a02      	ldr	r2, [pc, #8]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c674:	430b      	orrs	r3, r1
 800c676:	6593      	str	r3, [r2, #88]	; 0x58
 800c678:	e006      	b.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800c67a:	bf00      	nop
 800c67c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c684:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c690:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c698:	2300      	movs	r3, #0
 800c69a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c69e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	d055      	beq.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c6b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c6b4:	d033      	beq.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800c6b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c6ba:	d82c      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c6bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6c0:	d02f      	beq.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800c6c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6c6:	d826      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c6c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c6cc:	d02b      	beq.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800c6ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c6d2:	d820      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c6d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6d8:	d012      	beq.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800c6da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6de:	d81a      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d022      	beq.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800c6e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6e8:	d115      	bne.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ee:	3308      	adds	r3, #8
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 fdee 	bl	800d2d4 <RCCEx_PLL2_Config>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c6fe:	e015      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c704:	3328      	adds	r3, #40	; 0x28
 800c706:	2102      	movs	r1, #2
 800c708:	4618      	mov	r0, r3
 800c70a:	f000 fe95 	bl	800d438 <RCCEx_PLL3_Config>
 800c70e:	4603      	mov	r3, r0
 800c710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c714:	e00a      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c716:	2301      	movs	r3, #1
 800c718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c71c:	e006      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c71e:	bf00      	nop
 800c720:	e004      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c722:	bf00      	nop
 800c724:	e002      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c726:	bf00      	nop
 800c728:	e000      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c72a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c72c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10b      	bne.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c734:	4ba1      	ldr	r3, [pc, #644]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c738:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c740:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c744:	4a9d      	ldr	r2, [pc, #628]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c746:	430b      	orrs	r3, r1
 800c748:	6593      	str	r3, [r2, #88]	; 0x58
 800c74a:	e003      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c74c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c750:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	f002 0308 	and.w	r3, r2, #8
 800c760:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c764:	2300      	movs	r3, #0
 800c766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c76a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c76e:	460b      	mov	r3, r1
 800c770:	4313      	orrs	r3, r2
 800c772:	d01e      	beq.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c77c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c780:	d10c      	bne.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c786:	3328      	adds	r3, #40	; 0x28
 800c788:	2102      	movs	r1, #2
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 fe54 	bl	800d438 <RCCEx_PLL3_Config>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d002      	beq.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c79c:	4b87      	ldr	r3, [pc, #540]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c79e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7ac:	4a83      	ldr	r2, [pc, #524]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c7ae:	430b      	orrs	r3, r1
 800c7b0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ba:	f002 0310 	and.w	r3, r2, #16
 800c7be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c7c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	d01e      	beq.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c7da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7de:	d10c      	bne.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c7e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7e4:	3328      	adds	r3, #40	; 0x28
 800c7e6:	2102      	movs	r1, #2
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f000 fe25 	bl	800d438 <RCCEx_PLL3_Config>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d002      	beq.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c7fa:	4b70      	ldr	r3, [pc, #448]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c7fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c80a:	4a6c      	ldr	r2, [pc, #432]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c80c:	430b      	orrs	r3, r1
 800c80e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c818:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c81c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c820:	2300      	movs	r3, #0
 800c822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c826:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c82a:	460b      	mov	r3, r1
 800c82c:	4313      	orrs	r3, r2
 800c82e:	d03e      	beq.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c834:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c83c:	d022      	beq.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c83e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c842:	d81b      	bhi.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c844:	2b00      	cmp	r3, #0
 800c846:	d003      	beq.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c84c:	d00b      	beq.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c84e:	e015      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c854:	3308      	adds	r3, #8
 800c856:	2100      	movs	r1, #0
 800c858:	4618      	mov	r0, r3
 800c85a:	f000 fd3b 	bl	800d2d4 <RCCEx_PLL2_Config>
 800c85e:	4603      	mov	r3, r0
 800c860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c864:	e00f      	b.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c86a:	3328      	adds	r3, #40	; 0x28
 800c86c:	2102      	movs	r1, #2
 800c86e:	4618      	mov	r0, r3
 800c870:	f000 fde2 	bl	800d438 <RCCEx_PLL3_Config>
 800c874:	4603      	mov	r3, r0
 800c876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c87a:	e004      	b.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c87c:	2301      	movs	r3, #1
 800c87e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c882:	e000      	b.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c884:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d10b      	bne.n	800c8a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c88e:	4b4b      	ldr	r3, [pc, #300]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c892:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c89a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c89e:	4a47      	ldr	r2, [pc, #284]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c8a0:	430b      	orrs	r3, r1
 800c8a2:	6593      	str	r3, [r2, #88]	; 0x58
 800c8a4:	e003      	b.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c8aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c8ba:	67bb      	str	r3, [r7, #120]	; 0x78
 800c8bc:	2300      	movs	r3, #0
 800c8be:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c8c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	d03b      	beq.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c8d6:	d01f      	beq.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c8d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c8dc:	d818      	bhi.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c8de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8e2:	d003      	beq.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c8e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8e8:	d007      	beq.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c8ea:	e011      	b.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8ec:	4b33      	ldr	r3, [pc, #204]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f0:	4a32      	ldr	r2, [pc, #200]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c8f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c8f8:	e00f      	b.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8fe:	3328      	adds	r3, #40	; 0x28
 800c900:	2101      	movs	r1, #1
 800c902:	4618      	mov	r0, r3
 800c904:	f000 fd98 	bl	800d438 <RCCEx_PLL3_Config>
 800c908:	4603      	mov	r3, r0
 800c90a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c90e:	e004      	b.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c916:	e000      	b.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c91a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d10b      	bne.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c922:	4b26      	ldr	r3, [pc, #152]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c926:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c92e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c932:	4a22      	ldr	r2, [pc, #136]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c934:	430b      	orrs	r3, r1
 800c936:	6553      	str	r3, [r2, #84]	; 0x54
 800c938:	e003      	b.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c93a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c93e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c94e:	673b      	str	r3, [r7, #112]	; 0x70
 800c950:	2300      	movs	r3, #0
 800c952:	677b      	str	r3, [r7, #116]	; 0x74
 800c954:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c958:	460b      	mov	r3, r1
 800c95a:	4313      	orrs	r3, r2
 800c95c:	d034      	beq.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c964:	2b00      	cmp	r3, #0
 800c966:	d003      	beq.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c96c:	d007      	beq.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c96e:	e011      	b.n	800c994 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c970:	4b12      	ldr	r3, [pc, #72]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c974:	4a11      	ldr	r2, [pc, #68]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c97a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c97c:	e00e      	b.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c982:	3308      	adds	r3, #8
 800c984:	2102      	movs	r1, #2
 800c986:	4618      	mov	r0, r3
 800c988:	f000 fca4 	bl	800d2d4 <RCCEx_PLL2_Config>
 800c98c:	4603      	mov	r3, r0
 800c98e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c992:	e003      	b.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c994:	2301      	movs	r3, #1
 800c996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c99a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c99c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10d      	bne.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c9a4:	4b05      	ldr	r3, [pc, #20]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c9a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c9ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9b2:	4a02      	ldr	r2, [pc, #8]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c9b4:	430b      	orrs	r3, r1
 800c9b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c9b8:	e006      	b.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c9ba:	bf00      	nop
 800c9bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c9d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c9da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c9de:	460b      	mov	r3, r1
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	d00c      	beq.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9e8:	3328      	adds	r3, #40	; 0x28
 800c9ea:	2102      	movs	r1, #2
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 fd23 	bl	800d438 <RCCEx_PLL3_Config>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d002      	beq.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca06:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ca0a:	663b      	str	r3, [r7, #96]	; 0x60
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	667b      	str	r3, [r7, #100]	; 0x64
 800ca10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ca14:	460b      	mov	r3, r1
 800ca16:	4313      	orrs	r3, r2
 800ca18:	d038      	beq.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ca1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca26:	d018      	beq.n	800ca5a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ca28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca2c:	d811      	bhi.n	800ca52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ca2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca32:	d014      	beq.n	800ca5e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ca34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca38:	d80b      	bhi.n	800ca52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d011      	beq.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ca3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca42:	d106      	bne.n	800ca52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca44:	4bc3      	ldr	r3, [pc, #780]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ca46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca48:	4ac2      	ldr	r2, [pc, #776]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ca4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ca50:	e008      	b.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca52:	2301      	movs	r3, #1
 800ca54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ca58:	e004      	b.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ca5a:	bf00      	nop
 800ca5c:	e002      	b.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ca5e:	bf00      	nop
 800ca60:	e000      	b.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ca62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10b      	bne.n	800ca84 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ca6c:	4bb9      	ldr	r3, [pc, #740]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ca6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ca74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca7c:	4ab5      	ldr	r2, [pc, #724]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ca7e:	430b      	orrs	r3, r1
 800ca80:	6553      	str	r3, [r2, #84]	; 0x54
 800ca82:	e003      	b.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ca8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca94:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ca98:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800caa2:	460b      	mov	r3, r1
 800caa4:	4313      	orrs	r3, r2
 800caa6:	d009      	beq.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800caa8:	4baa      	ldr	r3, [pc, #680]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800caaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cab6:	4aa7      	ldr	r2, [pc, #668]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cab8:	430b      	orrs	r3, r1
 800caba:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cabc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800cac8:	653b      	str	r3, [r7, #80]	; 0x50
 800caca:	2300      	movs	r3, #0
 800cacc:	657b      	str	r3, [r7, #84]	; 0x54
 800cace:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800cad2:	460b      	mov	r3, r1
 800cad4:	4313      	orrs	r3, r2
 800cad6:	d00a      	beq.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cad8:	4b9e      	ldr	r3, [pc, #632]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800cae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cae4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cae8:	4a9a      	ldr	r2, [pc, #616]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800caea:	430b      	orrs	r3, r1
 800caec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800caee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800caf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800cafa:	64bb      	str	r3, [r7, #72]	; 0x48
 800cafc:	2300      	movs	r3, #0
 800cafe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800cb04:	460b      	mov	r3, r1
 800cb06:	4313      	orrs	r3, r2
 800cb08:	d009      	beq.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cb0a:	4b92      	ldr	r3, [pc, #584]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb0e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800cb12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb18:	4a8e      	ldr	r2, [pc, #568]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb1a:	430b      	orrs	r3, r1
 800cb1c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb26:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800cb2a:	643b      	str	r3, [r7, #64]	; 0x40
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	647b      	str	r3, [r7, #68]	; 0x44
 800cb30:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800cb34:	460b      	mov	r3, r1
 800cb36:	4313      	orrs	r3, r2
 800cb38:	d00e      	beq.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cb3a:	4b86      	ldr	r3, [pc, #536]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	4a85      	ldr	r2, [pc, #532]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb44:	6113      	str	r3, [r2, #16]
 800cb46:	4b83      	ldr	r3, [pc, #524]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb48:	6919      	ldr	r1, [r3, #16]
 800cb4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cb52:	4a80      	ldr	r2, [pc, #512]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb54:	430b      	orrs	r3, r1
 800cb56:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb60:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800cb64:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb66:	2300      	movs	r3, #0
 800cb68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800cb6e:	460b      	mov	r3, r1
 800cb70:	4313      	orrs	r3, r2
 800cb72:	d009      	beq.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cb74:	4b77      	ldr	r3, [pc, #476]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb78:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800cb7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb82:	4a74      	ldr	r2, [pc, #464]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb84:	430b      	orrs	r3, r1
 800cb86:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cb88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb90:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800cb94:	633b      	str	r3, [r7, #48]	; 0x30
 800cb96:	2300      	movs	r3, #0
 800cb98:	637b      	str	r3, [r7, #52]	; 0x34
 800cb9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800cb9e:	460b      	mov	r3, r1
 800cba0:	4313      	orrs	r3, r2
 800cba2:	d00a      	beq.n	800cbba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cba4:	4b6b      	ldr	r3, [pc, #428]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cba8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800cbac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbb4:	4a67      	ldr	r2, [pc, #412]	; (800cd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cbb6:	430b      	orrs	r3, r1
 800cbb8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cbba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	62b9      	str	r1, [r7, #40]	; 0x28
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbcc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	d011      	beq.n	800cbfa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cbd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbda:	3308      	adds	r3, #8
 800cbdc:	2100      	movs	r1, #0
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 fb78 	bl	800d2d4 <RCCEx_PLL2_Config>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800cbea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d003      	beq.n	800cbfa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cbf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cbfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc02:	2100      	movs	r1, #0
 800cc04:	6239      	str	r1, [r7, #32]
 800cc06:	f003 0302 	and.w	r3, r3, #2
 800cc0a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc0c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cc10:	460b      	mov	r3, r1
 800cc12:	4313      	orrs	r3, r2
 800cc14:	d011      	beq.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc1a:	3308      	adds	r3, #8
 800cc1c:	2101      	movs	r1, #1
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f000 fb58 	bl	800d2d4 <RCCEx_PLL2_Config>
 800cc24:	4603      	mov	r3, r0
 800cc26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800cc2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d003      	beq.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cc3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc42:	2100      	movs	r1, #0
 800cc44:	61b9      	str	r1, [r7, #24]
 800cc46:	f003 0304 	and.w	r3, r3, #4
 800cc4a:	61fb      	str	r3, [r7, #28]
 800cc4c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cc50:	460b      	mov	r3, r1
 800cc52:	4313      	orrs	r3, r2
 800cc54:	d011      	beq.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc5a:	3308      	adds	r3, #8
 800cc5c:	2102      	movs	r1, #2
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f000 fb38 	bl	800d2d4 <RCCEx_PLL2_Config>
 800cc64:	4603      	mov	r3, r0
 800cc66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800cc6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d003      	beq.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cc7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc82:	2100      	movs	r1, #0
 800cc84:	6139      	str	r1, [r7, #16]
 800cc86:	f003 0308 	and.w	r3, r3, #8
 800cc8a:	617b      	str	r3, [r7, #20]
 800cc8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cc90:	460b      	mov	r3, r1
 800cc92:	4313      	orrs	r3, r2
 800cc94:	d011      	beq.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cc96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc9a:	3328      	adds	r3, #40	; 0x28
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f000 fbca 	bl	800d438 <RCCEx_PLL3_Config>
 800cca4:	4603      	mov	r3, r0
 800cca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ccaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d003      	beq.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ccba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	f003 0310 	and.w	r3, r3, #16
 800ccca:	60fb      	str	r3, [r7, #12]
 800cccc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	d011      	beq.n	800ccfa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ccd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccda:	3328      	adds	r3, #40	; 0x28
 800ccdc:	2101      	movs	r1, #1
 800ccde:	4618      	mov	r0, r3
 800cce0:	f000 fbaa 	bl	800d438 <RCCEx_PLL3_Config>
 800cce4:	4603      	mov	r3, r0
 800cce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ccea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d003      	beq.n	800ccfa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ccfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd02:	2100      	movs	r1, #0
 800cd04:	6039      	str	r1, [r7, #0]
 800cd06:	f003 0320 	and.w	r3, r3, #32
 800cd0a:	607b      	str	r3, [r7, #4]
 800cd0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cd10:	460b      	mov	r3, r1
 800cd12:	4313      	orrs	r3, r2
 800cd14:	d011      	beq.n	800cd3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd1a:	3328      	adds	r3, #40	; 0x28
 800cd1c:	2102      	movs	r1, #2
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 fb8a 	bl	800d438 <RCCEx_PLL3_Config>
 800cd24:	4603      	mov	r3, r0
 800cd26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800cd2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d003      	beq.n	800cd3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800cd3a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	e000      	b.n	800cd48 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800cd46:	2301      	movs	r3, #1
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd54:	58024400 	.word	0x58024400

0800cd58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cd5c:	f7fe fd96 	bl	800b88c <HAL_RCC_GetHCLKFreq>
 800cd60:	4602      	mov	r2, r0
 800cd62:	4b06      	ldr	r3, [pc, #24]	; (800cd7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cd64:	6a1b      	ldr	r3, [r3, #32]
 800cd66:	091b      	lsrs	r3, r3, #4
 800cd68:	f003 0307 	and.w	r3, r3, #7
 800cd6c:	4904      	ldr	r1, [pc, #16]	; (800cd80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cd6e:	5ccb      	ldrb	r3, [r1, r3]
 800cd70:	f003 031f 	and.w	r3, r3, #31
 800cd74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	58024400 	.word	0x58024400
 800cd80:	080109d0 	.word	0x080109d0

0800cd84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b089      	sub	sp, #36	; 0x24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd8c:	4ba1      	ldr	r3, [pc, #644]	; (800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd90:	f003 0303 	and.w	r3, r3, #3
 800cd94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cd96:	4b9f      	ldr	r3, [pc, #636]	; (800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd9a:	0b1b      	lsrs	r3, r3, #12
 800cd9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cda0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cda2:	4b9c      	ldr	r3, [pc, #624]	; (800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda6:	091b      	lsrs	r3, r3, #4
 800cda8:	f003 0301 	and.w	r3, r3, #1
 800cdac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cdae:	4b99      	ldr	r3, [pc, #612]	; (800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb2:	08db      	lsrs	r3, r3, #3
 800cdb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cdb8:	693a      	ldr	r2, [r7, #16]
 800cdba:	fb02 f303 	mul.w	r3, r2, r3
 800cdbe:	ee07 3a90 	vmov	s15, r3
 800cdc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f000 8111 	beq.w	800cff4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	f000 8083 	beq.w	800cee0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	f200 80a1 	bhi.w	800cf24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d003      	beq.n	800cdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d056      	beq.n	800ce9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cdee:	e099      	b.n	800cf24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdf0:	4b88      	ldr	r3, [pc, #544]	; (800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f003 0320 	and.w	r3, r3, #32
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d02d      	beq.n	800ce58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdfc:	4b85      	ldr	r3, [pc, #532]	; (800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	08db      	lsrs	r3, r3, #3
 800ce02:	f003 0303 	and.w	r3, r3, #3
 800ce06:	4a84      	ldr	r2, [pc, #528]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ce08:	fa22 f303 	lsr.w	r3, r2, r3
 800ce0c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	ee07 3a90 	vmov	s15, r3
 800ce14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	ee07 3a90 	vmov	s15, r3
 800ce1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce26:	4b7b      	ldr	r3, [pc, #492]	; (800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce2e:	ee07 3a90 	vmov	s15, r3
 800ce32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d01c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce56:	e087      	b.n	800cf68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	ee07 3a90 	vmov	s15, r3
 800ce5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d020 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ce66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce6a:	4b6a      	ldr	r3, [pc, #424]	; (800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce72:	ee07 3a90 	vmov	s15, r3
 800ce76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d01c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce9a:	e065      	b.n	800cf68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	ee07 3a90 	vmov	s15, r3
 800cea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cea6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d024 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ceaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceae:	4b59      	ldr	r3, [pc, #356]	; (800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ceb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceb6:	ee07 3a90 	vmov	s15, r3
 800ceba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cebe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cec2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d01c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ceca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ced2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ced6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cede:	e043      	b.n	800cf68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	ee07 3a90 	vmov	s15, r3
 800cee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d028 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ceee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cef2:	4b48      	ldr	r3, [pc, #288]	; (800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cefa:	ee07 3a90 	vmov	s15, r3
 800cefe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf02:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf06:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d01c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf22:	e021      	b.n	800cf68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	ee07 3a90 	vmov	s15, r3
 800cf2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d024 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cf32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf36:	4b37      	ldr	r3, [pc, #220]	; (800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf3e:	ee07 3a90 	vmov	s15, r3
 800cf42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf46:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d01c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cf68:	4b2a      	ldr	r3, [pc, #168]	; (800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf6c:	0a5b      	lsrs	r3, r3, #9
 800cf6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf72:	ee07 3a90 	vmov	s15, r3
 800cf76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf82:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf8e:	ee17 2a90 	vmov	r2, s15
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cf96:	4b1f      	ldr	r3, [pc, #124]	; (800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9a:	0c1b      	lsrs	r3, r3, #16
 800cf9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfa0:	ee07 3a90 	vmov	s15, r3
 800cfa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfb0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfbc:	ee17 2a90 	vmov	r2, s15
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cfc4:	4b13      	ldr	r3, [pc, #76]	; (800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfc8:	0e1b      	lsrs	r3, r3, #24
 800cfca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfce:	ee07 3a90 	vmov	s15, r3
 800cfd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfda:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfde:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfea:	ee17 2a90 	vmov	r2, s15
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cff2:	e008      	b.n	800d006 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	609a      	str	r2, [r3, #8]
}
 800d006:	bf00      	nop
 800d008:	3724      	adds	r7, #36	; 0x24
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop
 800d014:	58024400 	.word	0x58024400
 800d018:	03d09000 	.word	0x03d09000
 800d01c:	46000000 	.word	0x46000000
 800d020:	4c742400 	.word	0x4c742400
 800d024:	4a742400 	.word	0x4a742400
 800d028:	4bbebc20 	.word	0x4bbebc20

0800d02c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b089      	sub	sp, #36	; 0x24
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d034:	4ba1      	ldr	r3, [pc, #644]	; (800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d038:	f003 0303 	and.w	r3, r3, #3
 800d03c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d03e:	4b9f      	ldr	r3, [pc, #636]	; (800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d042:	0d1b      	lsrs	r3, r3, #20
 800d044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d048:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d04a:	4b9c      	ldr	r3, [pc, #624]	; (800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04e:	0a1b      	lsrs	r3, r3, #8
 800d050:	f003 0301 	and.w	r3, r3, #1
 800d054:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d056:	4b99      	ldr	r3, [pc, #612]	; (800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d05a:	08db      	lsrs	r3, r3, #3
 800d05c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d060:	693a      	ldr	r2, [r7, #16]
 800d062:	fb02 f303 	mul.w	r3, r2, r3
 800d066:	ee07 3a90 	vmov	s15, r3
 800d06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d06e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	2b00      	cmp	r3, #0
 800d076:	f000 8111 	beq.w	800d29c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	f000 8083 	beq.w	800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	2b02      	cmp	r3, #2
 800d086:	f200 80a1 	bhi.w	800d1cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d003      	beq.n	800d098 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	2b01      	cmp	r3, #1
 800d094:	d056      	beq.n	800d144 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d096:	e099      	b.n	800d1cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d098:	4b88      	ldr	r3, [pc, #544]	; (800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f003 0320 	and.w	r3, r3, #32
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d02d      	beq.n	800d100 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0a4:	4b85      	ldr	r3, [pc, #532]	; (800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	08db      	lsrs	r3, r3, #3
 800d0aa:	f003 0303 	and.w	r3, r3, #3
 800d0ae:	4a84      	ldr	r2, [pc, #528]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d0b0:	fa22 f303 	lsr.w	r3, r2, r3
 800d0b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	ee07 3a90 	vmov	s15, r3
 800d0bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	ee07 3a90 	vmov	s15, r3
 800d0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0ce:	4b7b      	ldr	r3, [pc, #492]	; (800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0d6:	ee07 3a90 	vmov	s15, r3
 800d0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0de:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0fe:	e087      	b.n	800d210 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	ee07 3a90 	vmov	s15, r3
 800d106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d10a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d10e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d112:	4b6a      	ldr	r3, [pc, #424]	; (800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d11a:	ee07 3a90 	vmov	s15, r3
 800d11e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d122:	ed97 6a03 	vldr	s12, [r7, #12]
 800d126:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d12a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d12e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d13e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d142:	e065      	b.n	800d210 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	ee07 3a90 	vmov	s15, r3
 800d14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d14e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d2cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d156:	4b59      	ldr	r3, [pc, #356]	; (800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d15a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d15e:	ee07 3a90 	vmov	s15, r3
 800d162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d166:	ed97 6a03 	vldr	s12, [r7, #12]
 800d16a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d16e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d17a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d17e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d186:	e043      	b.n	800d210 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	ee07 3a90 	vmov	s15, r3
 800d18e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d192:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d19a:	4b48      	ldr	r3, [pc, #288]	; (800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d19e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1a2:	ee07 3a90 	vmov	s15, r3
 800d1a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1ca:	e021      	b.n	800d210 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	ee07 3a90 	vmov	s15, r3
 800d1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d2cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d1da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1de:	4b37      	ldr	r3, [pc, #220]	; (800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1e6:	ee07 3a90 	vmov	s15, r3
 800d1ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d20a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d20e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d210:	4b2a      	ldr	r3, [pc, #168]	; (800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d214:	0a5b      	lsrs	r3, r3, #9
 800d216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d21a:	ee07 3a90 	vmov	s15, r3
 800d21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d22a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d22e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d236:	ee17 2a90 	vmov	r2, s15
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d23e:	4b1f      	ldr	r3, [pc, #124]	; (800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d242:	0c1b      	lsrs	r3, r3, #16
 800d244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d248:	ee07 3a90 	vmov	s15, r3
 800d24c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d254:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d258:	edd7 6a07 	vldr	s13, [r7, #28]
 800d25c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d264:	ee17 2a90 	vmov	r2, s15
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d26c:	4b13      	ldr	r3, [pc, #76]	; (800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d270:	0e1b      	lsrs	r3, r3, #24
 800d272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d276:	ee07 3a90 	vmov	s15, r3
 800d27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d27e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d282:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d286:	edd7 6a07 	vldr	s13, [r7, #28]
 800d28a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d28e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d292:	ee17 2a90 	vmov	r2, s15
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d29a:	e008      	b.n	800d2ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	609a      	str	r2, [r3, #8]
}
 800d2ae:	bf00      	nop
 800d2b0:	3724      	adds	r7, #36	; 0x24
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	58024400 	.word	0x58024400
 800d2c0:	03d09000 	.word	0x03d09000
 800d2c4:	46000000 	.word	0x46000000
 800d2c8:	4c742400 	.word	0x4c742400
 800d2cc:	4a742400 	.word	0x4a742400
 800d2d0:	4bbebc20 	.word	0x4bbebc20

0800d2d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d2e2:	4b53      	ldr	r3, [pc, #332]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e6:	f003 0303 	and.w	r3, r3, #3
 800d2ea:	2b03      	cmp	r3, #3
 800d2ec:	d101      	bne.n	800d2f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e099      	b.n	800d426 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d2f2:	4b4f      	ldr	r3, [pc, #316]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a4e      	ldr	r2, [pc, #312]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d2f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d2fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2fe:	f7f8 ffb3 	bl	8006268 <HAL_GetTick>
 800d302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d304:	e008      	b.n	800d318 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d306:	f7f8 ffaf 	bl	8006268 <HAL_GetTick>
 800d30a:	4602      	mov	r2, r0
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	2b02      	cmp	r3, #2
 800d312:	d901      	bls.n	800d318 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d314:	2303      	movs	r3, #3
 800d316:	e086      	b.n	800d426 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d318:	4b45      	ldr	r3, [pc, #276]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d320:	2b00      	cmp	r3, #0
 800d322:	d1f0      	bne.n	800d306 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d324:	4b42      	ldr	r3, [pc, #264]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d328:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	031b      	lsls	r3, r3, #12
 800d332:	493f      	ldr	r1, [pc, #252]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d334:	4313      	orrs	r3, r2
 800d336:	628b      	str	r3, [r1, #40]	; 0x28
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	3b01      	subs	r3, #1
 800d33e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	3b01      	subs	r3, #1
 800d348:	025b      	lsls	r3, r3, #9
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	431a      	orrs	r2, r3
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	68db      	ldr	r3, [r3, #12]
 800d352:	3b01      	subs	r3, #1
 800d354:	041b      	lsls	r3, r3, #16
 800d356:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d35a:	431a      	orrs	r2, r3
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	691b      	ldr	r3, [r3, #16]
 800d360:	3b01      	subs	r3, #1
 800d362:	061b      	lsls	r3, r3, #24
 800d364:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d368:	4931      	ldr	r1, [pc, #196]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d36a:	4313      	orrs	r3, r2
 800d36c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d36e:	4b30      	ldr	r3, [pc, #192]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d372:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	695b      	ldr	r3, [r3, #20]
 800d37a:	492d      	ldr	r1, [pc, #180]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d37c:	4313      	orrs	r3, r2
 800d37e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d380:	4b2b      	ldr	r3, [pc, #172]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d384:	f023 0220 	bic.w	r2, r3, #32
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	699b      	ldr	r3, [r3, #24]
 800d38c:	4928      	ldr	r1, [pc, #160]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d38e:	4313      	orrs	r3, r2
 800d390:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d392:	4b27      	ldr	r3, [pc, #156]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d396:	4a26      	ldr	r2, [pc, #152]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d398:	f023 0310 	bic.w	r3, r3, #16
 800d39c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d39e:	4b24      	ldr	r3, [pc, #144]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d3a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3a2:	4b24      	ldr	r3, [pc, #144]	; (800d434 <RCCEx_PLL2_Config+0x160>)
 800d3a4:	4013      	ands	r3, r2
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	69d2      	ldr	r2, [r2, #28]
 800d3aa:	00d2      	lsls	r2, r2, #3
 800d3ac:	4920      	ldr	r1, [pc, #128]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d3b2:	4b1f      	ldr	r3, [pc, #124]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b6:	4a1e      	ldr	r2, [pc, #120]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d3b8:	f043 0310 	orr.w	r3, r3, #16
 800d3bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d106      	bne.n	800d3d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d3c4:	4b1a      	ldr	r3, [pc, #104]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c8:	4a19      	ldr	r2, [pc, #100]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d3ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d3ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3d0:	e00f      	b.n	800d3f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d106      	bne.n	800d3e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d3d8:	4b15      	ldr	r3, [pc, #84]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3dc:	4a14      	ldr	r2, [pc, #80]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d3de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3e4:	e005      	b.n	800d3f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d3e6:	4b12      	ldr	r3, [pc, #72]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ea:	4a11      	ldr	r2, [pc, #68]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d3ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d3f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d3f2:	4b0f      	ldr	r3, [pc, #60]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a0e      	ldr	r2, [pc, #56]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d3f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d3fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3fe:	f7f8 ff33 	bl	8006268 <HAL_GetTick>
 800d402:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d404:	e008      	b.n	800d418 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d406:	f7f8 ff2f 	bl	8006268 <HAL_GetTick>
 800d40a:	4602      	mov	r2, r0
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	1ad3      	subs	r3, r2, r3
 800d410:	2b02      	cmp	r3, #2
 800d412:	d901      	bls.n	800d418 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d414:	2303      	movs	r3, #3
 800d416:	e006      	b.n	800d426 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d418:	4b05      	ldr	r3, [pc, #20]	; (800d430 <RCCEx_PLL2_Config+0x15c>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d420:	2b00      	cmp	r3, #0
 800d422:	d0f0      	beq.n	800d406 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d424:	7bfb      	ldrb	r3, [r7, #15]
}
 800d426:	4618      	mov	r0, r3
 800d428:	3710      	adds	r7, #16
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	58024400 	.word	0x58024400
 800d434:	ffff0007 	.word	0xffff0007

0800d438 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d442:	2300      	movs	r3, #0
 800d444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d446:	4b53      	ldr	r3, [pc, #332]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d44a:	f003 0303 	and.w	r3, r3, #3
 800d44e:	2b03      	cmp	r3, #3
 800d450:	d101      	bne.n	800d456 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d452:	2301      	movs	r3, #1
 800d454:	e099      	b.n	800d58a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d456:	4b4f      	ldr	r3, [pc, #316]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a4e      	ldr	r2, [pc, #312]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d45c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d462:	f7f8 ff01 	bl	8006268 <HAL_GetTick>
 800d466:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d468:	e008      	b.n	800d47c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d46a:	f7f8 fefd 	bl	8006268 <HAL_GetTick>
 800d46e:	4602      	mov	r2, r0
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	1ad3      	subs	r3, r2, r3
 800d474:	2b02      	cmp	r3, #2
 800d476:	d901      	bls.n	800d47c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d478:	2303      	movs	r3, #3
 800d47a:	e086      	b.n	800d58a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d47c:	4b45      	ldr	r3, [pc, #276]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d484:	2b00      	cmp	r3, #0
 800d486:	d1f0      	bne.n	800d46a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d488:	4b42      	ldr	r3, [pc, #264]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d48c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	051b      	lsls	r3, r3, #20
 800d496:	493f      	ldr	r1, [pc, #252]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d498:	4313      	orrs	r3, r2
 800d49a:	628b      	str	r3, [r1, #40]	; 0x28
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	3b01      	subs	r3, #1
 800d4a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	689b      	ldr	r3, [r3, #8]
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	025b      	lsls	r3, r3, #9
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	431a      	orrs	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	041b      	lsls	r3, r3, #16
 800d4ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d4be:	431a      	orrs	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	691b      	ldr	r3, [r3, #16]
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	061b      	lsls	r3, r3, #24
 800d4c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d4cc:	4931      	ldr	r1, [pc, #196]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d4d2:	4b30      	ldr	r3, [pc, #192]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	695b      	ldr	r3, [r3, #20]
 800d4de:	492d      	ldr	r1, [pc, #180]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d4e4:	4b2b      	ldr	r3, [pc, #172]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	699b      	ldr	r3, [r3, #24]
 800d4f0:	4928      	ldr	r1, [pc, #160]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d4f6:	4b27      	ldr	r3, [pc, #156]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4fa:	4a26      	ldr	r2, [pc, #152]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d4fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d500:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d502:	4b24      	ldr	r3, [pc, #144]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d506:	4b24      	ldr	r3, [pc, #144]	; (800d598 <RCCEx_PLL3_Config+0x160>)
 800d508:	4013      	ands	r3, r2
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	69d2      	ldr	r2, [r2, #28]
 800d50e:	00d2      	lsls	r2, r2, #3
 800d510:	4920      	ldr	r1, [pc, #128]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d512:	4313      	orrs	r3, r2
 800d514:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d516:	4b1f      	ldr	r3, [pc, #124]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d51a:	4a1e      	ldr	r2, [pc, #120]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d51c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d520:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d106      	bne.n	800d536 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d528:	4b1a      	ldr	r3, [pc, #104]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d52c:	4a19      	ldr	r2, [pc, #100]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d52e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d532:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d534:	e00f      	b.n	800d556 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d106      	bne.n	800d54a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d53c:	4b15      	ldr	r3, [pc, #84]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d540:	4a14      	ldr	r2, [pc, #80]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d542:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d546:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d548:	e005      	b.n	800d556 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d54a:	4b12      	ldr	r3, [pc, #72]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54e:	4a11      	ldr	r2, [pc, #68]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d554:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d556:	4b0f      	ldr	r3, [pc, #60]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4a0e      	ldr	r2, [pc, #56]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d55c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d562:	f7f8 fe81 	bl	8006268 <HAL_GetTick>
 800d566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d568:	e008      	b.n	800d57c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d56a:	f7f8 fe7d 	bl	8006268 <HAL_GetTick>
 800d56e:	4602      	mov	r2, r0
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	2b02      	cmp	r3, #2
 800d576:	d901      	bls.n	800d57c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d578:	2303      	movs	r3, #3
 800d57a:	e006      	b.n	800d58a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d57c:	4b05      	ldr	r3, [pc, #20]	; (800d594 <RCCEx_PLL3_Config+0x15c>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d584:	2b00      	cmp	r3, #0
 800d586:	d0f0      	beq.n	800d56a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d588:	7bfb      	ldrb	r3, [r7, #15]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3710      	adds	r7, #16
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	58024400 	.word	0x58024400
 800d598:	ffff0007 	.word	0xffff0007

0800d59c <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e050      	b.n	800d650 <HAL_SAI_DeInit+0xb4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2202      	movs	r2, #2
 800d5b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d5c6:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  if (SAI_Disable(hsai) != HAL_OK)
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f8d5 	bl	800d778 <SAI_Disable>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d009      	beq.n	800d5e8 <HAL_SAI_DeInit+0x4c>
  {
    /* Reset SAI state to ready */
    hsai->State = HAL_SAI_STATE_READY;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Release Lock */
    __HAL_UNLOCK(hsai);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e033      	b.n	800d650 <HAL_SAI_DeInit+0xb4>
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	685a      	ldr	r2, [r3, #4]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f042 0208 	orr.w	r2, r2, #8
 800d5f6:	605a      	str	r2, [r3, #4]

  /* Disable SAI PDM interface */
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a16      	ldr	r2, [pc, #88]	; (800d658 <HAL_SAI_DeInit+0xbc>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d004      	beq.n	800d60c <HAL_SAI_DeInit+0x70>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a15      	ldr	r2, [pc, #84]	; (800d65c <HAL_SAI_DeInit+0xc0>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d111      	bne.n	800d630 <HAL_SAI_DeInit+0x94>
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Get the SAI base address according to the SAI handle */
#if defined(SAI4)
    SaiBaseAddress = (hsai->Instance == SAI1_Block_A) ? SAI1 : SAI4;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a11      	ldr	r2, [pc, #68]	; (800d658 <HAL_SAI_DeInit+0xbc>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d101      	bne.n	800d61a <HAL_SAI_DeInit+0x7e>
 800d616:	4b12      	ldr	r3, [pc, #72]	; (800d660 <HAL_SAI_DeInit+0xc4>)
 800d618:	e000      	b.n	800d61c <HAL_SAI_DeInit+0x80>
 800d61a:	4b12      	ldr	r3, [pc, #72]	; (800d664 <HAL_SAI_DeInit+0xc8>)
 800d61c:	60fb      	str	r3, [r7, #12]
#else
    SaiBaseAddress = SAI1;
#endif /* SAI4 */

    /* Reset PDM delays */
    SaiBaseAddress->PDMDLY = 0U;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2200      	movs	r2, #0
 800d622:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d628:	f023 0201 	bic.w	r2, r3, #1
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	645a      	str	r2, [r3, #68]	; 0x44
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 f819 	bl	800d668 <HAL_SAI_MspDeInit>
#endif

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2200      	movs	r2, #0
 800d64a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800d64e:	2300      	movs	r3, #0
}
 800d650:	4618      	mov	r0, r3
 800d652:	3710      	adds	r7, #16
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	40015804 	.word	0x40015804
 800d65c:	58005404 	.word	0x58005404
 800d660:	40015800 	.word	0x40015800
 800d664:	58005400 	.word	0x58005400

0800d668 <HAL_SAI_MspDeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspDeInit could be implemented in the user file
   */
}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d684:	2300      	movs	r3, #0
 800d686:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d101      	bne.n	800d696 <HAL_SAI_DMAStop+0x1a>
 800d692:	2302      	movs	r3, #2
 800d694:	e06c      	b.n	800d770 <HAL_SAI_DMAStop+0xf4>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2201      	movs	r2, #1
 800d69a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d6ac:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	2b12      	cmp	r3, #18
 800d6b8:	d11d      	bne.n	800d6f6 <HAL_SAI_DMAStop+0x7a>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d018      	beq.n	800d6f6 <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7f9 f910 	bl	80068f0 <HAL_DMA_Abort>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00f      	beq.n	800d6f6 <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6de:	2b80      	cmp	r3, #128	; 0x80
 800d6e0:	d009      	beq.n	800d6f6 <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d6ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	2b22      	cmp	r3, #34	; 0x22
 800d700:	d11d      	bne.n	800d73e <HAL_SAI_DMAStop+0xc2>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d018      	beq.n	800d73e <HAL_SAI_DMAStop+0xc2>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d712:	4618      	mov	r0, r3
 800d714:	f7f9 f8ec 	bl	80068f0 <HAL_DMA_Abort>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00f      	beq.n	800d73e <HAL_SAI_DMAStop+0xc2>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d726:	2b80      	cmp	r3, #128	; 0x80
 800d728:	d009      	beq.n	800d73e <HAL_SAI_DMAStop+0xc2>
      {
        status = HAL_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d734:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 f81a 	bl	800d778 <SAI_Disable>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d001      	beq.n	800d74e <HAL_SAI_DMAStop+0xd2>
  {
    status = HAL_ERROR;
 800d74a:	2301      	movs	r3, #1
 800d74c:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	685a      	ldr	r2, [r3, #4]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f042 0208 	orr.w	r2, r2, #8
 800d75c:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2201      	movs	r2, #1
 800d762:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 800d76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3710      	adds	r7, #16
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d780:	4b18      	ldr	r3, [pc, #96]	; (800d7e4 <SAI_Disable+0x6c>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a18      	ldr	r2, [pc, #96]	; (800d7e8 <SAI_Disable+0x70>)
 800d786:	fba2 2303 	umull	r2, r3, r2, r3
 800d78a:	0b1b      	lsrs	r3, r3, #12
 800d78c:	009b      	lsls	r3, r3, #2
 800d78e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d790:	2300      	movs	r3, #0
 800d792:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d7a2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10a      	bne.n	800d7c0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800d7ba:	2303      	movs	r3, #3
 800d7bc:	72fb      	strb	r3, [r7, #11]
      break;
 800d7be:	e009      	b.n	800d7d4 <SAI_Disable+0x5c>
    }
    count--;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d1e7      	bne.n	800d7a4 <SAI_Disable+0x2c>

  return status;
 800d7d4:	7afb      	ldrb	r3, [r7, #11]
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3714      	adds	r7, #20
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop
 800d7e4:	24000004 	.word	0x24000004
 800d7e8:	95cbec1b 	.word	0x95cbec1b

0800d7ec <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d101      	bne.n	800d800 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	e02b      	b.n	800d858 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d806:	b2db      	uxtb	r3, r3
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d106      	bne.n	800d81a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 f825 	bl	800d864 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2202      	movs	r2, #2
 800d81e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	3304      	adds	r3, #4
 800d82a:	4619      	mov	r1, r3
 800d82c:	4610      	mov	r0, r2
 800d82e:	f002 f983 	bl	800fb38 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6818      	ldr	r0, [r3, #0]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	461a      	mov	r2, r3
 800d83c:	6839      	ldr	r1, [r7, #0]
 800d83e:	f002 f9d7 	bl	800fbf0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d842:	4b07      	ldr	r3, [pc, #28]	; (800d860 <HAL_SDRAM_Init+0x74>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a06      	ldr	r2, [pc, #24]	; (800d860 <HAL_SDRAM_Init+0x74>)
 800d848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d84c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2201      	movs	r2, #1
 800d852:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	52004000 	.word	0x52004000

0800d864 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800d86c:	bf00      	nop
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr

0800d878 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b086      	sub	sp, #24
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d88a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d88c:	7dfb      	ldrb	r3, [r7, #23]
 800d88e:	2b02      	cmp	r3, #2
 800d890:	d101      	bne.n	800d896 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d892:	2302      	movs	r3, #2
 800d894:	e021      	b.n	800d8da <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d896:	7dfb      	ldrb	r3, [r7, #23]
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d002      	beq.n	800d8a2 <HAL_SDRAM_SendCommand+0x2a>
 800d89c:	7dfb      	ldrb	r3, [r7, #23]
 800d89e:	2b05      	cmp	r3, #5
 800d8a0:	d118      	bne.n	800d8d4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2202      	movs	r2, #2
 800d8a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	68b9      	ldr	r1, [r7, #8]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f002 fa06 	bl	800fcc4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d104      	bne.n	800d8ca <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2205      	movs	r2, #5
 800d8c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d8c8:	e006      	b.n	800d8d8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d8d2:	e001      	b.n	800d8d8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	e000      	b.n	800d8da <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3718      	adds	r7, #24
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}

0800d8e2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d8e2:	b580      	push	{r7, lr}
 800d8e4:	b082      	sub	sp, #8
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
 800d8ea:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	2b02      	cmp	r3, #2
 800d8f6:	d101      	bne.n	800d8fc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d8f8:	2302      	movs	r3, #2
 800d8fa:	e016      	b.n	800d92a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b01      	cmp	r3, #1
 800d906:	d10f      	bne.n	800d928 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2202      	movs	r2, #2
 800d90c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	6839      	ldr	r1, [r7, #0]
 800d916:	4618      	mov	r0, r3
 800d918:	f002 f9f8 	bl	800fd0c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d924:	2300      	movs	r3, #0
 800d926:	e000      	b.n	800d92a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d928:	2301      	movs	r3, #1
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3708      	adds	r7, #8
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b082      	sub	sp, #8
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d101      	bne.n	800d944 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d940:	2301      	movs	r3, #1
 800d942:	e049      	b.n	800d9d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d106      	bne.n	800d95e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 f841 	bl	800d9e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2202      	movs	r2, #2
 800d962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	3304      	adds	r3, #4
 800d96e:	4619      	mov	r1, r3
 800d970:	4610      	mov	r0, r2
 800d972:	f000 fac7 	bl	800df04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2201      	movs	r2, #1
 800d97a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2201      	movs	r2, #1
 800d982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2201      	movs	r2, #1
 800d98a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2201      	movs	r2, #1
 800d992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2201      	movs	r2, #1
 800d99a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d9d6:	2300      	movs	r3, #0
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d9e8:	bf00      	nop
 800d9ea:	370c      	adds	r7, #12
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr

0800d9f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b085      	sub	sp, #20
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da02:	b2db      	uxtb	r3, r3
 800da04:	2b01      	cmp	r3, #1
 800da06:	d001      	beq.n	800da0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800da08:	2301      	movs	r3, #1
 800da0a:	e04c      	b.n	800daa6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2202      	movs	r2, #2
 800da10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a26      	ldr	r2, [pc, #152]	; (800dab4 <HAL_TIM_Base_Start+0xc0>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d022      	beq.n	800da64 <HAL_TIM_Base_Start+0x70>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da26:	d01d      	beq.n	800da64 <HAL_TIM_Base_Start+0x70>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a22      	ldr	r2, [pc, #136]	; (800dab8 <HAL_TIM_Base_Start+0xc4>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d018      	beq.n	800da64 <HAL_TIM_Base_Start+0x70>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4a21      	ldr	r2, [pc, #132]	; (800dabc <HAL_TIM_Base_Start+0xc8>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d013      	beq.n	800da64 <HAL_TIM_Base_Start+0x70>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a1f      	ldr	r2, [pc, #124]	; (800dac0 <HAL_TIM_Base_Start+0xcc>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d00e      	beq.n	800da64 <HAL_TIM_Base_Start+0x70>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a1e      	ldr	r2, [pc, #120]	; (800dac4 <HAL_TIM_Base_Start+0xd0>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d009      	beq.n	800da64 <HAL_TIM_Base_Start+0x70>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a1c      	ldr	r2, [pc, #112]	; (800dac8 <HAL_TIM_Base_Start+0xd4>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d004      	beq.n	800da64 <HAL_TIM_Base_Start+0x70>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a1b      	ldr	r2, [pc, #108]	; (800dacc <HAL_TIM_Base_Start+0xd8>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d115      	bne.n	800da90 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	689a      	ldr	r2, [r3, #8]
 800da6a:	4b19      	ldr	r3, [pc, #100]	; (800dad0 <HAL_TIM_Base_Start+0xdc>)
 800da6c:	4013      	ands	r3, r2
 800da6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2b06      	cmp	r3, #6
 800da74:	d015      	beq.n	800daa2 <HAL_TIM_Base_Start+0xae>
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da7c:	d011      	beq.n	800daa2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f042 0201 	orr.w	r2, r2, #1
 800da8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da8e:	e008      	b.n	800daa2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f042 0201 	orr.w	r2, r2, #1
 800da9e:	601a      	str	r2, [r3, #0]
 800daa0:	e000      	b.n	800daa4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800daa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800daa4:	2300      	movs	r3, #0
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	40010000 	.word	0x40010000
 800dab8:	40000400 	.word	0x40000400
 800dabc:	40000800 	.word	0x40000800
 800dac0:	40000c00 	.word	0x40000c00
 800dac4:	40010400 	.word	0x40010400
 800dac8:	40001800 	.word	0x40001800
 800dacc:	40014000 	.word	0x40014000
 800dad0:	00010007 	.word	0x00010007

0800dad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d101      	bne.n	800dae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dae2:	2301      	movs	r3, #1
 800dae4:	e049      	b.n	800db7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800daec:	b2db      	uxtb	r3, r3
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d106      	bne.n	800db00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f89d 	bl	800dc3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2202      	movs	r2, #2
 800db04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	3304      	adds	r3, #4
 800db10:	4619      	mov	r1, r3
 800db12:	4610      	mov	r0, r2
 800db14:	f000 f9f6 	bl	800df04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2201      	movs	r2, #1
 800db1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2201      	movs	r2, #1
 800db24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2201      	movs	r2, #1
 800db2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2201      	movs	r2, #1
 800db34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2201      	movs	r2, #1
 800db4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2201      	movs	r2, #1
 800db5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2201      	movs	r2, #1
 800db64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2201      	movs	r2, #1
 800db6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2201      	movs	r2, #1
 800db74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3708      	adds	r7, #8
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b082      	sub	sp, #8
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2202      	movs	r2, #2
 800db8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	6a1a      	ldr	r2, [r3, #32]
 800db98:	f241 1311 	movw	r3, #4369	; 0x1111
 800db9c:	4013      	ands	r3, r2
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d10f      	bne.n	800dbc2 <HAL_TIM_PWM_DeInit+0x40>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	6a1a      	ldr	r2, [r3, #32]
 800dba8:	f240 4344 	movw	r3, #1092	; 0x444
 800dbac:	4013      	ands	r3, r2
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d107      	bne.n	800dbc2 <HAL_TIM_PWM_DeInit+0x40>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f022 0201 	bic.w	r2, r2, #1
 800dbc0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 f843 	bl	800dc4e <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2200      	movs	r2, #0
 800dc24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc30:	2300      	movs	r3, #0
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dc3a:	b480      	push	{r7}
 800dc3c:	b083      	sub	sp, #12
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800dc42:	bf00      	nop
 800dc44:	370c      	adds	r7, #12
 800dc46:	46bd      	mov	sp, r7
 800dc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4c:	4770      	bx	lr

0800dc4e <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800dc4e:	b480      	push	{r7}
 800dc50:	b083      	sub	sp, #12
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800dc56:	bf00      	nop
 800dc58:	370c      	adds	r7, #12
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr

0800dc62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dc62:	b580      	push	{r7, lr}
 800dc64:	b082      	sub	sp, #8
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	691b      	ldr	r3, [r3, #16]
 800dc70:	f003 0302 	and.w	r3, r3, #2
 800dc74:	2b02      	cmp	r3, #2
 800dc76:	d122      	bne.n	800dcbe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	f003 0302 	and.w	r3, r3, #2
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	d11b      	bne.n	800dcbe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f06f 0202 	mvn.w	r2, #2
 800dc8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2201      	movs	r2, #1
 800dc94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	699b      	ldr	r3, [r3, #24]
 800dc9c:	f003 0303 	and.w	r3, r3, #3
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d003      	beq.n	800dcac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 f90f 	bl	800dec8 <HAL_TIM_IC_CaptureCallback>
 800dcaa:	e005      	b.n	800dcb8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 f901 	bl	800deb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 f912 	bl	800dedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	691b      	ldr	r3, [r3, #16]
 800dcc4:	f003 0304 	and.w	r3, r3, #4
 800dcc8:	2b04      	cmp	r3, #4
 800dcca:	d122      	bne.n	800dd12 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	f003 0304 	and.w	r3, r3, #4
 800dcd6:	2b04      	cmp	r3, #4
 800dcd8:	d11b      	bne.n	800dd12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f06f 0204 	mvn.w	r2, #4
 800dce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2202      	movs	r2, #2
 800dce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	699b      	ldr	r3, [r3, #24]
 800dcf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d003      	beq.n	800dd00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 f8e5 	bl	800dec8 <HAL_TIM_IC_CaptureCallback>
 800dcfe:	e005      	b.n	800dd0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 f8d7 	bl	800deb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 f8e8 	bl	800dedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	691b      	ldr	r3, [r3, #16]
 800dd18:	f003 0308 	and.w	r3, r3, #8
 800dd1c:	2b08      	cmp	r3, #8
 800dd1e:	d122      	bne.n	800dd66 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	f003 0308 	and.w	r3, r3, #8
 800dd2a:	2b08      	cmp	r3, #8
 800dd2c:	d11b      	bne.n	800dd66 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f06f 0208 	mvn.w	r2, #8
 800dd36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2204      	movs	r2, #4
 800dd3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	69db      	ldr	r3, [r3, #28]
 800dd44:	f003 0303 	and.w	r3, r3, #3
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d003      	beq.n	800dd54 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 f8bb 	bl	800dec8 <HAL_TIM_IC_CaptureCallback>
 800dd52:	e005      	b.n	800dd60 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 f8ad 	bl	800deb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 f8be 	bl	800dedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	691b      	ldr	r3, [r3, #16]
 800dd6c:	f003 0310 	and.w	r3, r3, #16
 800dd70:	2b10      	cmp	r3, #16
 800dd72:	d122      	bne.n	800ddba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	f003 0310 	and.w	r3, r3, #16
 800dd7e:	2b10      	cmp	r3, #16
 800dd80:	d11b      	bne.n	800ddba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f06f 0210 	mvn.w	r2, #16
 800dd8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2208      	movs	r2, #8
 800dd90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	69db      	ldr	r3, [r3, #28]
 800dd98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d003      	beq.n	800dda8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 f891 	bl	800dec8 <HAL_TIM_IC_CaptureCallback>
 800dda6:	e005      	b.n	800ddb4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 f883 	bl	800deb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 f894 	bl	800dedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	691b      	ldr	r3, [r3, #16]
 800ddc0:	f003 0301 	and.w	r3, r3, #1
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d10e      	bne.n	800dde6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	f003 0301 	and.w	r3, r3, #1
 800ddd2:	2b01      	cmp	r3, #1
 800ddd4:	d107      	bne.n	800dde6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f06f 0201 	mvn.w	r2, #1
 800ddde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 f85d 	bl	800dea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddf0:	2b80      	cmp	r3, #128	; 0x80
 800ddf2:	d10e      	bne.n	800de12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddfe:	2b80      	cmp	r3, #128	; 0x80
 800de00:	d107      	bne.n	800de12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800de0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 f91d 	bl	800e04c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	691b      	ldr	r3, [r3, #16]
 800de18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de20:	d10e      	bne.n	800de40 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	68db      	ldr	r3, [r3, #12]
 800de28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de2c:	2b80      	cmp	r3, #128	; 0x80
 800de2e:	d107      	bne.n	800de40 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800de38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 f910 	bl	800e060 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	691b      	ldr	r3, [r3, #16]
 800de46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de4a:	2b40      	cmp	r3, #64	; 0x40
 800de4c:	d10e      	bne.n	800de6c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de58:	2b40      	cmp	r3, #64	; 0x40
 800de5a:	d107      	bne.n	800de6c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800de64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 f842 	bl	800def0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	691b      	ldr	r3, [r3, #16]
 800de72:	f003 0320 	and.w	r3, r3, #32
 800de76:	2b20      	cmp	r3, #32
 800de78:	d10e      	bne.n	800de98 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	68db      	ldr	r3, [r3, #12]
 800de80:	f003 0320 	and.w	r3, r3, #32
 800de84:	2b20      	cmp	r3, #32
 800de86:	d107      	bne.n	800de98 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f06f 0220 	mvn.w	r2, #32
 800de90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 f8d0 	bl	800e038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800de98:	bf00      	nop
 800de9a:	3708      	adds	r7, #8
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b083      	sub	sp, #12
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800dea8:	bf00      	nop
 800deaa:	370c      	adds	r7, #12
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr

0800deb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800debc:	bf00      	nop
 800debe:	370c      	adds	r7, #12
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dec8:	b480      	push	{r7}
 800deca:	b083      	sub	sp, #12
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ded0:	bf00      	nop
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dedc:	b480      	push	{r7}
 800dede:	b083      	sub	sp, #12
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dee4:	bf00      	nop
 800dee6:	370c      	adds	r7, #12
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800def8:	bf00      	nop
 800defa:	370c      	adds	r7, #12
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800df04:	b480      	push	{r7}
 800df06:	b085      	sub	sp, #20
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	4a40      	ldr	r2, [pc, #256]	; (800e018 <TIM_Base_SetConfig+0x114>)
 800df18:	4293      	cmp	r3, r2
 800df1a:	d013      	beq.n	800df44 <TIM_Base_SetConfig+0x40>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df22:	d00f      	beq.n	800df44 <TIM_Base_SetConfig+0x40>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	4a3d      	ldr	r2, [pc, #244]	; (800e01c <TIM_Base_SetConfig+0x118>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d00b      	beq.n	800df44 <TIM_Base_SetConfig+0x40>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	4a3c      	ldr	r2, [pc, #240]	; (800e020 <TIM_Base_SetConfig+0x11c>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d007      	beq.n	800df44 <TIM_Base_SetConfig+0x40>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	4a3b      	ldr	r2, [pc, #236]	; (800e024 <TIM_Base_SetConfig+0x120>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d003      	beq.n	800df44 <TIM_Base_SetConfig+0x40>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	4a3a      	ldr	r2, [pc, #232]	; (800e028 <TIM_Base_SetConfig+0x124>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d108      	bne.n	800df56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	4313      	orrs	r3, r2
 800df54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	4a2f      	ldr	r2, [pc, #188]	; (800e018 <TIM_Base_SetConfig+0x114>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d01f      	beq.n	800df9e <TIM_Base_SetConfig+0x9a>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df64:	d01b      	beq.n	800df9e <TIM_Base_SetConfig+0x9a>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	4a2c      	ldr	r2, [pc, #176]	; (800e01c <TIM_Base_SetConfig+0x118>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d017      	beq.n	800df9e <TIM_Base_SetConfig+0x9a>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	4a2b      	ldr	r2, [pc, #172]	; (800e020 <TIM_Base_SetConfig+0x11c>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d013      	beq.n	800df9e <TIM_Base_SetConfig+0x9a>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	4a2a      	ldr	r2, [pc, #168]	; (800e024 <TIM_Base_SetConfig+0x120>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d00f      	beq.n	800df9e <TIM_Base_SetConfig+0x9a>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	4a29      	ldr	r2, [pc, #164]	; (800e028 <TIM_Base_SetConfig+0x124>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d00b      	beq.n	800df9e <TIM_Base_SetConfig+0x9a>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	4a28      	ldr	r2, [pc, #160]	; (800e02c <TIM_Base_SetConfig+0x128>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d007      	beq.n	800df9e <TIM_Base_SetConfig+0x9a>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	4a27      	ldr	r2, [pc, #156]	; (800e030 <TIM_Base_SetConfig+0x12c>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d003      	beq.n	800df9e <TIM_Base_SetConfig+0x9a>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	4a26      	ldr	r2, [pc, #152]	; (800e034 <TIM_Base_SetConfig+0x130>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d108      	bne.n	800dfb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dfa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	68fa      	ldr	r2, [r7, #12]
 800dfac:	4313      	orrs	r3, r2
 800dfae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	695b      	ldr	r3, [r3, #20]
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	689a      	ldr	r2, [r3, #8]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	4a10      	ldr	r2, [pc, #64]	; (800e018 <TIM_Base_SetConfig+0x114>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d00f      	beq.n	800dffc <TIM_Base_SetConfig+0xf8>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4a12      	ldr	r2, [pc, #72]	; (800e028 <TIM_Base_SetConfig+0x124>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d00b      	beq.n	800dffc <TIM_Base_SetConfig+0xf8>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	4a11      	ldr	r2, [pc, #68]	; (800e02c <TIM_Base_SetConfig+0x128>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d007      	beq.n	800dffc <TIM_Base_SetConfig+0xf8>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	4a10      	ldr	r2, [pc, #64]	; (800e030 <TIM_Base_SetConfig+0x12c>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d003      	beq.n	800dffc <TIM_Base_SetConfig+0xf8>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4a0f      	ldr	r2, [pc, #60]	; (800e034 <TIM_Base_SetConfig+0x130>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d103      	bne.n	800e004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	691a      	ldr	r2, [r3, #16]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2201      	movs	r2, #1
 800e008:	615a      	str	r2, [r3, #20]
}
 800e00a:	bf00      	nop
 800e00c:	3714      	adds	r7, #20
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr
 800e016:	bf00      	nop
 800e018:	40010000 	.word	0x40010000
 800e01c:	40000400 	.word	0x40000400
 800e020:	40000800 	.word	0x40000800
 800e024:	40000c00 	.word	0x40000c00
 800e028:	40010400 	.word	0x40010400
 800e02c:	40014000 	.word	0x40014000
 800e030:	40014400 	.word	0x40014400
 800e034:	40014800 	.word	0x40014800

0800e038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e040:	bf00      	nop
 800e042:	370c      	adds	r7, #12
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e054:	bf00      	nop
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e068:	bf00      	nop
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d101      	bne.n	800e086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e082:	2301      	movs	r3, #1
 800e084:	e042      	b.n	800e10c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d106      	bne.n	800e09e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2200      	movs	r2, #0
 800e094:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7f4 fffd 	bl	8003098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2224      	movs	r2, #36	; 0x24
 800e0a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f022 0201 	bic.w	r2, r2, #1
 800e0b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 fd5c 	bl	800eb74 <UART_SetConfig>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d101      	bne.n	800e0c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e022      	b.n	800e10c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d002      	beq.n	800e0d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f001 fab8 	bl	800f644 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	685a      	ldr	r2, [r3, #4]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e0e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	689a      	ldr	r2, [r3, #8]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e0f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f042 0201 	orr.w	r2, r2, #1
 800e102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f001 fb3f 	bl	800f788 <UART_CheckIdleState>
 800e10a:	4603      	mov	r3, r0
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b08a      	sub	sp, #40	; 0x28
 800e118:	af02      	add	r7, sp, #8
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	603b      	str	r3, [r7, #0]
 800e120:	4613      	mov	r3, r2
 800e122:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e12a:	2b20      	cmp	r3, #32
 800e12c:	d17b      	bne.n	800e226 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d002      	beq.n	800e13a <HAL_UART_Transmit+0x26>
 800e134:	88fb      	ldrh	r3, [r7, #6]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d101      	bne.n	800e13e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e13a:	2301      	movs	r3, #1
 800e13c:	e074      	b.n	800e228 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2200      	movs	r2, #0
 800e142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2221      	movs	r2, #33	; 0x21
 800e14a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e14e:	f7f8 f88b 	bl	8006268 <HAL_GetTick>
 800e152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	88fa      	ldrh	r2, [r7, #6]
 800e158:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	88fa      	ldrh	r2, [r7, #6]
 800e160:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e16c:	d108      	bne.n	800e180 <HAL_UART_Transmit+0x6c>
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	691b      	ldr	r3, [r3, #16]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d104      	bne.n	800e180 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e176:	2300      	movs	r3, #0
 800e178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	61bb      	str	r3, [r7, #24]
 800e17e:	e003      	b.n	800e188 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e184:	2300      	movs	r3, #0
 800e186:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e188:	e030      	b.n	800e1ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	2200      	movs	r2, #0
 800e192:	2180      	movs	r1, #128	; 0x80
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f001 fba1 	bl	800f8dc <UART_WaitOnFlagUntilTimeout>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d005      	beq.n	800e1ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2220      	movs	r2, #32
 800e1a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e1a8:	2303      	movs	r3, #3
 800e1aa:	e03d      	b.n	800e228 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d10b      	bne.n	800e1ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	881b      	ldrh	r3, [r3, #0]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e1c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e1c2:	69bb      	ldr	r3, [r7, #24]
 800e1c4:	3302      	adds	r3, #2
 800e1c6:	61bb      	str	r3, [r7, #24]
 800e1c8:	e007      	b.n	800e1da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	781a      	ldrb	r2, [r3, #0]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e1d4:	69fb      	ldr	r3, [r7, #28]
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	3b01      	subs	r3, #1
 800e1e4:	b29a      	uxth	r2, r3
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d1c8      	bne.n	800e18a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	9300      	str	r3, [sp, #0]
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	2200      	movs	r2, #0
 800e200:	2140      	movs	r1, #64	; 0x40
 800e202:	68f8      	ldr	r0, [r7, #12]
 800e204:	f001 fb6a 	bl	800f8dc <UART_WaitOnFlagUntilTimeout>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d005      	beq.n	800e21a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2220      	movs	r2, #32
 800e212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e216:	2303      	movs	r3, #3
 800e218:	e006      	b.n	800e228 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2220      	movs	r2, #32
 800e21e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e222:	2300      	movs	r3, #0
 800e224:	e000      	b.n	800e228 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e226:	2302      	movs	r3, #2
  }
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3720      	adds	r7, #32
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b08a      	sub	sp, #40	; 0x28
 800e234:	af02      	add	r7, sp, #8
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	603b      	str	r3, [r7, #0]
 800e23c:	4613      	mov	r3, r2
 800e23e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e246:	2b20      	cmp	r3, #32
 800e248:	f040 80b5 	bne.w	800e3b6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d002      	beq.n	800e258 <HAL_UART_Receive+0x28>
 800e252:	88fb      	ldrh	r3, [r7, #6]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d101      	bne.n	800e25c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e258:	2301      	movs	r3, #1
 800e25a:	e0ad      	b.n	800e3b8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2200      	movs	r2, #0
 800e260:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2222      	movs	r2, #34	; 0x22
 800e268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2200      	movs	r2, #0
 800e270:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e272:	f7f7 fff9 	bl	8006268 <HAL_GetTick>
 800e276:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	88fa      	ldrh	r2, [r7, #6]
 800e27c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	88fa      	ldrh	r2, [r7, #6]
 800e284:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e290:	d10e      	bne.n	800e2b0 <HAL_UART_Receive+0x80>
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	691b      	ldr	r3, [r3, #16]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d105      	bne.n	800e2a6 <HAL_UART_Receive+0x76>
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e2a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e2a4:	e02d      	b.n	800e302 <HAL_UART_Receive+0xd2>
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	22ff      	movs	r2, #255	; 0xff
 800e2aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e2ae:	e028      	b.n	800e302 <HAL_UART_Receive+0xd2>
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d10d      	bne.n	800e2d4 <HAL_UART_Receive+0xa4>
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	691b      	ldr	r3, [r3, #16]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d104      	bne.n	800e2ca <HAL_UART_Receive+0x9a>
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	22ff      	movs	r2, #255	; 0xff
 800e2c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e2c8:	e01b      	b.n	800e302 <HAL_UART_Receive+0xd2>
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	227f      	movs	r2, #127	; 0x7f
 800e2ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e2d2:	e016      	b.n	800e302 <HAL_UART_Receive+0xd2>
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	689b      	ldr	r3, [r3, #8]
 800e2d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e2dc:	d10d      	bne.n	800e2fa <HAL_UART_Receive+0xca>
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	691b      	ldr	r3, [r3, #16]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d104      	bne.n	800e2f0 <HAL_UART_Receive+0xc0>
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	227f      	movs	r2, #127	; 0x7f
 800e2ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e2ee:	e008      	b.n	800e302 <HAL_UART_Receive+0xd2>
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	223f      	movs	r2, #63	; 0x3f
 800e2f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e2f8:	e003      	b.n	800e302 <HAL_UART_Receive+0xd2>
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e308:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e312:	d108      	bne.n	800e326 <HAL_UART_Receive+0xf6>
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d104      	bne.n	800e326 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800e31c:	2300      	movs	r3, #0
 800e31e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	61bb      	str	r3, [r7, #24]
 800e324:	e003      	b.n	800e32e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e32a:	2300      	movs	r3, #0
 800e32c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e32e:	e036      	b.n	800e39e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	9300      	str	r3, [sp, #0]
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	2200      	movs	r2, #0
 800e338:	2120      	movs	r1, #32
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f001 face 	bl	800f8dc <UART_WaitOnFlagUntilTimeout>
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	d005      	beq.n	800e352 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2220      	movs	r2, #32
 800e34a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800e34e:	2303      	movs	r3, #3
 800e350:	e032      	b.n	800e3b8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800e352:	69fb      	ldr	r3, [r7, #28]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d10c      	bne.n	800e372 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e35e:	b29a      	uxth	r2, r3
 800e360:	8a7b      	ldrh	r3, [r7, #18]
 800e362:	4013      	ands	r3, r2
 800e364:	b29a      	uxth	r2, r3
 800e366:	69bb      	ldr	r3, [r7, #24]
 800e368:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	3302      	adds	r3, #2
 800e36e:	61bb      	str	r3, [r7, #24]
 800e370:	e00c      	b.n	800e38c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e378:	b2da      	uxtb	r2, r3
 800e37a:	8a7b      	ldrh	r3, [r7, #18]
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	4013      	ands	r3, r2
 800e380:	b2da      	uxtb	r2, r3
 800e382:	69fb      	ldr	r3, [r7, #28]
 800e384:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e386:	69fb      	ldr	r3, [r7, #28]
 800e388:	3301      	adds	r3, #1
 800e38a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e392:	b29b      	uxth	r3, r3
 800e394:	3b01      	subs	r3, #1
 800e396:	b29a      	uxth	r2, r3
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d1c2      	bne.n	800e330 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2220      	movs	r2, #32
 800e3ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	e000      	b.n	800e3b8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800e3b6:	2302      	movs	r3, #2
  }
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3720      	adds	r7, #32
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b0ba      	sub	sp, #232	; 0xe8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	69db      	ldr	r3, [r3, #28]
 800e3ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	689b      	ldr	r3, [r3, #8]
 800e3e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e3e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e3ea:	f640 030f 	movw	r3, #2063	; 0x80f
 800e3ee:	4013      	ands	r3, r2
 800e3f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e3f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d11b      	bne.n	800e434 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e400:	f003 0320 	and.w	r3, r3, #32
 800e404:	2b00      	cmp	r3, #0
 800e406:	d015      	beq.n	800e434 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e40c:	f003 0320 	and.w	r3, r3, #32
 800e410:	2b00      	cmp	r3, #0
 800e412:	d105      	bne.n	800e420 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d009      	beq.n	800e434 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e424:	2b00      	cmp	r3, #0
 800e426:	f000 8377 	beq.w	800eb18 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	4798      	blx	r3
      }
      return;
 800e432:	e371      	b.n	800eb18 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e434:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e438:	2b00      	cmp	r3, #0
 800e43a:	f000 8123 	beq.w	800e684 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e43e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e442:	4b8d      	ldr	r3, [pc, #564]	; (800e678 <HAL_UART_IRQHandler+0x2b8>)
 800e444:	4013      	ands	r3, r2
 800e446:	2b00      	cmp	r3, #0
 800e448:	d106      	bne.n	800e458 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e44a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e44e:	4b8b      	ldr	r3, [pc, #556]	; (800e67c <HAL_UART_IRQHandler+0x2bc>)
 800e450:	4013      	ands	r3, r2
 800e452:	2b00      	cmp	r3, #0
 800e454:	f000 8116 	beq.w	800e684 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e45c:	f003 0301 	and.w	r3, r3, #1
 800e460:	2b00      	cmp	r3, #0
 800e462:	d011      	beq.n	800e488 <HAL_UART_IRQHandler+0xc8>
 800e464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d00b      	beq.n	800e488 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	2201      	movs	r2, #1
 800e476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e47e:	f043 0201 	orr.w	r2, r3, #1
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e48c:	f003 0302 	and.w	r3, r3, #2
 800e490:	2b00      	cmp	r3, #0
 800e492:	d011      	beq.n	800e4b8 <HAL_UART_IRQHandler+0xf8>
 800e494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e498:	f003 0301 	and.w	r3, r3, #1
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d00b      	beq.n	800e4b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2202      	movs	r2, #2
 800e4a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4ae:	f043 0204 	orr.w	r2, r3, #4
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4bc:	f003 0304 	and.w	r3, r3, #4
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d011      	beq.n	800e4e8 <HAL_UART_IRQHandler+0x128>
 800e4c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4c8:	f003 0301 	and.w	r3, r3, #1
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00b      	beq.n	800e4e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2204      	movs	r2, #4
 800e4d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4de:	f043 0202 	orr.w	r2, r3, #2
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4ec:	f003 0308 	and.w	r3, r3, #8
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d017      	beq.n	800e524 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4f8:	f003 0320 	and.w	r3, r3, #32
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d105      	bne.n	800e50c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e500:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e504:	4b5c      	ldr	r3, [pc, #368]	; (800e678 <HAL_UART_IRQHandler+0x2b8>)
 800e506:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d00b      	beq.n	800e524 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2208      	movs	r2, #8
 800e512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e51a:	f043 0208 	orr.w	r2, r3, #8
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d012      	beq.n	800e556 <HAL_UART_IRQHandler+0x196>
 800e530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e534:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d00c      	beq.n	800e556 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e544:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e54c:	f043 0220 	orr.w	r2, r3, #32
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f000 82dd 	beq.w	800eb1c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e566:	f003 0320 	and.w	r3, r3, #32
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d013      	beq.n	800e596 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e56e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e572:	f003 0320 	and.w	r3, r3, #32
 800e576:	2b00      	cmp	r3, #0
 800e578:	d105      	bne.n	800e586 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e57a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e57e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e582:	2b00      	cmp	r3, #0
 800e584:	d007      	beq.n	800e596 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d003      	beq.n	800e596 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e59c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	689b      	ldr	r3, [r3, #8]
 800e5a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5aa:	2b40      	cmp	r3, #64	; 0x40
 800e5ac:	d005      	beq.n	800e5ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e5ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e5b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d054      	beq.n	800e664 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f001 f9f6 	bl	800f9ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	689b      	ldr	r3, [r3, #8]
 800e5c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5ca:	2b40      	cmp	r3, #64	; 0x40
 800e5cc:	d146      	bne.n	800e65c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	3308      	adds	r3, #8
 800e5d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e5dc:	e853 3f00 	ldrex	r3, [r3]
 800e5e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e5e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e5e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	3308      	adds	r3, #8
 800e5f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e5fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e5fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e60a:	e841 2300 	strex	r3, r2, [r1]
 800e60e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e616:	2b00      	cmp	r3, #0
 800e618:	d1d9      	bne.n	800e5ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e620:	2b00      	cmp	r3, #0
 800e622:	d017      	beq.n	800e654 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e62a:	4a15      	ldr	r2, [pc, #84]	; (800e680 <HAL_UART_IRQHandler+0x2c0>)
 800e62c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e634:	4618      	mov	r0, r3
 800e636:	f7f8 fc79 	bl	8006f2c <HAL_DMA_Abort_IT>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d019      	beq.n	800e674 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e64e:	4610      	mov	r0, r2
 800e650:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e652:	e00f      	b.n	800e674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f000 fa77 	bl	800eb48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e65a:	e00b      	b.n	800e674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f000 fa73 	bl	800eb48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e662:	e007      	b.n	800e674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f000 fa6f 	bl	800eb48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2200      	movs	r2, #0
 800e66e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e672:	e253      	b.n	800eb1c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e674:	bf00      	nop
    return;
 800e676:	e251      	b.n	800eb1c <HAL_UART_IRQHandler+0x75c>
 800e678:	10000001 	.word	0x10000001
 800e67c:	04000120 	.word	0x04000120
 800e680:	0800fa79 	.word	0x0800fa79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e688:	2b01      	cmp	r3, #1
 800e68a:	f040 81e7 	bne.w	800ea5c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e692:	f003 0310 	and.w	r3, r3, #16
 800e696:	2b00      	cmp	r3, #0
 800e698:	f000 81e0 	beq.w	800ea5c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6a0:	f003 0310 	and.w	r3, r3, #16
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f000 81d9 	beq.w	800ea5c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	2210      	movs	r2, #16
 800e6b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	689b      	ldr	r3, [r3, #8]
 800e6b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6bc:	2b40      	cmp	r3, #64	; 0x40
 800e6be:	f040 8151 	bne.w	800e964 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4a96      	ldr	r2, [pc, #600]	; (800e924 <HAL_UART_IRQHandler+0x564>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d068      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4a93      	ldr	r2, [pc, #588]	; (800e928 <HAL_UART_IRQHandler+0x568>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d061      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	4a91      	ldr	r2, [pc, #580]	; (800e92c <HAL_UART_IRQHandler+0x56c>)
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	d05a      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a8e      	ldr	r2, [pc, #568]	; (800e930 <HAL_UART_IRQHandler+0x570>)
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d053      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4a8c      	ldr	r2, [pc, #560]	; (800e934 <HAL_UART_IRQHandler+0x574>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d04c      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a89      	ldr	r2, [pc, #548]	; (800e938 <HAL_UART_IRQHandler+0x578>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d045      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4a87      	ldr	r2, [pc, #540]	; (800e93c <HAL_UART_IRQHandler+0x57c>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d03e      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4a84      	ldr	r2, [pc, #528]	; (800e940 <HAL_UART_IRQHandler+0x580>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d037      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4a82      	ldr	r2, [pc, #520]	; (800e944 <HAL_UART_IRQHandler+0x584>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d030      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a7f      	ldr	r2, [pc, #508]	; (800e948 <HAL_UART_IRQHandler+0x588>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d029      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	4a7d      	ldr	r2, [pc, #500]	; (800e94c <HAL_UART_IRQHandler+0x58c>)
 800e758:	4293      	cmp	r3, r2
 800e75a:	d022      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a7a      	ldr	r2, [pc, #488]	; (800e950 <HAL_UART_IRQHandler+0x590>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d01b      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	4a78      	ldr	r2, [pc, #480]	; (800e954 <HAL_UART_IRQHandler+0x594>)
 800e774:	4293      	cmp	r3, r2
 800e776:	d014      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4a75      	ldr	r2, [pc, #468]	; (800e958 <HAL_UART_IRQHandler+0x598>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d00d      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4a73      	ldr	r2, [pc, #460]	; (800e95c <HAL_UART_IRQHandler+0x59c>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d006      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x3e2>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a70      	ldr	r2, [pc, #448]	; (800e960 <HAL_UART_IRQHandler+0x5a0>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d106      	bne.n	800e7b0 <HAL_UART_IRQHandler+0x3f0>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	e005      	b.n	800e7bc <HAL_UART_IRQHandler+0x3fc>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e7c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	f000 81ab 	beq.w	800eb20 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e7d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	f080 81a3 	bcs.w	800eb20 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e7e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7ea:	69db      	ldr	r3, [r3, #28]
 800e7ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7f0:	f000 8087 	beq.w	800e902 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e800:	e853 3f00 	ldrex	r3, [r3]
 800e804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e80c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	461a      	mov	r2, r3
 800e81a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e81e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e822:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e826:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e82a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e82e:	e841 2300 	strex	r3, r2, [r1]
 800e832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1da      	bne.n	800e7f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	3308      	adds	r3, #8
 800e844:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e848:	e853 3f00 	ldrex	r3, [r3]
 800e84c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e84e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e850:	f023 0301 	bic.w	r3, r3, #1
 800e854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	3308      	adds	r3, #8
 800e85e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e862:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e866:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e868:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e86a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e86e:	e841 2300 	strex	r3, r2, [r1]
 800e872:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e876:	2b00      	cmp	r3, #0
 800e878:	d1e1      	bne.n	800e83e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	3308      	adds	r3, #8
 800e880:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e884:	e853 3f00 	ldrex	r3, [r3]
 800e888:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e88a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e88c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	3308      	adds	r3, #8
 800e89a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e89e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e8a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e8a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e8a6:	e841 2300 	strex	r3, r2, [r1]
 800e8aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e8ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d1e3      	bne.n	800e87a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2220      	movs	r2, #32
 800e8b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8c8:	e853 3f00 	ldrex	r3, [r3]
 800e8cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e8ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8d0:	f023 0310 	bic.w	r3, r3, #16
 800e8d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	461a      	mov	r2, r3
 800e8de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e8e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800e8e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8ea:	e841 2300 	strex	r3, r2, [r1]
 800e8ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d1e4      	bne.n	800e8c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7f7 fff7 	bl	80068f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2202      	movs	r2, #2
 800e906:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e914:	b29b      	uxth	r3, r3
 800e916:	1ad3      	subs	r3, r2, r3
 800e918:	b29b      	uxth	r3, r3
 800e91a:	4619      	mov	r1, r3
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 f91d 	bl	800eb5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e922:	e0fd      	b.n	800eb20 <HAL_UART_IRQHandler+0x760>
 800e924:	40020010 	.word	0x40020010
 800e928:	40020028 	.word	0x40020028
 800e92c:	40020040 	.word	0x40020040
 800e930:	40020058 	.word	0x40020058
 800e934:	40020070 	.word	0x40020070
 800e938:	40020088 	.word	0x40020088
 800e93c:	400200a0 	.word	0x400200a0
 800e940:	400200b8 	.word	0x400200b8
 800e944:	40020410 	.word	0x40020410
 800e948:	40020428 	.word	0x40020428
 800e94c:	40020440 	.word	0x40020440
 800e950:	40020458 	.word	0x40020458
 800e954:	40020470 	.word	0x40020470
 800e958:	40020488 	.word	0x40020488
 800e95c:	400204a0 	.word	0x400204a0
 800e960:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e970:	b29b      	uxth	r3, r3
 800e972:	1ad3      	subs	r3, r2, r3
 800e974:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e97e:	b29b      	uxth	r3, r3
 800e980:	2b00      	cmp	r3, #0
 800e982:	f000 80cf 	beq.w	800eb24 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e986:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	f000 80ca 	beq.w	800eb24 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e998:	e853 3f00 	ldrex	r3, [r3]
 800e99c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e9a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e9b2:	647b      	str	r3, [r7, #68]	; 0x44
 800e9b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9ba:	e841 2300 	strex	r3, r2, [r1]
 800e9be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1e4      	bne.n	800e990 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	3308      	adds	r3, #8
 800e9cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d0:	e853 3f00 	ldrex	r3, [r3]
 800e9d4:	623b      	str	r3, [r7, #32]
   return(result);
 800e9d6:	6a3a      	ldr	r2, [r7, #32]
 800e9d8:	4b55      	ldr	r3, [pc, #340]	; (800eb30 <HAL_UART_IRQHandler+0x770>)
 800e9da:	4013      	ands	r3, r2
 800e9dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	3308      	adds	r3, #8
 800e9e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e9ea:	633a      	str	r2, [r7, #48]	; 0x30
 800e9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9f2:	e841 2300 	strex	r3, r2, [r1]
 800e9f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d1e3      	bne.n	800e9c6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2220      	movs	r2, #32
 800ea02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	e853 3f00 	ldrex	r3, [r3]
 800ea1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f023 0310 	bic.w	r3, r3, #16
 800ea26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	461a      	mov	r2, r3
 800ea30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ea34:	61fb      	str	r3, [r7, #28]
 800ea36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea38:	69b9      	ldr	r1, [r7, #24]
 800ea3a:	69fa      	ldr	r2, [r7, #28]
 800ea3c:	e841 2300 	strex	r3, r2, [r1]
 800ea40:	617b      	str	r3, [r7, #20]
   return(result);
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d1e4      	bne.n	800ea12 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2202      	movs	r2, #2
 800ea4c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ea4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ea52:	4619      	mov	r1, r3
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f000 f881 	bl	800eb5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea5a:	e063      	b.n	800eb24 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ea5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d00e      	beq.n	800ea86 <HAL_UART_IRQHandler+0x6c6>
 800ea68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d008      	beq.n	800ea86 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ea7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f001 f83b 	bl	800fafa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ea84:	e051      	b.n	800eb2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ea86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d014      	beq.n	800eabc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ea92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d105      	bne.n	800eaaa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ea9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eaa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d008      	beq.n	800eabc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d03a      	beq.n	800eb28 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	4798      	blx	r3
    }
    return;
 800eaba:	e035      	b.n	800eb28 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d009      	beq.n	800eadc <HAL_UART_IRQHandler+0x71c>
 800eac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eacc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d003      	beq.n	800eadc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 ffe5 	bl	800faa4 <UART_EndTransmit_IT>
    return;
 800eada:	e026      	b.n	800eb2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800eadc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d009      	beq.n	800eafc <HAL_UART_IRQHandler+0x73c>
 800eae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eaec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d003      	beq.n	800eafc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f001 f814 	bl	800fb22 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eafa:	e016      	b.n	800eb2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800eafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d010      	beq.n	800eb2a <HAL_UART_IRQHandler+0x76a>
 800eb08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	da0c      	bge.n	800eb2a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 fffc 	bl	800fb0e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb16:	e008      	b.n	800eb2a <HAL_UART_IRQHandler+0x76a>
      return;
 800eb18:	bf00      	nop
 800eb1a:	e006      	b.n	800eb2a <HAL_UART_IRQHandler+0x76a>
    return;
 800eb1c:	bf00      	nop
 800eb1e:	e004      	b.n	800eb2a <HAL_UART_IRQHandler+0x76a>
      return;
 800eb20:	bf00      	nop
 800eb22:	e002      	b.n	800eb2a <HAL_UART_IRQHandler+0x76a>
      return;
 800eb24:	bf00      	nop
 800eb26:	e000      	b.n	800eb2a <HAL_UART_IRQHandler+0x76a>
    return;
 800eb28:	bf00      	nop
  }
}
 800eb2a:	37e8      	adds	r7, #232	; 0xe8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	effffffe 	.word	0xeffffffe

0800eb34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800eb3c:	bf00      	nop
 800eb3e:	370c      	adds	r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr

0800eb48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800eb50:	bf00      	nop
 800eb52:	370c      	adds	r7, #12
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	460b      	mov	r3, r1
 800eb66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800eb68:	bf00      	nop
 800eb6a:	370c      	adds	r7, #12
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr

0800eb74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eb74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eb78:	b092      	sub	sp, #72	; 0x48
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	689a      	ldr	r2, [r3, #8]
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	431a      	orrs	r2, r3
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	695b      	ldr	r3, [r3, #20]
 800eb92:	431a      	orrs	r2, r3
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	69db      	ldr	r3, [r3, #28]
 800eb98:	4313      	orrs	r3, r2
 800eb9a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	4bbe      	ldr	r3, [pc, #760]	; (800ee9c <UART_SetConfig+0x328>)
 800eba4:	4013      	ands	r3, r2
 800eba6:	697a      	ldr	r2, [r7, #20]
 800eba8:	6812      	ldr	r2, [r2, #0]
 800ebaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebac:	430b      	orrs	r3, r1
 800ebae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	68da      	ldr	r2, [r3, #12]
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	430a      	orrs	r2, r1
 800ebc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	699b      	ldr	r3, [r3, #24]
 800ebca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4ab3      	ldr	r2, [pc, #716]	; (800eea0 <UART_SetConfig+0x32c>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d004      	beq.n	800ebe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	6a1b      	ldr	r3, [r3, #32]
 800ebda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	689a      	ldr	r2, [r3, #8]
 800ebe6:	4baf      	ldr	r3, [pc, #700]	; (800eea4 <UART_SetConfig+0x330>)
 800ebe8:	4013      	ands	r3, r2
 800ebea:	697a      	ldr	r2, [r7, #20]
 800ebec:	6812      	ldr	r2, [r2, #0]
 800ebee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebf0:	430b      	orrs	r3, r1
 800ebf2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfa:	f023 010f 	bic.w	r1, r3, #15
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	430a      	orrs	r2, r1
 800ec08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	4aa6      	ldr	r2, [pc, #664]	; (800eea8 <UART_SetConfig+0x334>)
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d177      	bne.n	800ed04 <UART_SetConfig+0x190>
 800ec14:	4ba5      	ldr	r3, [pc, #660]	; (800eeac <UART_SetConfig+0x338>)
 800ec16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec1c:	2b28      	cmp	r3, #40	; 0x28
 800ec1e:	d86d      	bhi.n	800ecfc <UART_SetConfig+0x188>
 800ec20:	a201      	add	r2, pc, #4	; (adr r2, 800ec28 <UART_SetConfig+0xb4>)
 800ec22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec26:	bf00      	nop
 800ec28:	0800eccd 	.word	0x0800eccd
 800ec2c:	0800ecfd 	.word	0x0800ecfd
 800ec30:	0800ecfd 	.word	0x0800ecfd
 800ec34:	0800ecfd 	.word	0x0800ecfd
 800ec38:	0800ecfd 	.word	0x0800ecfd
 800ec3c:	0800ecfd 	.word	0x0800ecfd
 800ec40:	0800ecfd 	.word	0x0800ecfd
 800ec44:	0800ecfd 	.word	0x0800ecfd
 800ec48:	0800ecd5 	.word	0x0800ecd5
 800ec4c:	0800ecfd 	.word	0x0800ecfd
 800ec50:	0800ecfd 	.word	0x0800ecfd
 800ec54:	0800ecfd 	.word	0x0800ecfd
 800ec58:	0800ecfd 	.word	0x0800ecfd
 800ec5c:	0800ecfd 	.word	0x0800ecfd
 800ec60:	0800ecfd 	.word	0x0800ecfd
 800ec64:	0800ecfd 	.word	0x0800ecfd
 800ec68:	0800ecdd 	.word	0x0800ecdd
 800ec6c:	0800ecfd 	.word	0x0800ecfd
 800ec70:	0800ecfd 	.word	0x0800ecfd
 800ec74:	0800ecfd 	.word	0x0800ecfd
 800ec78:	0800ecfd 	.word	0x0800ecfd
 800ec7c:	0800ecfd 	.word	0x0800ecfd
 800ec80:	0800ecfd 	.word	0x0800ecfd
 800ec84:	0800ecfd 	.word	0x0800ecfd
 800ec88:	0800ece5 	.word	0x0800ece5
 800ec8c:	0800ecfd 	.word	0x0800ecfd
 800ec90:	0800ecfd 	.word	0x0800ecfd
 800ec94:	0800ecfd 	.word	0x0800ecfd
 800ec98:	0800ecfd 	.word	0x0800ecfd
 800ec9c:	0800ecfd 	.word	0x0800ecfd
 800eca0:	0800ecfd 	.word	0x0800ecfd
 800eca4:	0800ecfd 	.word	0x0800ecfd
 800eca8:	0800eced 	.word	0x0800eced
 800ecac:	0800ecfd 	.word	0x0800ecfd
 800ecb0:	0800ecfd 	.word	0x0800ecfd
 800ecb4:	0800ecfd 	.word	0x0800ecfd
 800ecb8:	0800ecfd 	.word	0x0800ecfd
 800ecbc:	0800ecfd 	.word	0x0800ecfd
 800ecc0:	0800ecfd 	.word	0x0800ecfd
 800ecc4:	0800ecfd 	.word	0x0800ecfd
 800ecc8:	0800ecf5 	.word	0x0800ecf5
 800eccc:	2301      	movs	r3, #1
 800ecce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecd2:	e222      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ecd4:	2304      	movs	r3, #4
 800ecd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecda:	e21e      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ecdc:	2308      	movs	r3, #8
 800ecde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ece2:	e21a      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ece4:	2310      	movs	r3, #16
 800ece6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecea:	e216      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ecec:	2320      	movs	r3, #32
 800ecee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecf2:	e212      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ecf4:	2340      	movs	r3, #64	; 0x40
 800ecf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecfa:	e20e      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ecfc:	2380      	movs	r3, #128	; 0x80
 800ecfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed02:	e20a      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4a69      	ldr	r2, [pc, #420]	; (800eeb0 <UART_SetConfig+0x33c>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d130      	bne.n	800ed70 <UART_SetConfig+0x1fc>
 800ed0e:	4b67      	ldr	r3, [pc, #412]	; (800eeac <UART_SetConfig+0x338>)
 800ed10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed12:	f003 0307 	and.w	r3, r3, #7
 800ed16:	2b05      	cmp	r3, #5
 800ed18:	d826      	bhi.n	800ed68 <UART_SetConfig+0x1f4>
 800ed1a:	a201      	add	r2, pc, #4	; (adr r2, 800ed20 <UART_SetConfig+0x1ac>)
 800ed1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed20:	0800ed39 	.word	0x0800ed39
 800ed24:	0800ed41 	.word	0x0800ed41
 800ed28:	0800ed49 	.word	0x0800ed49
 800ed2c:	0800ed51 	.word	0x0800ed51
 800ed30:	0800ed59 	.word	0x0800ed59
 800ed34:	0800ed61 	.word	0x0800ed61
 800ed38:	2300      	movs	r3, #0
 800ed3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed3e:	e1ec      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ed40:	2304      	movs	r3, #4
 800ed42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed46:	e1e8      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ed48:	2308      	movs	r3, #8
 800ed4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed4e:	e1e4      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ed50:	2310      	movs	r3, #16
 800ed52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed56:	e1e0      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ed58:	2320      	movs	r3, #32
 800ed5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed5e:	e1dc      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ed60:	2340      	movs	r3, #64	; 0x40
 800ed62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed66:	e1d8      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ed68:	2380      	movs	r3, #128	; 0x80
 800ed6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed6e:	e1d4      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4a4f      	ldr	r2, [pc, #316]	; (800eeb4 <UART_SetConfig+0x340>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d130      	bne.n	800eddc <UART_SetConfig+0x268>
 800ed7a:	4b4c      	ldr	r3, [pc, #304]	; (800eeac <UART_SetConfig+0x338>)
 800ed7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed7e:	f003 0307 	and.w	r3, r3, #7
 800ed82:	2b05      	cmp	r3, #5
 800ed84:	d826      	bhi.n	800edd4 <UART_SetConfig+0x260>
 800ed86:	a201      	add	r2, pc, #4	; (adr r2, 800ed8c <UART_SetConfig+0x218>)
 800ed88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed8c:	0800eda5 	.word	0x0800eda5
 800ed90:	0800edad 	.word	0x0800edad
 800ed94:	0800edb5 	.word	0x0800edb5
 800ed98:	0800edbd 	.word	0x0800edbd
 800ed9c:	0800edc5 	.word	0x0800edc5
 800eda0:	0800edcd 	.word	0x0800edcd
 800eda4:	2300      	movs	r3, #0
 800eda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edaa:	e1b6      	b.n	800f11a <UART_SetConfig+0x5a6>
 800edac:	2304      	movs	r3, #4
 800edae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edb2:	e1b2      	b.n	800f11a <UART_SetConfig+0x5a6>
 800edb4:	2308      	movs	r3, #8
 800edb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edba:	e1ae      	b.n	800f11a <UART_SetConfig+0x5a6>
 800edbc:	2310      	movs	r3, #16
 800edbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edc2:	e1aa      	b.n	800f11a <UART_SetConfig+0x5a6>
 800edc4:	2320      	movs	r3, #32
 800edc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edca:	e1a6      	b.n	800f11a <UART_SetConfig+0x5a6>
 800edcc:	2340      	movs	r3, #64	; 0x40
 800edce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edd2:	e1a2      	b.n	800f11a <UART_SetConfig+0x5a6>
 800edd4:	2380      	movs	r3, #128	; 0x80
 800edd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edda:	e19e      	b.n	800f11a <UART_SetConfig+0x5a6>
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4a35      	ldr	r2, [pc, #212]	; (800eeb8 <UART_SetConfig+0x344>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d130      	bne.n	800ee48 <UART_SetConfig+0x2d4>
 800ede6:	4b31      	ldr	r3, [pc, #196]	; (800eeac <UART_SetConfig+0x338>)
 800ede8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edea:	f003 0307 	and.w	r3, r3, #7
 800edee:	2b05      	cmp	r3, #5
 800edf0:	d826      	bhi.n	800ee40 <UART_SetConfig+0x2cc>
 800edf2:	a201      	add	r2, pc, #4	; (adr r2, 800edf8 <UART_SetConfig+0x284>)
 800edf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edf8:	0800ee11 	.word	0x0800ee11
 800edfc:	0800ee19 	.word	0x0800ee19
 800ee00:	0800ee21 	.word	0x0800ee21
 800ee04:	0800ee29 	.word	0x0800ee29
 800ee08:	0800ee31 	.word	0x0800ee31
 800ee0c:	0800ee39 	.word	0x0800ee39
 800ee10:	2300      	movs	r3, #0
 800ee12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee16:	e180      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ee18:	2304      	movs	r3, #4
 800ee1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee1e:	e17c      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ee20:	2308      	movs	r3, #8
 800ee22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee26:	e178      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ee28:	2310      	movs	r3, #16
 800ee2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee2e:	e174      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ee30:	2320      	movs	r3, #32
 800ee32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee36:	e170      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ee38:	2340      	movs	r3, #64	; 0x40
 800ee3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee3e:	e16c      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ee40:	2380      	movs	r3, #128	; 0x80
 800ee42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee46:	e168      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4a1b      	ldr	r2, [pc, #108]	; (800eebc <UART_SetConfig+0x348>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d142      	bne.n	800eed8 <UART_SetConfig+0x364>
 800ee52:	4b16      	ldr	r3, [pc, #88]	; (800eeac <UART_SetConfig+0x338>)
 800ee54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee56:	f003 0307 	and.w	r3, r3, #7
 800ee5a:	2b05      	cmp	r3, #5
 800ee5c:	d838      	bhi.n	800eed0 <UART_SetConfig+0x35c>
 800ee5e:	a201      	add	r2, pc, #4	; (adr r2, 800ee64 <UART_SetConfig+0x2f0>)
 800ee60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee64:	0800ee7d 	.word	0x0800ee7d
 800ee68:	0800ee85 	.word	0x0800ee85
 800ee6c:	0800ee8d 	.word	0x0800ee8d
 800ee70:	0800ee95 	.word	0x0800ee95
 800ee74:	0800eec1 	.word	0x0800eec1
 800ee78:	0800eec9 	.word	0x0800eec9
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee82:	e14a      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ee84:	2304      	movs	r3, #4
 800ee86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee8a:	e146      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ee8c:	2308      	movs	r3, #8
 800ee8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee92:	e142      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ee94:	2310      	movs	r3, #16
 800ee96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee9a:	e13e      	b.n	800f11a <UART_SetConfig+0x5a6>
 800ee9c:	cfff69f3 	.word	0xcfff69f3
 800eea0:	58000c00 	.word	0x58000c00
 800eea4:	11fff4ff 	.word	0x11fff4ff
 800eea8:	40011000 	.word	0x40011000
 800eeac:	58024400 	.word	0x58024400
 800eeb0:	40004400 	.word	0x40004400
 800eeb4:	40004800 	.word	0x40004800
 800eeb8:	40004c00 	.word	0x40004c00
 800eebc:	40005000 	.word	0x40005000
 800eec0:	2320      	movs	r3, #32
 800eec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eec6:	e128      	b.n	800f11a <UART_SetConfig+0x5a6>
 800eec8:	2340      	movs	r3, #64	; 0x40
 800eeca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eece:	e124      	b.n	800f11a <UART_SetConfig+0x5a6>
 800eed0:	2380      	movs	r3, #128	; 0x80
 800eed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eed6:	e120      	b.n	800f11a <UART_SetConfig+0x5a6>
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4acb      	ldr	r2, [pc, #812]	; (800f20c <UART_SetConfig+0x698>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d176      	bne.n	800efd0 <UART_SetConfig+0x45c>
 800eee2:	4bcb      	ldr	r3, [pc, #812]	; (800f210 <UART_SetConfig+0x69c>)
 800eee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eeea:	2b28      	cmp	r3, #40	; 0x28
 800eeec:	d86c      	bhi.n	800efc8 <UART_SetConfig+0x454>
 800eeee:	a201      	add	r2, pc, #4	; (adr r2, 800eef4 <UART_SetConfig+0x380>)
 800eef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef4:	0800ef99 	.word	0x0800ef99
 800eef8:	0800efc9 	.word	0x0800efc9
 800eefc:	0800efc9 	.word	0x0800efc9
 800ef00:	0800efc9 	.word	0x0800efc9
 800ef04:	0800efc9 	.word	0x0800efc9
 800ef08:	0800efc9 	.word	0x0800efc9
 800ef0c:	0800efc9 	.word	0x0800efc9
 800ef10:	0800efc9 	.word	0x0800efc9
 800ef14:	0800efa1 	.word	0x0800efa1
 800ef18:	0800efc9 	.word	0x0800efc9
 800ef1c:	0800efc9 	.word	0x0800efc9
 800ef20:	0800efc9 	.word	0x0800efc9
 800ef24:	0800efc9 	.word	0x0800efc9
 800ef28:	0800efc9 	.word	0x0800efc9
 800ef2c:	0800efc9 	.word	0x0800efc9
 800ef30:	0800efc9 	.word	0x0800efc9
 800ef34:	0800efa9 	.word	0x0800efa9
 800ef38:	0800efc9 	.word	0x0800efc9
 800ef3c:	0800efc9 	.word	0x0800efc9
 800ef40:	0800efc9 	.word	0x0800efc9
 800ef44:	0800efc9 	.word	0x0800efc9
 800ef48:	0800efc9 	.word	0x0800efc9
 800ef4c:	0800efc9 	.word	0x0800efc9
 800ef50:	0800efc9 	.word	0x0800efc9
 800ef54:	0800efb1 	.word	0x0800efb1
 800ef58:	0800efc9 	.word	0x0800efc9
 800ef5c:	0800efc9 	.word	0x0800efc9
 800ef60:	0800efc9 	.word	0x0800efc9
 800ef64:	0800efc9 	.word	0x0800efc9
 800ef68:	0800efc9 	.word	0x0800efc9
 800ef6c:	0800efc9 	.word	0x0800efc9
 800ef70:	0800efc9 	.word	0x0800efc9
 800ef74:	0800efb9 	.word	0x0800efb9
 800ef78:	0800efc9 	.word	0x0800efc9
 800ef7c:	0800efc9 	.word	0x0800efc9
 800ef80:	0800efc9 	.word	0x0800efc9
 800ef84:	0800efc9 	.word	0x0800efc9
 800ef88:	0800efc9 	.word	0x0800efc9
 800ef8c:	0800efc9 	.word	0x0800efc9
 800ef90:	0800efc9 	.word	0x0800efc9
 800ef94:	0800efc1 	.word	0x0800efc1
 800ef98:	2301      	movs	r3, #1
 800ef9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef9e:	e0bc      	b.n	800f11a <UART_SetConfig+0x5a6>
 800efa0:	2304      	movs	r3, #4
 800efa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efa6:	e0b8      	b.n	800f11a <UART_SetConfig+0x5a6>
 800efa8:	2308      	movs	r3, #8
 800efaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efae:	e0b4      	b.n	800f11a <UART_SetConfig+0x5a6>
 800efb0:	2310      	movs	r3, #16
 800efb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efb6:	e0b0      	b.n	800f11a <UART_SetConfig+0x5a6>
 800efb8:	2320      	movs	r3, #32
 800efba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efbe:	e0ac      	b.n	800f11a <UART_SetConfig+0x5a6>
 800efc0:	2340      	movs	r3, #64	; 0x40
 800efc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efc6:	e0a8      	b.n	800f11a <UART_SetConfig+0x5a6>
 800efc8:	2380      	movs	r3, #128	; 0x80
 800efca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efce:	e0a4      	b.n	800f11a <UART_SetConfig+0x5a6>
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4a8f      	ldr	r2, [pc, #572]	; (800f214 <UART_SetConfig+0x6a0>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d130      	bne.n	800f03c <UART_SetConfig+0x4c8>
 800efda:	4b8d      	ldr	r3, [pc, #564]	; (800f210 <UART_SetConfig+0x69c>)
 800efdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efde:	f003 0307 	and.w	r3, r3, #7
 800efe2:	2b05      	cmp	r3, #5
 800efe4:	d826      	bhi.n	800f034 <UART_SetConfig+0x4c0>
 800efe6:	a201      	add	r2, pc, #4	; (adr r2, 800efec <UART_SetConfig+0x478>)
 800efe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efec:	0800f005 	.word	0x0800f005
 800eff0:	0800f00d 	.word	0x0800f00d
 800eff4:	0800f015 	.word	0x0800f015
 800eff8:	0800f01d 	.word	0x0800f01d
 800effc:	0800f025 	.word	0x0800f025
 800f000:	0800f02d 	.word	0x0800f02d
 800f004:	2300      	movs	r3, #0
 800f006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f00a:	e086      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f00c:	2304      	movs	r3, #4
 800f00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f012:	e082      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f014:	2308      	movs	r3, #8
 800f016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f01a:	e07e      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f01c:	2310      	movs	r3, #16
 800f01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f022:	e07a      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f024:	2320      	movs	r3, #32
 800f026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f02a:	e076      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f02c:	2340      	movs	r3, #64	; 0x40
 800f02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f032:	e072      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f034:	2380      	movs	r3, #128	; 0x80
 800f036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03a:	e06e      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	4a75      	ldr	r2, [pc, #468]	; (800f218 <UART_SetConfig+0x6a4>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d130      	bne.n	800f0a8 <UART_SetConfig+0x534>
 800f046:	4b72      	ldr	r3, [pc, #456]	; (800f210 <UART_SetConfig+0x69c>)
 800f048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f04a:	f003 0307 	and.w	r3, r3, #7
 800f04e:	2b05      	cmp	r3, #5
 800f050:	d826      	bhi.n	800f0a0 <UART_SetConfig+0x52c>
 800f052:	a201      	add	r2, pc, #4	; (adr r2, 800f058 <UART_SetConfig+0x4e4>)
 800f054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f058:	0800f071 	.word	0x0800f071
 800f05c:	0800f079 	.word	0x0800f079
 800f060:	0800f081 	.word	0x0800f081
 800f064:	0800f089 	.word	0x0800f089
 800f068:	0800f091 	.word	0x0800f091
 800f06c:	0800f099 	.word	0x0800f099
 800f070:	2300      	movs	r3, #0
 800f072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f076:	e050      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f078:	2304      	movs	r3, #4
 800f07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f07e:	e04c      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f080:	2308      	movs	r3, #8
 800f082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f086:	e048      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f088:	2310      	movs	r3, #16
 800f08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f08e:	e044      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f090:	2320      	movs	r3, #32
 800f092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f096:	e040      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f098:	2340      	movs	r3, #64	; 0x40
 800f09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f09e:	e03c      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f0a0:	2380      	movs	r3, #128	; 0x80
 800f0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0a6:	e038      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	4a5b      	ldr	r2, [pc, #364]	; (800f21c <UART_SetConfig+0x6a8>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d130      	bne.n	800f114 <UART_SetConfig+0x5a0>
 800f0b2:	4b57      	ldr	r3, [pc, #348]	; (800f210 <UART_SetConfig+0x69c>)
 800f0b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0b6:	f003 0307 	and.w	r3, r3, #7
 800f0ba:	2b05      	cmp	r3, #5
 800f0bc:	d826      	bhi.n	800f10c <UART_SetConfig+0x598>
 800f0be:	a201      	add	r2, pc, #4	; (adr r2, 800f0c4 <UART_SetConfig+0x550>)
 800f0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0c4:	0800f0dd 	.word	0x0800f0dd
 800f0c8:	0800f0e5 	.word	0x0800f0e5
 800f0cc:	0800f0ed 	.word	0x0800f0ed
 800f0d0:	0800f0f5 	.word	0x0800f0f5
 800f0d4:	0800f0fd 	.word	0x0800f0fd
 800f0d8:	0800f105 	.word	0x0800f105
 800f0dc:	2302      	movs	r3, #2
 800f0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e2:	e01a      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f0e4:	2304      	movs	r3, #4
 800f0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ea:	e016      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f0ec:	2308      	movs	r3, #8
 800f0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0f2:	e012      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f0f4:	2310      	movs	r3, #16
 800f0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0fa:	e00e      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f0fc:	2320      	movs	r3, #32
 800f0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f102:	e00a      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f104:	2340      	movs	r3, #64	; 0x40
 800f106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f10a:	e006      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f10c:	2380      	movs	r3, #128	; 0x80
 800f10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f112:	e002      	b.n	800f11a <UART_SetConfig+0x5a6>
 800f114:	2380      	movs	r3, #128	; 0x80
 800f116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	4a3f      	ldr	r2, [pc, #252]	; (800f21c <UART_SetConfig+0x6a8>)
 800f120:	4293      	cmp	r3, r2
 800f122:	f040 80f8 	bne.w	800f316 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f126:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f12a:	2b20      	cmp	r3, #32
 800f12c:	dc46      	bgt.n	800f1bc <UART_SetConfig+0x648>
 800f12e:	2b02      	cmp	r3, #2
 800f130:	f2c0 8082 	blt.w	800f238 <UART_SetConfig+0x6c4>
 800f134:	3b02      	subs	r3, #2
 800f136:	2b1e      	cmp	r3, #30
 800f138:	d87e      	bhi.n	800f238 <UART_SetConfig+0x6c4>
 800f13a:	a201      	add	r2, pc, #4	; (adr r2, 800f140 <UART_SetConfig+0x5cc>)
 800f13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f140:	0800f1c3 	.word	0x0800f1c3
 800f144:	0800f239 	.word	0x0800f239
 800f148:	0800f1cb 	.word	0x0800f1cb
 800f14c:	0800f239 	.word	0x0800f239
 800f150:	0800f239 	.word	0x0800f239
 800f154:	0800f239 	.word	0x0800f239
 800f158:	0800f1db 	.word	0x0800f1db
 800f15c:	0800f239 	.word	0x0800f239
 800f160:	0800f239 	.word	0x0800f239
 800f164:	0800f239 	.word	0x0800f239
 800f168:	0800f239 	.word	0x0800f239
 800f16c:	0800f239 	.word	0x0800f239
 800f170:	0800f239 	.word	0x0800f239
 800f174:	0800f239 	.word	0x0800f239
 800f178:	0800f1eb 	.word	0x0800f1eb
 800f17c:	0800f239 	.word	0x0800f239
 800f180:	0800f239 	.word	0x0800f239
 800f184:	0800f239 	.word	0x0800f239
 800f188:	0800f239 	.word	0x0800f239
 800f18c:	0800f239 	.word	0x0800f239
 800f190:	0800f239 	.word	0x0800f239
 800f194:	0800f239 	.word	0x0800f239
 800f198:	0800f239 	.word	0x0800f239
 800f19c:	0800f239 	.word	0x0800f239
 800f1a0:	0800f239 	.word	0x0800f239
 800f1a4:	0800f239 	.word	0x0800f239
 800f1a8:	0800f239 	.word	0x0800f239
 800f1ac:	0800f239 	.word	0x0800f239
 800f1b0:	0800f239 	.word	0x0800f239
 800f1b4:	0800f239 	.word	0x0800f239
 800f1b8:	0800f22b 	.word	0x0800f22b
 800f1bc:	2b40      	cmp	r3, #64	; 0x40
 800f1be:	d037      	beq.n	800f230 <UART_SetConfig+0x6bc>
 800f1c0:	e03a      	b.n	800f238 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f1c2:	f7fd fdc9 	bl	800cd58 <HAL_RCCEx_GetD3PCLK1Freq>
 800f1c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f1c8:	e03c      	b.n	800f244 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7fd fdd8 	bl	800cd84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1d8:	e034      	b.n	800f244 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1da:	f107 0318 	add.w	r3, r7, #24
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7fd ff24 	bl	800d02c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1e8:	e02c      	b.n	800f244 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1ea:	4b09      	ldr	r3, [pc, #36]	; (800f210 <UART_SetConfig+0x69c>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f003 0320 	and.w	r3, r3, #32
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d016      	beq.n	800f224 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1f6:	4b06      	ldr	r3, [pc, #24]	; (800f210 <UART_SetConfig+0x69c>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	08db      	lsrs	r3, r3, #3
 800f1fc:	f003 0303 	and.w	r3, r3, #3
 800f200:	4a07      	ldr	r2, [pc, #28]	; (800f220 <UART_SetConfig+0x6ac>)
 800f202:	fa22 f303 	lsr.w	r3, r2, r3
 800f206:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f208:	e01c      	b.n	800f244 <UART_SetConfig+0x6d0>
 800f20a:	bf00      	nop
 800f20c:	40011400 	.word	0x40011400
 800f210:	58024400 	.word	0x58024400
 800f214:	40007800 	.word	0x40007800
 800f218:	40007c00 	.word	0x40007c00
 800f21c:	58000c00 	.word	0x58000c00
 800f220:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f224:	4b9d      	ldr	r3, [pc, #628]	; (800f49c <UART_SetConfig+0x928>)
 800f226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f228:	e00c      	b.n	800f244 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f22a:	4b9d      	ldr	r3, [pc, #628]	; (800f4a0 <UART_SetConfig+0x92c>)
 800f22c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f22e:	e009      	b.n	800f244 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f234:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f236:	e005      	b.n	800f244 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f238:	2300      	movs	r3, #0
 800f23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f23c:	2301      	movs	r3, #1
 800f23e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f242:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f246:	2b00      	cmp	r3, #0
 800f248:	f000 81de 	beq.w	800f608 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f250:	4a94      	ldr	r2, [pc, #592]	; (800f4a4 <UART_SetConfig+0x930>)
 800f252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f256:	461a      	mov	r2, r3
 800f258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f25a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f25e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	685a      	ldr	r2, [r3, #4]
 800f264:	4613      	mov	r3, r2
 800f266:	005b      	lsls	r3, r3, #1
 800f268:	4413      	add	r3, r2
 800f26a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d305      	bcc.n	800f27c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f278:	429a      	cmp	r2, r3
 800f27a:	d903      	bls.n	800f284 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f27c:	2301      	movs	r3, #1
 800f27e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f282:	e1c1      	b.n	800f608 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f286:	2200      	movs	r2, #0
 800f288:	60bb      	str	r3, [r7, #8]
 800f28a:	60fa      	str	r2, [r7, #12]
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f290:	4a84      	ldr	r2, [pc, #528]	; (800f4a4 <UART_SetConfig+0x930>)
 800f292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f296:	b29b      	uxth	r3, r3
 800f298:	2200      	movs	r2, #0
 800f29a:	603b      	str	r3, [r7, #0]
 800f29c:	607a      	str	r2, [r7, #4]
 800f29e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f2a6:	f7f1 f81b 	bl	80002e0 <__aeabi_uldivmod>
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	4610      	mov	r0, r2
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	f04f 0200 	mov.w	r2, #0
 800f2b6:	f04f 0300 	mov.w	r3, #0
 800f2ba:	020b      	lsls	r3, r1, #8
 800f2bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f2c0:	0202      	lsls	r2, r0, #8
 800f2c2:	6979      	ldr	r1, [r7, #20]
 800f2c4:	6849      	ldr	r1, [r1, #4]
 800f2c6:	0849      	lsrs	r1, r1, #1
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	460c      	mov	r4, r1
 800f2cc:	4605      	mov	r5, r0
 800f2ce:	eb12 0804 	adds.w	r8, r2, r4
 800f2d2:	eb43 0905 	adc.w	r9, r3, r5
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	469a      	mov	sl, r3
 800f2de:	4693      	mov	fp, r2
 800f2e0:	4652      	mov	r2, sl
 800f2e2:	465b      	mov	r3, fp
 800f2e4:	4640      	mov	r0, r8
 800f2e6:	4649      	mov	r1, r9
 800f2e8:	f7f0 fffa 	bl	80002e0 <__aeabi_uldivmod>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	4613      	mov	r3, r2
 800f2f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f2fa:	d308      	bcc.n	800f30e <UART_SetConfig+0x79a>
 800f2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f302:	d204      	bcs.n	800f30e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f30a:	60da      	str	r2, [r3, #12]
 800f30c:	e17c      	b.n	800f608 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f30e:	2301      	movs	r3, #1
 800f310:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f314:	e178      	b.n	800f608 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	69db      	ldr	r3, [r3, #28]
 800f31a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f31e:	f040 80c5 	bne.w	800f4ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f322:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f326:	2b20      	cmp	r3, #32
 800f328:	dc48      	bgt.n	800f3bc <UART_SetConfig+0x848>
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	db7b      	blt.n	800f426 <UART_SetConfig+0x8b2>
 800f32e:	2b20      	cmp	r3, #32
 800f330:	d879      	bhi.n	800f426 <UART_SetConfig+0x8b2>
 800f332:	a201      	add	r2, pc, #4	; (adr r2, 800f338 <UART_SetConfig+0x7c4>)
 800f334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f338:	0800f3c3 	.word	0x0800f3c3
 800f33c:	0800f3cb 	.word	0x0800f3cb
 800f340:	0800f427 	.word	0x0800f427
 800f344:	0800f427 	.word	0x0800f427
 800f348:	0800f3d3 	.word	0x0800f3d3
 800f34c:	0800f427 	.word	0x0800f427
 800f350:	0800f427 	.word	0x0800f427
 800f354:	0800f427 	.word	0x0800f427
 800f358:	0800f3e3 	.word	0x0800f3e3
 800f35c:	0800f427 	.word	0x0800f427
 800f360:	0800f427 	.word	0x0800f427
 800f364:	0800f427 	.word	0x0800f427
 800f368:	0800f427 	.word	0x0800f427
 800f36c:	0800f427 	.word	0x0800f427
 800f370:	0800f427 	.word	0x0800f427
 800f374:	0800f427 	.word	0x0800f427
 800f378:	0800f3f3 	.word	0x0800f3f3
 800f37c:	0800f427 	.word	0x0800f427
 800f380:	0800f427 	.word	0x0800f427
 800f384:	0800f427 	.word	0x0800f427
 800f388:	0800f427 	.word	0x0800f427
 800f38c:	0800f427 	.word	0x0800f427
 800f390:	0800f427 	.word	0x0800f427
 800f394:	0800f427 	.word	0x0800f427
 800f398:	0800f427 	.word	0x0800f427
 800f39c:	0800f427 	.word	0x0800f427
 800f3a0:	0800f427 	.word	0x0800f427
 800f3a4:	0800f427 	.word	0x0800f427
 800f3a8:	0800f427 	.word	0x0800f427
 800f3ac:	0800f427 	.word	0x0800f427
 800f3b0:	0800f427 	.word	0x0800f427
 800f3b4:	0800f427 	.word	0x0800f427
 800f3b8:	0800f419 	.word	0x0800f419
 800f3bc:	2b40      	cmp	r3, #64	; 0x40
 800f3be:	d02e      	beq.n	800f41e <UART_SetConfig+0x8aa>
 800f3c0:	e031      	b.n	800f426 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3c2:	f7fc fa93 	bl	800b8ec <HAL_RCC_GetPCLK1Freq>
 800f3c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3c8:	e033      	b.n	800f432 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3ca:	f7fc faa5 	bl	800b918 <HAL_RCC_GetPCLK2Freq>
 800f3ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3d0:	e02f      	b.n	800f432 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fd fcd4 	bl	800cd84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3e0:	e027      	b.n	800f432 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3e2:	f107 0318 	add.w	r3, r7, #24
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fd fe20 	bl	800d02c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3f0:	e01f      	b.n	800f432 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3f2:	4b2d      	ldr	r3, [pc, #180]	; (800f4a8 <UART_SetConfig+0x934>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	f003 0320 	and.w	r3, r3, #32
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d009      	beq.n	800f412 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3fe:	4b2a      	ldr	r3, [pc, #168]	; (800f4a8 <UART_SetConfig+0x934>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	08db      	lsrs	r3, r3, #3
 800f404:	f003 0303 	and.w	r3, r3, #3
 800f408:	4a24      	ldr	r2, [pc, #144]	; (800f49c <UART_SetConfig+0x928>)
 800f40a:	fa22 f303 	lsr.w	r3, r2, r3
 800f40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f410:	e00f      	b.n	800f432 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f412:	4b22      	ldr	r3, [pc, #136]	; (800f49c <UART_SetConfig+0x928>)
 800f414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f416:	e00c      	b.n	800f432 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f418:	4b21      	ldr	r3, [pc, #132]	; (800f4a0 <UART_SetConfig+0x92c>)
 800f41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f41c:	e009      	b.n	800f432 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f41e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f424:	e005      	b.n	800f432 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f426:	2300      	movs	r3, #0
 800f428:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f42a:	2301      	movs	r3, #1
 800f42c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f430:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f434:	2b00      	cmp	r3, #0
 800f436:	f000 80e7 	beq.w	800f608 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f43e:	4a19      	ldr	r2, [pc, #100]	; (800f4a4 <UART_SetConfig+0x930>)
 800f440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f444:	461a      	mov	r2, r3
 800f446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f448:	fbb3 f3f2 	udiv	r3, r3, r2
 800f44c:	005a      	lsls	r2, r3, #1
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	085b      	lsrs	r3, r3, #1
 800f454:	441a      	add	r2, r3
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f45e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f462:	2b0f      	cmp	r3, #15
 800f464:	d916      	bls.n	800f494 <UART_SetConfig+0x920>
 800f466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f46c:	d212      	bcs.n	800f494 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f470:	b29b      	uxth	r3, r3
 800f472:	f023 030f 	bic.w	r3, r3, #15
 800f476:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f47a:	085b      	lsrs	r3, r3, #1
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	f003 0307 	and.w	r3, r3, #7
 800f482:	b29a      	uxth	r2, r3
 800f484:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f486:	4313      	orrs	r3, r2
 800f488:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f490:	60da      	str	r2, [r3, #12]
 800f492:	e0b9      	b.n	800f608 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f494:	2301      	movs	r3, #1
 800f496:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f49a:	e0b5      	b.n	800f608 <UART_SetConfig+0xa94>
 800f49c:	03d09000 	.word	0x03d09000
 800f4a0:	003d0900 	.word	0x003d0900
 800f4a4:	08010aa4 	.word	0x08010aa4
 800f4a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f4ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f4b0:	2b20      	cmp	r3, #32
 800f4b2:	dc49      	bgt.n	800f548 <UART_SetConfig+0x9d4>
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	db7c      	blt.n	800f5b2 <UART_SetConfig+0xa3e>
 800f4b8:	2b20      	cmp	r3, #32
 800f4ba:	d87a      	bhi.n	800f5b2 <UART_SetConfig+0xa3e>
 800f4bc:	a201      	add	r2, pc, #4	; (adr r2, 800f4c4 <UART_SetConfig+0x950>)
 800f4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4c2:	bf00      	nop
 800f4c4:	0800f54f 	.word	0x0800f54f
 800f4c8:	0800f557 	.word	0x0800f557
 800f4cc:	0800f5b3 	.word	0x0800f5b3
 800f4d0:	0800f5b3 	.word	0x0800f5b3
 800f4d4:	0800f55f 	.word	0x0800f55f
 800f4d8:	0800f5b3 	.word	0x0800f5b3
 800f4dc:	0800f5b3 	.word	0x0800f5b3
 800f4e0:	0800f5b3 	.word	0x0800f5b3
 800f4e4:	0800f56f 	.word	0x0800f56f
 800f4e8:	0800f5b3 	.word	0x0800f5b3
 800f4ec:	0800f5b3 	.word	0x0800f5b3
 800f4f0:	0800f5b3 	.word	0x0800f5b3
 800f4f4:	0800f5b3 	.word	0x0800f5b3
 800f4f8:	0800f5b3 	.word	0x0800f5b3
 800f4fc:	0800f5b3 	.word	0x0800f5b3
 800f500:	0800f5b3 	.word	0x0800f5b3
 800f504:	0800f57f 	.word	0x0800f57f
 800f508:	0800f5b3 	.word	0x0800f5b3
 800f50c:	0800f5b3 	.word	0x0800f5b3
 800f510:	0800f5b3 	.word	0x0800f5b3
 800f514:	0800f5b3 	.word	0x0800f5b3
 800f518:	0800f5b3 	.word	0x0800f5b3
 800f51c:	0800f5b3 	.word	0x0800f5b3
 800f520:	0800f5b3 	.word	0x0800f5b3
 800f524:	0800f5b3 	.word	0x0800f5b3
 800f528:	0800f5b3 	.word	0x0800f5b3
 800f52c:	0800f5b3 	.word	0x0800f5b3
 800f530:	0800f5b3 	.word	0x0800f5b3
 800f534:	0800f5b3 	.word	0x0800f5b3
 800f538:	0800f5b3 	.word	0x0800f5b3
 800f53c:	0800f5b3 	.word	0x0800f5b3
 800f540:	0800f5b3 	.word	0x0800f5b3
 800f544:	0800f5a5 	.word	0x0800f5a5
 800f548:	2b40      	cmp	r3, #64	; 0x40
 800f54a:	d02e      	beq.n	800f5aa <UART_SetConfig+0xa36>
 800f54c:	e031      	b.n	800f5b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f54e:	f7fc f9cd 	bl	800b8ec <HAL_RCC_GetPCLK1Freq>
 800f552:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f554:	e033      	b.n	800f5be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f556:	f7fc f9df 	bl	800b918 <HAL_RCC_GetPCLK2Freq>
 800f55a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f55c:	e02f      	b.n	800f5be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f55e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f562:	4618      	mov	r0, r3
 800f564:	f7fd fc0e 	bl	800cd84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f56c:	e027      	b.n	800f5be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f56e:	f107 0318 	add.w	r3, r7, #24
 800f572:	4618      	mov	r0, r3
 800f574:	f7fd fd5a 	bl	800d02c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f57c:	e01f      	b.n	800f5be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f57e:	4b2d      	ldr	r3, [pc, #180]	; (800f634 <UART_SetConfig+0xac0>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f003 0320 	and.w	r3, r3, #32
 800f586:	2b00      	cmp	r3, #0
 800f588:	d009      	beq.n	800f59e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f58a:	4b2a      	ldr	r3, [pc, #168]	; (800f634 <UART_SetConfig+0xac0>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	08db      	lsrs	r3, r3, #3
 800f590:	f003 0303 	and.w	r3, r3, #3
 800f594:	4a28      	ldr	r2, [pc, #160]	; (800f638 <UART_SetConfig+0xac4>)
 800f596:	fa22 f303 	lsr.w	r3, r2, r3
 800f59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f59c:	e00f      	b.n	800f5be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f59e:	4b26      	ldr	r3, [pc, #152]	; (800f638 <UART_SetConfig+0xac4>)
 800f5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5a2:	e00c      	b.n	800f5be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f5a4:	4b25      	ldr	r3, [pc, #148]	; (800f63c <UART_SetConfig+0xac8>)
 800f5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5a8:	e009      	b.n	800f5be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5b0:	e005      	b.n	800f5be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f5bc:	bf00      	nop
    }

    if (pclk != 0U)
 800f5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d021      	beq.n	800f608 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5c8:	4a1d      	ldr	r2, [pc, #116]	; (800f640 <UART_SetConfig+0xacc>)
 800f5ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	085b      	lsrs	r3, r3, #1
 800f5dc:	441a      	add	r2, r3
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ea:	2b0f      	cmp	r3, #15
 800f5ec:	d909      	bls.n	800f602 <UART_SetConfig+0xa8e>
 800f5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5f4:	d205      	bcs.n	800f602 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f8:	b29a      	uxth	r2, r3
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	60da      	str	r2, [r3, #12]
 800f600:	e002      	b.n	800f608 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f602:	2301      	movs	r3, #1
 800f604:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	2201      	movs	r2, #1
 800f60c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	2201      	movs	r2, #1
 800f614:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	2200      	movs	r2, #0
 800f61c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	2200      	movs	r2, #0
 800f622:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f624:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3748      	adds	r7, #72	; 0x48
 800f62c:	46bd      	mov	sp, r7
 800f62e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f632:	bf00      	nop
 800f634:	58024400 	.word	0x58024400
 800f638:	03d09000 	.word	0x03d09000
 800f63c:	003d0900 	.word	0x003d0900
 800f640:	08010aa4 	.word	0x08010aa4

0800f644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f650:	f003 0301 	and.w	r3, r3, #1
 800f654:	2b00      	cmp	r3, #0
 800f656:	d00a      	beq.n	800f66e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	430a      	orrs	r2, r1
 800f66c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f672:	f003 0302 	and.w	r3, r3, #2
 800f676:	2b00      	cmp	r3, #0
 800f678:	d00a      	beq.n	800f690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	430a      	orrs	r2, r1
 800f68e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f694:	f003 0304 	and.w	r3, r3, #4
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d00a      	beq.n	800f6b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	430a      	orrs	r2, r1
 800f6b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6b6:	f003 0308 	and.w	r3, r3, #8
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d00a      	beq.n	800f6d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	430a      	orrs	r2, r1
 800f6d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6d8:	f003 0310 	and.w	r3, r3, #16
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d00a      	beq.n	800f6f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	430a      	orrs	r2, r1
 800f6f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6fa:	f003 0320 	and.w	r3, r3, #32
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d00a      	beq.n	800f718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	430a      	orrs	r2, r1
 800f716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f71c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f720:	2b00      	cmp	r3, #0
 800f722:	d01a      	beq.n	800f75a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	685b      	ldr	r3, [r3, #4]
 800f72a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	430a      	orrs	r2, r1
 800f738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f73e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f742:	d10a      	bne.n	800f75a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	430a      	orrs	r2, r1
 800f758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f762:	2b00      	cmp	r3, #0
 800f764:	d00a      	beq.n	800f77c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	430a      	orrs	r2, r1
 800f77a:	605a      	str	r2, [r3, #4]
  }
}
 800f77c:	bf00      	nop
 800f77e:	370c      	adds	r7, #12
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr

0800f788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b098      	sub	sp, #96	; 0x60
 800f78c:	af02      	add	r7, sp, #8
 800f78e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2200      	movs	r2, #0
 800f794:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f798:	f7f6 fd66 	bl	8006268 <HAL_GetTick>
 800f79c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f003 0308 	and.w	r3, r3, #8
 800f7a8:	2b08      	cmp	r3, #8
 800f7aa:	d12f      	bne.n	800f80c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f7ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f7b0:	9300      	str	r3, [sp, #0]
 800f7b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 f88e 	bl	800f8dc <UART_WaitOnFlagUntilTimeout>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d022      	beq.n	800f80c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ce:	e853 3f00 	ldrex	r3, [r3]
 800f7d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7da:	653b      	str	r3, [r7, #80]	; 0x50
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7e4:	647b      	str	r3, [r7, #68]	; 0x44
 800f7e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f7ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7ec:	e841 2300 	strex	r3, r2, [r1]
 800f7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d1e6      	bne.n	800f7c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2220      	movs	r2, #32
 800f7fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2200      	movs	r2, #0
 800f804:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f808:	2303      	movs	r3, #3
 800f80a:	e063      	b.n	800f8d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f003 0304 	and.w	r3, r3, #4
 800f816:	2b04      	cmp	r3, #4
 800f818:	d149      	bne.n	800f8ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f81a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f81e:	9300      	str	r3, [sp, #0]
 800f820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f822:	2200      	movs	r2, #0
 800f824:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 f857 	bl	800f8dc <UART_WaitOnFlagUntilTimeout>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d03c      	beq.n	800f8ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83c:	e853 3f00 	ldrex	r3, [r3]
 800f840:	623b      	str	r3, [r7, #32]
   return(result);
 800f842:	6a3b      	ldr	r3, [r7, #32]
 800f844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	461a      	mov	r2, r3
 800f850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f852:	633b      	str	r3, [r7, #48]	; 0x30
 800f854:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f85a:	e841 2300 	strex	r3, r2, [r1]
 800f85e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f862:	2b00      	cmp	r3, #0
 800f864:	d1e6      	bne.n	800f834 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	3308      	adds	r3, #8
 800f86c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	e853 3f00 	ldrex	r3, [r3]
 800f874:	60fb      	str	r3, [r7, #12]
   return(result);
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	f023 0301 	bic.w	r3, r3, #1
 800f87c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	3308      	adds	r3, #8
 800f884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f886:	61fa      	str	r2, [r7, #28]
 800f888:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f88a:	69b9      	ldr	r1, [r7, #24]
 800f88c:	69fa      	ldr	r2, [r7, #28]
 800f88e:	e841 2300 	strex	r3, r2, [r1]
 800f892:	617b      	str	r3, [r7, #20]
   return(result);
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d1e5      	bne.n	800f866 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2220      	movs	r2, #32
 800f89e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f8aa:	2303      	movs	r3, #3
 800f8ac:	e012      	b.n	800f8d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2220      	movs	r2, #32
 800f8b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2220      	movs	r2, #32
 800f8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f8d2:	2300      	movs	r3, #0
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3758      	adds	r7, #88	; 0x58
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	603b      	str	r3, [r7, #0]
 800f8e8:	4613      	mov	r3, r2
 800f8ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8ec:	e049      	b.n	800f982 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8ee:	69bb      	ldr	r3, [r7, #24]
 800f8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8f4:	d045      	beq.n	800f982 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f8f6:	f7f6 fcb7 	bl	8006268 <HAL_GetTick>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	1ad3      	subs	r3, r2, r3
 800f900:	69ba      	ldr	r2, [r7, #24]
 800f902:	429a      	cmp	r2, r3
 800f904:	d302      	bcc.n	800f90c <UART_WaitOnFlagUntilTimeout+0x30>
 800f906:	69bb      	ldr	r3, [r7, #24]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d101      	bne.n	800f910 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f90c:	2303      	movs	r3, #3
 800f90e:	e048      	b.n	800f9a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f003 0304 	and.w	r3, r3, #4
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d031      	beq.n	800f982 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	69db      	ldr	r3, [r3, #28]
 800f924:	f003 0308 	and.w	r3, r3, #8
 800f928:	2b08      	cmp	r3, #8
 800f92a:	d110      	bne.n	800f94e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	2208      	movs	r2, #8
 800f932:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f934:	68f8      	ldr	r0, [r7, #12]
 800f936:	f000 f839 	bl	800f9ac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2208      	movs	r2, #8
 800f93e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2200      	movs	r2, #0
 800f946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f94a:	2301      	movs	r3, #1
 800f94c:	e029      	b.n	800f9a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	69db      	ldr	r3, [r3, #28]
 800f954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f95c:	d111      	bne.n	800f982 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f968:	68f8      	ldr	r0, [r7, #12]
 800f96a:	f000 f81f 	bl	800f9ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2220      	movs	r2, #32
 800f972:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2200      	movs	r2, #0
 800f97a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f97e:	2303      	movs	r3, #3
 800f980:	e00f      	b.n	800f9a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	69da      	ldr	r2, [r3, #28]
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	4013      	ands	r3, r2
 800f98c:	68ba      	ldr	r2, [r7, #8]
 800f98e:	429a      	cmp	r2, r3
 800f990:	bf0c      	ite	eq
 800f992:	2301      	moveq	r3, #1
 800f994:	2300      	movne	r3, #0
 800f996:	b2db      	uxtb	r3, r3
 800f998:	461a      	mov	r2, r3
 800f99a:	79fb      	ldrb	r3, [r7, #7]
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d0a6      	beq.n	800f8ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f9a0:	2300      	movs	r3, #0
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3710      	adds	r7, #16
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
	...

0800f9ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b095      	sub	sp, #84	; 0x54
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9bc:	e853 3f00 	ldrex	r3, [r3]
 800f9c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f9c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9d2:	643b      	str	r3, [r7, #64]	; 0x40
 800f9d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f9d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f9da:	e841 2300 	strex	r3, r2, [r1]
 800f9de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d1e6      	bne.n	800f9b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	3308      	adds	r3, #8
 800f9ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ee:	6a3b      	ldr	r3, [r7, #32]
 800f9f0:	e853 3f00 	ldrex	r3, [r3]
 800f9f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f9f6:	69fa      	ldr	r2, [r7, #28]
 800f9f8:	4b1e      	ldr	r3, [pc, #120]	; (800fa74 <UART_EndRxTransfer+0xc8>)
 800f9fa:	4013      	ands	r3, r2
 800f9fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	3308      	adds	r3, #8
 800fa04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa06:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fa08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fa0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa0e:	e841 2300 	strex	r3, r2, [r1]
 800fa12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d1e5      	bne.n	800f9e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d118      	bne.n	800fa54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	e853 3f00 	ldrex	r3, [r3]
 800fa2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	f023 0310 	bic.w	r3, r3, #16
 800fa36:	647b      	str	r3, [r7, #68]	; 0x44
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa40:	61bb      	str	r3, [r7, #24]
 800fa42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa44:	6979      	ldr	r1, [r7, #20]
 800fa46:	69ba      	ldr	r2, [r7, #24]
 800fa48:	e841 2300 	strex	r3, r2, [r1]
 800fa4c:	613b      	str	r3, [r7, #16]
   return(result);
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d1e6      	bne.n	800fa22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2220      	movs	r2, #32
 800fa58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2200      	movs	r2, #0
 800fa66:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fa68:	bf00      	nop
 800fa6a:	3754      	adds	r7, #84	; 0x54
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr
 800fa74:	effffffe 	.word	0xeffffffe

0800fa78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2200      	movs	r2, #0
 800fa92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa96:	68f8      	ldr	r0, [r7, #12]
 800fa98:	f7ff f856 	bl	800eb48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa9c:	bf00      	nop
 800fa9e:	3710      	adds	r7, #16
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}

0800faa4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b088      	sub	sp, #32
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	e853 3f00 	ldrex	r3, [r3]
 800fab8:	60bb      	str	r3, [r7, #8]
   return(result);
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fac0:	61fb      	str	r3, [r7, #28]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	461a      	mov	r2, r3
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	61bb      	str	r3, [r7, #24]
 800facc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800face:	6979      	ldr	r1, [r7, #20]
 800fad0:	69ba      	ldr	r2, [r7, #24]
 800fad2:	e841 2300 	strex	r3, r2, [r1]
 800fad6:	613b      	str	r3, [r7, #16]
   return(result);
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d1e6      	bne.n	800faac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2220      	movs	r2, #32
 800fae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f7ff f821 	bl	800eb34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800faf2:	bf00      	nop
 800faf4:	3720      	adds	r7, #32
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fafa:	b480      	push	{r7}
 800fafc:	b083      	sub	sp, #12
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb02:	bf00      	nop
 800fb04:	370c      	adds	r7, #12
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr

0800fb0e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fb0e:	b480      	push	{r7}
 800fb10:	b083      	sub	sp, #12
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb16:	bf00      	nop
 800fb18:	370c      	adds	r7, #12
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb20:	4770      	bx	lr

0800fb22 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb22:	b480      	push	{r7}
 800fb24:	b083      	sub	sp, #12
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fb2a:	bf00      	nop
 800fb2c:	370c      	adds	r7, #12
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr
	...

0800fb38 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d121      	bne.n	800fb8e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	4b27      	ldr	r3, [pc, #156]	; (800fbec <FMC_SDRAM_Init+0xb4>)
 800fb50:	4013      	ands	r3, r2
 800fb52:	683a      	ldr	r2, [r7, #0]
 800fb54:	6851      	ldr	r1, [r2, #4]
 800fb56:	683a      	ldr	r2, [r7, #0]
 800fb58:	6892      	ldr	r2, [r2, #8]
 800fb5a:	4311      	orrs	r1, r2
 800fb5c:	683a      	ldr	r2, [r7, #0]
 800fb5e:	68d2      	ldr	r2, [r2, #12]
 800fb60:	4311      	orrs	r1, r2
 800fb62:	683a      	ldr	r2, [r7, #0]
 800fb64:	6912      	ldr	r2, [r2, #16]
 800fb66:	4311      	orrs	r1, r2
 800fb68:	683a      	ldr	r2, [r7, #0]
 800fb6a:	6952      	ldr	r2, [r2, #20]
 800fb6c:	4311      	orrs	r1, r2
 800fb6e:	683a      	ldr	r2, [r7, #0]
 800fb70:	6992      	ldr	r2, [r2, #24]
 800fb72:	4311      	orrs	r1, r2
 800fb74:	683a      	ldr	r2, [r7, #0]
 800fb76:	69d2      	ldr	r2, [r2, #28]
 800fb78:	4311      	orrs	r1, r2
 800fb7a:	683a      	ldr	r2, [r7, #0]
 800fb7c:	6a12      	ldr	r2, [r2, #32]
 800fb7e:	4311      	orrs	r1, r2
 800fb80:	683a      	ldr	r2, [r7, #0]
 800fb82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fb84:	430a      	orrs	r2, r1
 800fb86:	431a      	orrs	r2, r3
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	601a      	str	r2, [r3, #0]
 800fb8c:	e026      	b.n	800fbdc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	69d9      	ldr	r1, [r3, #28]
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	6a1b      	ldr	r3, [r3, #32]
 800fb9e:	4319      	orrs	r1, r3
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba4:	430b      	orrs	r3, r1
 800fba6:	431a      	orrs	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	685a      	ldr	r2, [r3, #4]
 800fbb0:	4b0e      	ldr	r3, [pc, #56]	; (800fbec <FMC_SDRAM_Init+0xb4>)
 800fbb2:	4013      	ands	r3, r2
 800fbb4:	683a      	ldr	r2, [r7, #0]
 800fbb6:	6851      	ldr	r1, [r2, #4]
 800fbb8:	683a      	ldr	r2, [r7, #0]
 800fbba:	6892      	ldr	r2, [r2, #8]
 800fbbc:	4311      	orrs	r1, r2
 800fbbe:	683a      	ldr	r2, [r7, #0]
 800fbc0:	68d2      	ldr	r2, [r2, #12]
 800fbc2:	4311      	orrs	r1, r2
 800fbc4:	683a      	ldr	r2, [r7, #0]
 800fbc6:	6912      	ldr	r2, [r2, #16]
 800fbc8:	4311      	orrs	r1, r2
 800fbca:	683a      	ldr	r2, [r7, #0]
 800fbcc:	6952      	ldr	r2, [r2, #20]
 800fbce:	4311      	orrs	r1, r2
 800fbd0:	683a      	ldr	r2, [r7, #0]
 800fbd2:	6992      	ldr	r2, [r2, #24]
 800fbd4:	430a      	orrs	r2, r1
 800fbd6:	431a      	orrs	r2, r3
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800fbdc:	2300      	movs	r3, #0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	370c      	adds	r7, #12
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr
 800fbea:	bf00      	nop
 800fbec:	ffff8000 	.word	0xffff8000

0800fbf0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b085      	sub	sp, #20
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	60f8      	str	r0, [r7, #12]
 800fbf8:	60b9      	str	r1, [r7, #8]
 800fbfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d128      	bne.n	800fc54 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	1e59      	subs	r1, r3, #1
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	3b01      	subs	r3, #1
 800fc16:	011b      	lsls	r3, r3, #4
 800fc18:	4319      	orrs	r1, r3
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	689b      	ldr	r3, [r3, #8]
 800fc1e:	3b01      	subs	r3, #1
 800fc20:	021b      	lsls	r3, r3, #8
 800fc22:	4319      	orrs	r1, r3
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	68db      	ldr	r3, [r3, #12]
 800fc28:	3b01      	subs	r3, #1
 800fc2a:	031b      	lsls	r3, r3, #12
 800fc2c:	4319      	orrs	r1, r3
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	691b      	ldr	r3, [r3, #16]
 800fc32:	3b01      	subs	r3, #1
 800fc34:	041b      	lsls	r3, r3, #16
 800fc36:	4319      	orrs	r1, r3
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	695b      	ldr	r3, [r3, #20]
 800fc3c:	3b01      	subs	r3, #1
 800fc3e:	051b      	lsls	r3, r3, #20
 800fc40:	4319      	orrs	r1, r3
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	699b      	ldr	r3, [r3, #24]
 800fc46:	3b01      	subs	r3, #1
 800fc48:	061b      	lsls	r3, r3, #24
 800fc4a:	430b      	orrs	r3, r1
 800fc4c:	431a      	orrs	r2, r3
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	609a      	str	r2, [r3, #8]
 800fc52:	e02d      	b.n	800fcb0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	689a      	ldr	r2, [r3, #8]
 800fc58:	4b19      	ldr	r3, [pc, #100]	; (800fcc0 <FMC_SDRAM_Timing_Init+0xd0>)
 800fc5a:	4013      	ands	r3, r2
 800fc5c:	68ba      	ldr	r2, [r7, #8]
 800fc5e:	68d2      	ldr	r2, [r2, #12]
 800fc60:	3a01      	subs	r2, #1
 800fc62:	0311      	lsls	r1, r2, #12
 800fc64:	68ba      	ldr	r2, [r7, #8]
 800fc66:	6952      	ldr	r2, [r2, #20]
 800fc68:	3a01      	subs	r2, #1
 800fc6a:	0512      	lsls	r2, r2, #20
 800fc6c:	430a      	orrs	r2, r1
 800fc6e:	431a      	orrs	r2, r3
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	1e59      	subs	r1, r3, #1
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	3b01      	subs	r3, #1
 800fc88:	011b      	lsls	r3, r3, #4
 800fc8a:	4319      	orrs	r1, r3
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	689b      	ldr	r3, [r3, #8]
 800fc90:	3b01      	subs	r3, #1
 800fc92:	021b      	lsls	r3, r3, #8
 800fc94:	4319      	orrs	r1, r3
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	691b      	ldr	r3, [r3, #16]
 800fc9a:	3b01      	subs	r3, #1
 800fc9c:	041b      	lsls	r3, r3, #16
 800fc9e:	4319      	orrs	r1, r3
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	699b      	ldr	r3, [r3, #24]
 800fca4:	3b01      	subs	r3, #1
 800fca6:	061b      	lsls	r3, r3, #24
 800fca8:	430b      	orrs	r3, r1
 800fcaa:	431a      	orrs	r2, r3
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800fcb0:	2300      	movs	r3, #0
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3714      	adds	r7, #20
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbc:	4770      	bx	lr
 800fcbe:	bf00      	nop
 800fcc0:	ff0f0fff 	.word	0xff0f0fff

0800fcc4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b085      	sub	sp, #20
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	691a      	ldr	r2, [r3, #16]
 800fcd4:	4b0c      	ldr	r3, [pc, #48]	; (800fd08 <FMC_SDRAM_SendCommand+0x44>)
 800fcd6:	4013      	ands	r3, r2
 800fcd8:	68ba      	ldr	r2, [r7, #8]
 800fcda:	6811      	ldr	r1, [r2, #0]
 800fcdc:	68ba      	ldr	r2, [r7, #8]
 800fcde:	6852      	ldr	r2, [r2, #4]
 800fce0:	4311      	orrs	r1, r2
 800fce2:	68ba      	ldr	r2, [r7, #8]
 800fce4:	6892      	ldr	r2, [r2, #8]
 800fce6:	3a01      	subs	r2, #1
 800fce8:	0152      	lsls	r2, r2, #5
 800fcea:	4311      	orrs	r1, r2
 800fcec:	68ba      	ldr	r2, [r7, #8]
 800fcee:	68d2      	ldr	r2, [r2, #12]
 800fcf0:	0252      	lsls	r2, r2, #9
 800fcf2:	430a      	orrs	r2, r1
 800fcf4:	431a      	orrs	r2, r3
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800fcfa:	2300      	movs	r3, #0
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3714      	adds	r7, #20
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr
 800fd08:	ffc00000 	.word	0xffc00000

0800fd0c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b083      	sub	sp, #12
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	695a      	ldr	r2, [r3, #20]
 800fd1a:	4b07      	ldr	r3, [pc, #28]	; (800fd38 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800fd1c:	4013      	ands	r3, r2
 800fd1e:	683a      	ldr	r2, [r7, #0]
 800fd20:	0052      	lsls	r2, r2, #1
 800fd22:	431a      	orrs	r2, r3
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800fd28:	2300      	movs	r3, #0
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	370c      	adds	r7, #12
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd34:	4770      	bx	lr
 800fd36:	bf00      	nop
 800fd38:	ffffc001 	.word	0xffffc001

0800fd3c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b085      	sub	sp, #20
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	68fa      	ldr	r2, [r7, #12]
 800fd50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	689a      	ldr	r2, [r3, #8]
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	689b      	ldr	r3, [r3, #8]
 800fd5e:	683a      	ldr	r2, [r7, #0]
 800fd60:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	683a      	ldr	r2, [r7, #0]
 800fd66:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	687a      	ldr	r2, [r7, #4]
 800fd6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	1c5a      	adds	r2, r3, #1
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	601a      	str	r2, [r3, #0]
}
 800fd78:	bf00      	nop
 800fd7a:	3714      	adds	r7, #20
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr

0800fd84 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fd84:	b480      	push	{r7}
 800fd86:	b085      	sub	sp, #20
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	691b      	ldr	r3, [r3, #16]
 800fd90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	687a      	ldr	r2, [r7, #4]
 800fd98:	6892      	ldr	r2, [r2, #8]
 800fd9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	6852      	ldr	r2, [r2, #4]
 800fda4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	685b      	ldr	r3, [r3, #4]
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d103      	bne.n	800fdb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	689a      	ldr	r2, [r3, #8]
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	1e5a      	subs	r2, r3, #1
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	681b      	ldr	r3, [r3, #0]
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3714      	adds	r7, #20
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b086      	sub	sp, #24
 800fddc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fdde:	2300      	movs	r3, #0
 800fde0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fde2:	4b4f      	ldr	r3, [pc, #316]	; (800ff20 <xTaskIncrementTick+0x148>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f040 808f 	bne.w	800ff0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fdec:	4b4d      	ldr	r3, [pc, #308]	; (800ff24 <xTaskIncrementTick+0x14c>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fdf4:	4a4b      	ldr	r2, [pc, #300]	; (800ff24 <xTaskIncrementTick+0x14c>)
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d120      	bne.n	800fe42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fe00:	4b49      	ldr	r3, [pc, #292]	; (800ff28 <xTaskIncrementTick+0x150>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d00a      	beq.n	800fe20 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fe0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe0e:	f383 8811 	msr	BASEPRI, r3
 800fe12:	f3bf 8f6f 	isb	sy
 800fe16:	f3bf 8f4f 	dsb	sy
 800fe1a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fe1c:	bf00      	nop
 800fe1e:	e7fe      	b.n	800fe1e <xTaskIncrementTick+0x46>
 800fe20:	4b41      	ldr	r3, [pc, #260]	; (800ff28 <xTaskIncrementTick+0x150>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	60fb      	str	r3, [r7, #12]
 800fe26:	4b41      	ldr	r3, [pc, #260]	; (800ff2c <xTaskIncrementTick+0x154>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	4a3f      	ldr	r2, [pc, #252]	; (800ff28 <xTaskIncrementTick+0x150>)
 800fe2c:	6013      	str	r3, [r2, #0]
 800fe2e:	4a3f      	ldr	r2, [pc, #252]	; (800ff2c <xTaskIncrementTick+0x154>)
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	6013      	str	r3, [r2, #0]
 800fe34:	4b3e      	ldr	r3, [pc, #248]	; (800ff30 <xTaskIncrementTick+0x158>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	3301      	adds	r3, #1
 800fe3a:	4a3d      	ldr	r2, [pc, #244]	; (800ff30 <xTaskIncrementTick+0x158>)
 800fe3c:	6013      	str	r3, [r2, #0]
 800fe3e:	f000 f8e3 	bl	8010008 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fe42:	4b3c      	ldr	r3, [pc, #240]	; (800ff34 <xTaskIncrementTick+0x15c>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	693a      	ldr	r2, [r7, #16]
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d349      	bcc.n	800fee0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe4c:	4b36      	ldr	r3, [pc, #216]	; (800ff28 <xTaskIncrementTick+0x150>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d104      	bne.n	800fe60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe56:	4b37      	ldr	r3, [pc, #220]	; (800ff34 <xTaskIncrementTick+0x15c>)
 800fe58:	f04f 32ff 	mov.w	r2, #4294967295
 800fe5c:	601a      	str	r2, [r3, #0]
					break;
 800fe5e:	e03f      	b.n	800fee0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe60:	4b31      	ldr	r3, [pc, #196]	; (800ff28 <xTaskIncrementTick+0x150>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	68db      	ldr	r3, [r3, #12]
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fe70:	693a      	ldr	r2, [r7, #16]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d203      	bcs.n	800fe80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fe78:	4a2e      	ldr	r2, [pc, #184]	; (800ff34 <xTaskIncrementTick+0x15c>)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fe7e:	e02f      	b.n	800fee0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	3304      	adds	r3, #4
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7ff ff7d 	bl	800fd84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d004      	beq.n	800fe9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	3318      	adds	r3, #24
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7ff ff74 	bl	800fd84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fea0:	4b25      	ldr	r3, [pc, #148]	; (800ff38 <xTaskIncrementTick+0x160>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d903      	bls.n	800feb0 <xTaskIncrementTick+0xd8>
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feac:	4a22      	ldr	r2, [pc, #136]	; (800ff38 <xTaskIncrementTick+0x160>)
 800feae:	6013      	str	r3, [r2, #0]
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feb4:	4613      	mov	r3, r2
 800feb6:	009b      	lsls	r3, r3, #2
 800feb8:	4413      	add	r3, r2
 800feba:	009b      	lsls	r3, r3, #2
 800febc:	4a1f      	ldr	r2, [pc, #124]	; (800ff3c <xTaskIncrementTick+0x164>)
 800febe:	441a      	add	r2, r3
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	3304      	adds	r3, #4
 800fec4:	4619      	mov	r1, r3
 800fec6:	4610      	mov	r0, r2
 800fec8:	f7ff ff38 	bl	800fd3c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fed0:	4b1b      	ldr	r3, [pc, #108]	; (800ff40 <xTaskIncrementTick+0x168>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d3b8      	bcc.n	800fe4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800feda:	2301      	movs	r3, #1
 800fedc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fede:	e7b5      	b.n	800fe4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fee0:	4b17      	ldr	r3, [pc, #92]	; (800ff40 <xTaskIncrementTick+0x168>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fee6:	4915      	ldr	r1, [pc, #84]	; (800ff3c <xTaskIncrementTick+0x164>)
 800fee8:	4613      	mov	r3, r2
 800feea:	009b      	lsls	r3, r3, #2
 800feec:	4413      	add	r3, r2
 800feee:	009b      	lsls	r3, r3, #2
 800fef0:	440b      	add	r3, r1
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d901      	bls.n	800fefc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fef8:	2301      	movs	r3, #1
 800fefa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fefc:	4b11      	ldr	r3, [pc, #68]	; (800ff44 <xTaskIncrementTick+0x16c>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d007      	beq.n	800ff14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ff04:	2301      	movs	r3, #1
 800ff06:	617b      	str	r3, [r7, #20]
 800ff08:	e004      	b.n	800ff14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ff0a:	4b0f      	ldr	r3, [pc, #60]	; (800ff48 <xTaskIncrementTick+0x170>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	3301      	adds	r3, #1
 800ff10:	4a0d      	ldr	r2, [pc, #52]	; (800ff48 <xTaskIncrementTick+0x170>)
 800ff12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ff14:	697b      	ldr	r3, [r7, #20]
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3718      	adds	r7, #24
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	240015d0 	.word	0x240015d0
 800ff24:	240015b4 	.word	0x240015b4
 800ff28:	240015ac 	.word	0x240015ac
 800ff2c:	240015b0 	.word	0x240015b0
 800ff30:	240015c8 	.word	0x240015c8
 800ff34:	240015cc 	.word	0x240015cc
 800ff38:	240015b8 	.word	0x240015b8
 800ff3c:	2400114c 	.word	0x2400114c
 800ff40:	24001148 	.word	0x24001148
 800ff44:	240015c4 	.word	0x240015c4
 800ff48:	240015c0 	.word	0x240015c0

0800ff4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ff52:	4b28      	ldr	r3, [pc, #160]	; (800fff4 <vTaskSwitchContext+0xa8>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d003      	beq.n	800ff62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ff5a:	4b27      	ldr	r3, [pc, #156]	; (800fff8 <vTaskSwitchContext+0xac>)
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ff60:	e041      	b.n	800ffe6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ff62:	4b25      	ldr	r3, [pc, #148]	; (800fff8 <vTaskSwitchContext+0xac>)
 800ff64:	2200      	movs	r2, #0
 800ff66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff68:	4b24      	ldr	r3, [pc, #144]	; (800fffc <vTaskSwitchContext+0xb0>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	60fb      	str	r3, [r7, #12]
 800ff6e:	e010      	b.n	800ff92 <vTaskSwitchContext+0x46>
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d10a      	bne.n	800ff8c <vTaskSwitchContext+0x40>
	__asm volatile
 800ff76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff7a:	f383 8811 	msr	BASEPRI, r3
 800ff7e:	f3bf 8f6f 	isb	sy
 800ff82:	f3bf 8f4f 	dsb	sy
 800ff86:	607b      	str	r3, [r7, #4]
}
 800ff88:	bf00      	nop
 800ff8a:	e7fe      	b.n	800ff8a <vTaskSwitchContext+0x3e>
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	3b01      	subs	r3, #1
 800ff90:	60fb      	str	r3, [r7, #12]
 800ff92:	491b      	ldr	r1, [pc, #108]	; (8010000 <vTaskSwitchContext+0xb4>)
 800ff94:	68fa      	ldr	r2, [r7, #12]
 800ff96:	4613      	mov	r3, r2
 800ff98:	009b      	lsls	r3, r3, #2
 800ff9a:	4413      	add	r3, r2
 800ff9c:	009b      	lsls	r3, r3, #2
 800ff9e:	440b      	add	r3, r1
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d0e4      	beq.n	800ff70 <vTaskSwitchContext+0x24>
 800ffa6:	68fa      	ldr	r2, [r7, #12]
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	009b      	lsls	r3, r3, #2
 800ffac:	4413      	add	r3, r2
 800ffae:	009b      	lsls	r3, r3, #2
 800ffb0:	4a13      	ldr	r2, [pc, #76]	; (8010000 <vTaskSwitchContext+0xb4>)
 800ffb2:	4413      	add	r3, r2
 800ffb4:	60bb      	str	r3, [r7, #8]
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	685a      	ldr	r2, [r3, #4]
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	605a      	str	r2, [r3, #4]
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	685a      	ldr	r2, [r3, #4]
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	3308      	adds	r3, #8
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d104      	bne.n	800ffd6 <vTaskSwitchContext+0x8a>
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	685a      	ldr	r2, [r3, #4]
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	605a      	str	r2, [r3, #4]
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	4a09      	ldr	r2, [pc, #36]	; (8010004 <vTaskSwitchContext+0xb8>)
 800ffde:	6013      	str	r3, [r2, #0]
 800ffe0:	4a06      	ldr	r2, [pc, #24]	; (800fffc <vTaskSwitchContext+0xb0>)
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	6013      	str	r3, [r2, #0]
}
 800ffe6:	bf00      	nop
 800ffe8:	3714      	adds	r7, #20
 800ffea:	46bd      	mov	sp, r7
 800ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff0:	4770      	bx	lr
 800fff2:	bf00      	nop
 800fff4:	240015d0 	.word	0x240015d0
 800fff8:	240015c4 	.word	0x240015c4
 800fffc:	240015b8 	.word	0x240015b8
 8010000:	2400114c 	.word	0x2400114c
 8010004:	24001148 	.word	0x24001148

08010008 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801000e:	4b0c      	ldr	r3, [pc, #48]	; (8010040 <prvResetNextTaskUnblockTime+0x38>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d104      	bne.n	8010022 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010018:	4b0a      	ldr	r3, [pc, #40]	; (8010044 <prvResetNextTaskUnblockTime+0x3c>)
 801001a:	f04f 32ff 	mov.w	r2, #4294967295
 801001e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010020:	e008      	b.n	8010034 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010022:	4b07      	ldr	r3, [pc, #28]	; (8010040 <prvResetNextTaskUnblockTime+0x38>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	4a04      	ldr	r2, [pc, #16]	; (8010044 <prvResetNextTaskUnblockTime+0x3c>)
 8010032:	6013      	str	r3, [r2, #0]
}
 8010034:	bf00      	nop
 8010036:	370c      	adds	r7, #12
 8010038:	46bd      	mov	sp, r7
 801003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003e:	4770      	bx	lr
 8010040:	240015ac 	.word	0x240015ac
 8010044:	240015cc 	.word	0x240015cc

08010048 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801004e:	4b0b      	ldr	r3, [pc, #44]	; (801007c <xTaskGetSchedulerState+0x34>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d102      	bne.n	801005c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010056:	2301      	movs	r3, #1
 8010058:	607b      	str	r3, [r7, #4]
 801005a:	e008      	b.n	801006e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801005c:	4b08      	ldr	r3, [pc, #32]	; (8010080 <xTaskGetSchedulerState+0x38>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d102      	bne.n	801006a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010064:	2302      	movs	r3, #2
 8010066:	607b      	str	r3, [r7, #4]
 8010068:	e001      	b.n	801006e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801006a:	2300      	movs	r3, #0
 801006c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801006e:	687b      	ldr	r3, [r7, #4]
	}
 8010070:	4618      	mov	r0, r3
 8010072:	370c      	adds	r7, #12
 8010074:	46bd      	mov	sp, r7
 8010076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007a:	4770      	bx	lr
 801007c:	240015bc 	.word	0x240015bc
 8010080:	240015d0 	.word	0x240015d0
	...

08010090 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010090:	4b07      	ldr	r3, [pc, #28]	; (80100b0 <pxCurrentTCBConst2>)
 8010092:	6819      	ldr	r1, [r3, #0]
 8010094:	6808      	ldr	r0, [r1, #0]
 8010096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801009a:	f380 8809 	msr	PSP, r0
 801009e:	f3bf 8f6f 	isb	sy
 80100a2:	f04f 0000 	mov.w	r0, #0
 80100a6:	f380 8811 	msr	BASEPRI, r0
 80100aa:	4770      	bx	lr
 80100ac:	f3af 8000 	nop.w

080100b0 <pxCurrentTCBConst2>:
 80100b0:	24001148 	.word	0x24001148
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80100b4:	bf00      	nop
 80100b6:	bf00      	nop
	...

080100c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80100c0:	f3ef 8009 	mrs	r0, PSP
 80100c4:	f3bf 8f6f 	isb	sy
 80100c8:	4b15      	ldr	r3, [pc, #84]	; (8010120 <pxCurrentTCBConst>)
 80100ca:	681a      	ldr	r2, [r3, #0]
 80100cc:	f01e 0f10 	tst.w	lr, #16
 80100d0:	bf08      	it	eq
 80100d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80100d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100da:	6010      	str	r0, [r2, #0]
 80100dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80100e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80100e4:	f380 8811 	msr	BASEPRI, r0
 80100e8:	f3bf 8f4f 	dsb	sy
 80100ec:	f3bf 8f6f 	isb	sy
 80100f0:	f7ff ff2c 	bl	800ff4c <vTaskSwitchContext>
 80100f4:	f04f 0000 	mov.w	r0, #0
 80100f8:	f380 8811 	msr	BASEPRI, r0
 80100fc:	bc09      	pop	{r0, r3}
 80100fe:	6819      	ldr	r1, [r3, #0]
 8010100:	6808      	ldr	r0, [r1, #0]
 8010102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010106:	f01e 0f10 	tst.w	lr, #16
 801010a:	bf08      	it	eq
 801010c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010110:	f380 8809 	msr	PSP, r0
 8010114:	f3bf 8f6f 	isb	sy
 8010118:	4770      	bx	lr
 801011a:	bf00      	nop
 801011c:	f3af 8000 	nop.w

08010120 <pxCurrentTCBConst>:
 8010120:	24001148 	.word	0x24001148
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010124:	bf00      	nop
 8010126:	bf00      	nop

08010128 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
	__asm volatile
 801012e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010132:	f383 8811 	msr	BASEPRI, r3
 8010136:	f3bf 8f6f 	isb	sy
 801013a:	f3bf 8f4f 	dsb	sy
 801013e:	607b      	str	r3, [r7, #4]
}
 8010140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010142:	f7ff fe49 	bl	800fdd8 <xTaskIncrementTick>
 8010146:	4603      	mov	r3, r0
 8010148:	2b00      	cmp	r3, #0
 801014a:	d003      	beq.n	8010154 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801014c:	4b06      	ldr	r3, [pc, #24]	; (8010168 <xPortSysTickHandler+0x40>)
 801014e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010152:	601a      	str	r2, [r3, #0]
 8010154:	2300      	movs	r3, #0
 8010156:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801015e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010160:	bf00      	nop
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}
 8010168:	e000ed04 	.word	0xe000ed04

0801016c <std>:
 801016c:	2300      	movs	r3, #0
 801016e:	b510      	push	{r4, lr}
 8010170:	4604      	mov	r4, r0
 8010172:	e9c0 3300 	strd	r3, r3, [r0]
 8010176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801017a:	6083      	str	r3, [r0, #8]
 801017c:	8181      	strh	r1, [r0, #12]
 801017e:	6643      	str	r3, [r0, #100]	; 0x64
 8010180:	81c2      	strh	r2, [r0, #14]
 8010182:	6183      	str	r3, [r0, #24]
 8010184:	4619      	mov	r1, r3
 8010186:	2208      	movs	r2, #8
 8010188:	305c      	adds	r0, #92	; 0x5c
 801018a:	f000 f9a2 	bl	80104d2 <memset>
 801018e:	4b0d      	ldr	r3, [pc, #52]	; (80101c4 <std+0x58>)
 8010190:	6263      	str	r3, [r4, #36]	; 0x24
 8010192:	4b0d      	ldr	r3, [pc, #52]	; (80101c8 <std+0x5c>)
 8010194:	62a3      	str	r3, [r4, #40]	; 0x28
 8010196:	4b0d      	ldr	r3, [pc, #52]	; (80101cc <std+0x60>)
 8010198:	62e3      	str	r3, [r4, #44]	; 0x2c
 801019a:	4b0d      	ldr	r3, [pc, #52]	; (80101d0 <std+0x64>)
 801019c:	6323      	str	r3, [r4, #48]	; 0x30
 801019e:	4b0d      	ldr	r3, [pc, #52]	; (80101d4 <std+0x68>)
 80101a0:	6224      	str	r4, [r4, #32]
 80101a2:	429c      	cmp	r4, r3
 80101a4:	d006      	beq.n	80101b4 <std+0x48>
 80101a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80101aa:	4294      	cmp	r4, r2
 80101ac:	d002      	beq.n	80101b4 <std+0x48>
 80101ae:	33d0      	adds	r3, #208	; 0xd0
 80101b0:	429c      	cmp	r4, r3
 80101b2:	d105      	bne.n	80101c0 <std+0x54>
 80101b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80101b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101bc:	f000 ba02 	b.w	80105c4 <__retarget_lock_init_recursive>
 80101c0:	bd10      	pop	{r4, pc}
 80101c2:	bf00      	nop
 80101c4:	0801044d 	.word	0x0801044d
 80101c8:	0801046f 	.word	0x0801046f
 80101cc:	080104a7 	.word	0x080104a7
 80101d0:	080104cb 	.word	0x080104cb
 80101d4:	240015d4 	.word	0x240015d4

080101d8 <stdio_exit_handler>:
 80101d8:	4a02      	ldr	r2, [pc, #8]	; (80101e4 <stdio_exit_handler+0xc>)
 80101da:	4903      	ldr	r1, [pc, #12]	; (80101e8 <stdio_exit_handler+0x10>)
 80101dc:	4803      	ldr	r0, [pc, #12]	; (80101ec <stdio_exit_handler+0x14>)
 80101de:	f000 b869 	b.w	80102b4 <_fwalk_sglue>
 80101e2:	bf00      	nop
 80101e4:	24000058 	.word	0x24000058
 80101e8:	080108d9 	.word	0x080108d9
 80101ec:	24000064 	.word	0x24000064

080101f0 <cleanup_stdio>:
 80101f0:	6841      	ldr	r1, [r0, #4]
 80101f2:	4b0c      	ldr	r3, [pc, #48]	; (8010224 <cleanup_stdio+0x34>)
 80101f4:	4299      	cmp	r1, r3
 80101f6:	b510      	push	{r4, lr}
 80101f8:	4604      	mov	r4, r0
 80101fa:	d001      	beq.n	8010200 <cleanup_stdio+0x10>
 80101fc:	f000 fb6c 	bl	80108d8 <_fflush_r>
 8010200:	68a1      	ldr	r1, [r4, #8]
 8010202:	4b09      	ldr	r3, [pc, #36]	; (8010228 <cleanup_stdio+0x38>)
 8010204:	4299      	cmp	r1, r3
 8010206:	d002      	beq.n	801020e <cleanup_stdio+0x1e>
 8010208:	4620      	mov	r0, r4
 801020a:	f000 fb65 	bl	80108d8 <_fflush_r>
 801020e:	68e1      	ldr	r1, [r4, #12]
 8010210:	4b06      	ldr	r3, [pc, #24]	; (801022c <cleanup_stdio+0x3c>)
 8010212:	4299      	cmp	r1, r3
 8010214:	d004      	beq.n	8010220 <cleanup_stdio+0x30>
 8010216:	4620      	mov	r0, r4
 8010218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801021c:	f000 bb5c 	b.w	80108d8 <_fflush_r>
 8010220:	bd10      	pop	{r4, pc}
 8010222:	bf00      	nop
 8010224:	240015d4 	.word	0x240015d4
 8010228:	2400163c 	.word	0x2400163c
 801022c:	240016a4 	.word	0x240016a4

08010230 <global_stdio_init.part.0>:
 8010230:	b510      	push	{r4, lr}
 8010232:	4b0b      	ldr	r3, [pc, #44]	; (8010260 <global_stdio_init.part.0+0x30>)
 8010234:	4c0b      	ldr	r4, [pc, #44]	; (8010264 <global_stdio_init.part.0+0x34>)
 8010236:	4a0c      	ldr	r2, [pc, #48]	; (8010268 <global_stdio_init.part.0+0x38>)
 8010238:	601a      	str	r2, [r3, #0]
 801023a:	4620      	mov	r0, r4
 801023c:	2200      	movs	r2, #0
 801023e:	2104      	movs	r1, #4
 8010240:	f7ff ff94 	bl	801016c <std>
 8010244:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010248:	2201      	movs	r2, #1
 801024a:	2109      	movs	r1, #9
 801024c:	f7ff ff8e 	bl	801016c <std>
 8010250:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010254:	2202      	movs	r2, #2
 8010256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801025a:	2112      	movs	r1, #18
 801025c:	f7ff bf86 	b.w	801016c <std>
 8010260:	2400170c 	.word	0x2400170c
 8010264:	240015d4 	.word	0x240015d4
 8010268:	080101d9 	.word	0x080101d9

0801026c <__sfp_lock_acquire>:
 801026c:	4801      	ldr	r0, [pc, #4]	; (8010274 <__sfp_lock_acquire+0x8>)
 801026e:	f000 b9aa 	b.w	80105c6 <__retarget_lock_acquire_recursive>
 8010272:	bf00      	nop
 8010274:	24001715 	.word	0x24001715

08010278 <__sfp_lock_release>:
 8010278:	4801      	ldr	r0, [pc, #4]	; (8010280 <__sfp_lock_release+0x8>)
 801027a:	f000 b9a5 	b.w	80105c8 <__retarget_lock_release_recursive>
 801027e:	bf00      	nop
 8010280:	24001715 	.word	0x24001715

08010284 <__sinit>:
 8010284:	b510      	push	{r4, lr}
 8010286:	4604      	mov	r4, r0
 8010288:	f7ff fff0 	bl	801026c <__sfp_lock_acquire>
 801028c:	6a23      	ldr	r3, [r4, #32]
 801028e:	b11b      	cbz	r3, 8010298 <__sinit+0x14>
 8010290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010294:	f7ff bff0 	b.w	8010278 <__sfp_lock_release>
 8010298:	4b04      	ldr	r3, [pc, #16]	; (80102ac <__sinit+0x28>)
 801029a:	6223      	str	r3, [r4, #32]
 801029c:	4b04      	ldr	r3, [pc, #16]	; (80102b0 <__sinit+0x2c>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d1f5      	bne.n	8010290 <__sinit+0xc>
 80102a4:	f7ff ffc4 	bl	8010230 <global_stdio_init.part.0>
 80102a8:	e7f2      	b.n	8010290 <__sinit+0xc>
 80102aa:	bf00      	nop
 80102ac:	080101f1 	.word	0x080101f1
 80102b0:	2400170c 	.word	0x2400170c

080102b4 <_fwalk_sglue>:
 80102b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102b8:	4607      	mov	r7, r0
 80102ba:	4688      	mov	r8, r1
 80102bc:	4614      	mov	r4, r2
 80102be:	2600      	movs	r6, #0
 80102c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80102c4:	f1b9 0901 	subs.w	r9, r9, #1
 80102c8:	d505      	bpl.n	80102d6 <_fwalk_sglue+0x22>
 80102ca:	6824      	ldr	r4, [r4, #0]
 80102cc:	2c00      	cmp	r4, #0
 80102ce:	d1f7      	bne.n	80102c0 <_fwalk_sglue+0xc>
 80102d0:	4630      	mov	r0, r6
 80102d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102d6:	89ab      	ldrh	r3, [r5, #12]
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d907      	bls.n	80102ec <_fwalk_sglue+0x38>
 80102dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80102e0:	3301      	adds	r3, #1
 80102e2:	d003      	beq.n	80102ec <_fwalk_sglue+0x38>
 80102e4:	4629      	mov	r1, r5
 80102e6:	4638      	mov	r0, r7
 80102e8:	47c0      	blx	r8
 80102ea:	4306      	orrs	r6, r0
 80102ec:	3568      	adds	r5, #104	; 0x68
 80102ee:	e7e9      	b.n	80102c4 <_fwalk_sglue+0x10>

080102f0 <setvbuf>:
 80102f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80102f4:	461d      	mov	r5, r3
 80102f6:	4b54      	ldr	r3, [pc, #336]	; (8010448 <setvbuf+0x158>)
 80102f8:	681f      	ldr	r7, [r3, #0]
 80102fa:	4604      	mov	r4, r0
 80102fc:	460e      	mov	r6, r1
 80102fe:	4690      	mov	r8, r2
 8010300:	b127      	cbz	r7, 801030c <setvbuf+0x1c>
 8010302:	6a3b      	ldr	r3, [r7, #32]
 8010304:	b913      	cbnz	r3, 801030c <setvbuf+0x1c>
 8010306:	4638      	mov	r0, r7
 8010308:	f7ff ffbc 	bl	8010284 <__sinit>
 801030c:	f1b8 0f02 	cmp.w	r8, #2
 8010310:	d006      	beq.n	8010320 <setvbuf+0x30>
 8010312:	f1b8 0f01 	cmp.w	r8, #1
 8010316:	f200 8094 	bhi.w	8010442 <setvbuf+0x152>
 801031a:	2d00      	cmp	r5, #0
 801031c:	f2c0 8091 	blt.w	8010442 <setvbuf+0x152>
 8010320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010322:	07da      	lsls	r2, r3, #31
 8010324:	d405      	bmi.n	8010332 <setvbuf+0x42>
 8010326:	89a3      	ldrh	r3, [r4, #12]
 8010328:	059b      	lsls	r3, r3, #22
 801032a:	d402      	bmi.n	8010332 <setvbuf+0x42>
 801032c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801032e:	f000 f94a 	bl	80105c6 <__retarget_lock_acquire_recursive>
 8010332:	4621      	mov	r1, r4
 8010334:	4638      	mov	r0, r7
 8010336:	f000 facf 	bl	80108d8 <_fflush_r>
 801033a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801033c:	b141      	cbz	r1, 8010350 <setvbuf+0x60>
 801033e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010342:	4299      	cmp	r1, r3
 8010344:	d002      	beq.n	801034c <setvbuf+0x5c>
 8010346:	4638      	mov	r0, r7
 8010348:	f000 f940 	bl	80105cc <_free_r>
 801034c:	2300      	movs	r3, #0
 801034e:	6363      	str	r3, [r4, #52]	; 0x34
 8010350:	2300      	movs	r3, #0
 8010352:	61a3      	str	r3, [r4, #24]
 8010354:	6063      	str	r3, [r4, #4]
 8010356:	89a3      	ldrh	r3, [r4, #12]
 8010358:	0618      	lsls	r0, r3, #24
 801035a:	d503      	bpl.n	8010364 <setvbuf+0x74>
 801035c:	6921      	ldr	r1, [r4, #16]
 801035e:	4638      	mov	r0, r7
 8010360:	f000 f934 	bl	80105cc <_free_r>
 8010364:	89a3      	ldrh	r3, [r4, #12]
 8010366:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801036a:	f023 0303 	bic.w	r3, r3, #3
 801036e:	f1b8 0f02 	cmp.w	r8, #2
 8010372:	81a3      	strh	r3, [r4, #12]
 8010374:	d05f      	beq.n	8010436 <setvbuf+0x146>
 8010376:	ab01      	add	r3, sp, #4
 8010378:	466a      	mov	r2, sp
 801037a:	4621      	mov	r1, r4
 801037c:	4638      	mov	r0, r7
 801037e:	f000 fad3 	bl	8010928 <__swhatbuf_r>
 8010382:	89a3      	ldrh	r3, [r4, #12]
 8010384:	4318      	orrs	r0, r3
 8010386:	81a0      	strh	r0, [r4, #12]
 8010388:	bb2d      	cbnz	r5, 80103d6 <setvbuf+0xe6>
 801038a:	9d00      	ldr	r5, [sp, #0]
 801038c:	4628      	mov	r0, r5
 801038e:	f000 f969 	bl	8010664 <malloc>
 8010392:	4606      	mov	r6, r0
 8010394:	2800      	cmp	r0, #0
 8010396:	d150      	bne.n	801043a <setvbuf+0x14a>
 8010398:	f8dd 9000 	ldr.w	r9, [sp]
 801039c:	45a9      	cmp	r9, r5
 801039e:	d13e      	bne.n	801041e <setvbuf+0x12e>
 80103a0:	f04f 35ff 	mov.w	r5, #4294967295
 80103a4:	2200      	movs	r2, #0
 80103a6:	60a2      	str	r2, [r4, #8]
 80103a8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80103ac:	6022      	str	r2, [r4, #0]
 80103ae:	6122      	str	r2, [r4, #16]
 80103b0:	2201      	movs	r2, #1
 80103b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103b6:	6162      	str	r2, [r4, #20]
 80103b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80103ba:	f043 0302 	orr.w	r3, r3, #2
 80103be:	07d1      	lsls	r1, r2, #31
 80103c0:	81a3      	strh	r3, [r4, #12]
 80103c2:	d404      	bmi.n	80103ce <setvbuf+0xde>
 80103c4:	059b      	lsls	r3, r3, #22
 80103c6:	d402      	bmi.n	80103ce <setvbuf+0xde>
 80103c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103ca:	f000 f8fd 	bl	80105c8 <__retarget_lock_release_recursive>
 80103ce:	4628      	mov	r0, r5
 80103d0:	b003      	add	sp, #12
 80103d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103d6:	2e00      	cmp	r6, #0
 80103d8:	d0d8      	beq.n	801038c <setvbuf+0x9c>
 80103da:	6a3b      	ldr	r3, [r7, #32]
 80103dc:	b913      	cbnz	r3, 80103e4 <setvbuf+0xf4>
 80103de:	4638      	mov	r0, r7
 80103e0:	f7ff ff50 	bl	8010284 <__sinit>
 80103e4:	f1b8 0f01 	cmp.w	r8, #1
 80103e8:	bf08      	it	eq
 80103ea:	89a3      	ldrheq	r3, [r4, #12]
 80103ec:	6026      	str	r6, [r4, #0]
 80103ee:	bf04      	itt	eq
 80103f0:	f043 0301 	orreq.w	r3, r3, #1
 80103f4:	81a3      	strheq	r3, [r4, #12]
 80103f6:	89a3      	ldrh	r3, [r4, #12]
 80103f8:	f013 0208 	ands.w	r2, r3, #8
 80103fc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8010400:	d01d      	beq.n	801043e <setvbuf+0x14e>
 8010402:	07da      	lsls	r2, r3, #31
 8010404:	bf41      	itttt	mi
 8010406:	2200      	movmi	r2, #0
 8010408:	426d      	negmi	r5, r5
 801040a:	60a2      	strmi	r2, [r4, #8]
 801040c:	61a5      	strmi	r5, [r4, #24]
 801040e:	bf58      	it	pl
 8010410:	60a5      	strpl	r5, [r4, #8]
 8010412:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8010414:	f015 0501 	ands.w	r5, r5, #1
 8010418:	d0d4      	beq.n	80103c4 <setvbuf+0xd4>
 801041a:	2500      	movs	r5, #0
 801041c:	e7d7      	b.n	80103ce <setvbuf+0xde>
 801041e:	4648      	mov	r0, r9
 8010420:	f000 f920 	bl	8010664 <malloc>
 8010424:	4606      	mov	r6, r0
 8010426:	2800      	cmp	r0, #0
 8010428:	d0ba      	beq.n	80103a0 <setvbuf+0xb0>
 801042a:	89a3      	ldrh	r3, [r4, #12]
 801042c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010430:	81a3      	strh	r3, [r4, #12]
 8010432:	464d      	mov	r5, r9
 8010434:	e7d1      	b.n	80103da <setvbuf+0xea>
 8010436:	2500      	movs	r5, #0
 8010438:	e7b4      	b.n	80103a4 <setvbuf+0xb4>
 801043a:	46a9      	mov	r9, r5
 801043c:	e7f5      	b.n	801042a <setvbuf+0x13a>
 801043e:	60a2      	str	r2, [r4, #8]
 8010440:	e7e7      	b.n	8010412 <setvbuf+0x122>
 8010442:	f04f 35ff 	mov.w	r5, #4294967295
 8010446:	e7c2      	b.n	80103ce <setvbuf+0xde>
 8010448:	240000b0 	.word	0x240000b0

0801044c <__sread>:
 801044c:	b510      	push	{r4, lr}
 801044e:	460c      	mov	r4, r1
 8010450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010454:	f000 f868 	bl	8010528 <_read_r>
 8010458:	2800      	cmp	r0, #0
 801045a:	bfab      	itete	ge
 801045c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801045e:	89a3      	ldrhlt	r3, [r4, #12]
 8010460:	181b      	addge	r3, r3, r0
 8010462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010466:	bfac      	ite	ge
 8010468:	6563      	strge	r3, [r4, #84]	; 0x54
 801046a:	81a3      	strhlt	r3, [r4, #12]
 801046c:	bd10      	pop	{r4, pc}

0801046e <__swrite>:
 801046e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010472:	461f      	mov	r7, r3
 8010474:	898b      	ldrh	r3, [r1, #12]
 8010476:	05db      	lsls	r3, r3, #23
 8010478:	4605      	mov	r5, r0
 801047a:	460c      	mov	r4, r1
 801047c:	4616      	mov	r6, r2
 801047e:	d505      	bpl.n	801048c <__swrite+0x1e>
 8010480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010484:	2302      	movs	r3, #2
 8010486:	2200      	movs	r2, #0
 8010488:	f000 f83c 	bl	8010504 <_lseek_r>
 801048c:	89a3      	ldrh	r3, [r4, #12]
 801048e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010496:	81a3      	strh	r3, [r4, #12]
 8010498:	4632      	mov	r2, r6
 801049a:	463b      	mov	r3, r7
 801049c:	4628      	mov	r0, r5
 801049e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104a2:	f000 b853 	b.w	801054c <_write_r>

080104a6 <__sseek>:
 80104a6:	b510      	push	{r4, lr}
 80104a8:	460c      	mov	r4, r1
 80104aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104ae:	f000 f829 	bl	8010504 <_lseek_r>
 80104b2:	1c43      	adds	r3, r0, #1
 80104b4:	89a3      	ldrh	r3, [r4, #12]
 80104b6:	bf15      	itete	ne
 80104b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80104ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80104be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80104c2:	81a3      	strheq	r3, [r4, #12]
 80104c4:	bf18      	it	ne
 80104c6:	81a3      	strhne	r3, [r4, #12]
 80104c8:	bd10      	pop	{r4, pc}

080104ca <__sclose>:
 80104ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104ce:	f000 b809 	b.w	80104e4 <_close_r>

080104d2 <memset>:
 80104d2:	4402      	add	r2, r0
 80104d4:	4603      	mov	r3, r0
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d100      	bne.n	80104dc <memset+0xa>
 80104da:	4770      	bx	lr
 80104dc:	f803 1b01 	strb.w	r1, [r3], #1
 80104e0:	e7f9      	b.n	80104d6 <memset+0x4>
	...

080104e4 <_close_r>:
 80104e4:	b538      	push	{r3, r4, r5, lr}
 80104e6:	4d06      	ldr	r5, [pc, #24]	; (8010500 <_close_r+0x1c>)
 80104e8:	2300      	movs	r3, #0
 80104ea:	4604      	mov	r4, r0
 80104ec:	4608      	mov	r0, r1
 80104ee:	602b      	str	r3, [r5, #0]
 80104f0:	f7f2 fa0e 	bl	8002910 <_close>
 80104f4:	1c43      	adds	r3, r0, #1
 80104f6:	d102      	bne.n	80104fe <_close_r+0x1a>
 80104f8:	682b      	ldr	r3, [r5, #0]
 80104fa:	b103      	cbz	r3, 80104fe <_close_r+0x1a>
 80104fc:	6023      	str	r3, [r4, #0]
 80104fe:	bd38      	pop	{r3, r4, r5, pc}
 8010500:	24001710 	.word	0x24001710

08010504 <_lseek_r>:
 8010504:	b538      	push	{r3, r4, r5, lr}
 8010506:	4d07      	ldr	r5, [pc, #28]	; (8010524 <_lseek_r+0x20>)
 8010508:	4604      	mov	r4, r0
 801050a:	4608      	mov	r0, r1
 801050c:	4611      	mov	r1, r2
 801050e:	2200      	movs	r2, #0
 8010510:	602a      	str	r2, [r5, #0]
 8010512:	461a      	mov	r2, r3
 8010514:	f7f2 fa13 	bl	800293e <_lseek>
 8010518:	1c43      	adds	r3, r0, #1
 801051a:	d102      	bne.n	8010522 <_lseek_r+0x1e>
 801051c:	682b      	ldr	r3, [r5, #0]
 801051e:	b103      	cbz	r3, 8010522 <_lseek_r+0x1e>
 8010520:	6023      	str	r3, [r4, #0]
 8010522:	bd38      	pop	{r3, r4, r5, pc}
 8010524:	24001710 	.word	0x24001710

08010528 <_read_r>:
 8010528:	b538      	push	{r3, r4, r5, lr}
 801052a:	4d07      	ldr	r5, [pc, #28]	; (8010548 <_read_r+0x20>)
 801052c:	4604      	mov	r4, r0
 801052e:	4608      	mov	r0, r1
 8010530:	4611      	mov	r1, r2
 8010532:	2200      	movs	r2, #0
 8010534:	602a      	str	r2, [r5, #0]
 8010536:	461a      	mov	r2, r3
 8010538:	f7f2 fa2e 	bl	8002998 <_read>
 801053c:	1c43      	adds	r3, r0, #1
 801053e:	d102      	bne.n	8010546 <_read_r+0x1e>
 8010540:	682b      	ldr	r3, [r5, #0]
 8010542:	b103      	cbz	r3, 8010546 <_read_r+0x1e>
 8010544:	6023      	str	r3, [r4, #0]
 8010546:	bd38      	pop	{r3, r4, r5, pc}
 8010548:	24001710 	.word	0x24001710

0801054c <_write_r>:
 801054c:	b538      	push	{r3, r4, r5, lr}
 801054e:	4d07      	ldr	r5, [pc, #28]	; (801056c <_write_r+0x20>)
 8010550:	4604      	mov	r4, r0
 8010552:	4608      	mov	r0, r1
 8010554:	4611      	mov	r1, r2
 8010556:	2200      	movs	r2, #0
 8010558:	602a      	str	r2, [r5, #0]
 801055a:	461a      	mov	r2, r3
 801055c:	f7f2 fa44 	bl	80029e8 <_write>
 8010560:	1c43      	adds	r3, r0, #1
 8010562:	d102      	bne.n	801056a <_write_r+0x1e>
 8010564:	682b      	ldr	r3, [r5, #0]
 8010566:	b103      	cbz	r3, 801056a <_write_r+0x1e>
 8010568:	6023      	str	r3, [r4, #0]
 801056a:	bd38      	pop	{r3, r4, r5, pc}
 801056c:	24001710 	.word	0x24001710

08010570 <__errno>:
 8010570:	4b01      	ldr	r3, [pc, #4]	; (8010578 <__errno+0x8>)
 8010572:	6818      	ldr	r0, [r3, #0]
 8010574:	4770      	bx	lr
 8010576:	bf00      	nop
 8010578:	240000b0 	.word	0x240000b0

0801057c <__libc_init_array>:
 801057c:	b570      	push	{r4, r5, r6, lr}
 801057e:	4d0d      	ldr	r5, [pc, #52]	; (80105b4 <__libc_init_array+0x38>)
 8010580:	4c0d      	ldr	r4, [pc, #52]	; (80105b8 <__libc_init_array+0x3c>)
 8010582:	1b64      	subs	r4, r4, r5
 8010584:	10a4      	asrs	r4, r4, #2
 8010586:	2600      	movs	r6, #0
 8010588:	42a6      	cmp	r6, r4
 801058a:	d109      	bne.n	80105a0 <__libc_init_array+0x24>
 801058c:	4d0b      	ldr	r5, [pc, #44]	; (80105bc <__libc_init_array+0x40>)
 801058e:	4c0c      	ldr	r4, [pc, #48]	; (80105c0 <__libc_init_array+0x44>)
 8010590:	f000 fa12 	bl	80109b8 <_init>
 8010594:	1b64      	subs	r4, r4, r5
 8010596:	10a4      	asrs	r4, r4, #2
 8010598:	2600      	movs	r6, #0
 801059a:	42a6      	cmp	r6, r4
 801059c:	d105      	bne.n	80105aa <__libc_init_array+0x2e>
 801059e:	bd70      	pop	{r4, r5, r6, pc}
 80105a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80105a4:	4798      	blx	r3
 80105a6:	3601      	adds	r6, #1
 80105a8:	e7ee      	b.n	8010588 <__libc_init_array+0xc>
 80105aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80105ae:	4798      	blx	r3
 80105b0:	3601      	adds	r6, #1
 80105b2:	e7f2      	b.n	801059a <__libc_init_array+0x1e>
 80105b4:	08010ac4 	.word	0x08010ac4
 80105b8:	08010ac4 	.word	0x08010ac4
 80105bc:	08010ac4 	.word	0x08010ac4
 80105c0:	08010ac8 	.word	0x08010ac8

080105c4 <__retarget_lock_init_recursive>:
 80105c4:	4770      	bx	lr

080105c6 <__retarget_lock_acquire_recursive>:
 80105c6:	4770      	bx	lr

080105c8 <__retarget_lock_release_recursive>:
 80105c8:	4770      	bx	lr
	...

080105cc <_free_r>:
 80105cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105ce:	2900      	cmp	r1, #0
 80105d0:	d044      	beq.n	801065c <_free_r+0x90>
 80105d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105d6:	9001      	str	r0, [sp, #4]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	f1a1 0404 	sub.w	r4, r1, #4
 80105de:	bfb8      	it	lt
 80105e0:	18e4      	addlt	r4, r4, r3
 80105e2:	f000 f8e7 	bl	80107b4 <__malloc_lock>
 80105e6:	4a1e      	ldr	r2, [pc, #120]	; (8010660 <_free_r+0x94>)
 80105e8:	9801      	ldr	r0, [sp, #4]
 80105ea:	6813      	ldr	r3, [r2, #0]
 80105ec:	b933      	cbnz	r3, 80105fc <_free_r+0x30>
 80105ee:	6063      	str	r3, [r4, #4]
 80105f0:	6014      	str	r4, [r2, #0]
 80105f2:	b003      	add	sp, #12
 80105f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105f8:	f000 b8e2 	b.w	80107c0 <__malloc_unlock>
 80105fc:	42a3      	cmp	r3, r4
 80105fe:	d908      	bls.n	8010612 <_free_r+0x46>
 8010600:	6825      	ldr	r5, [r4, #0]
 8010602:	1961      	adds	r1, r4, r5
 8010604:	428b      	cmp	r3, r1
 8010606:	bf01      	itttt	eq
 8010608:	6819      	ldreq	r1, [r3, #0]
 801060a:	685b      	ldreq	r3, [r3, #4]
 801060c:	1949      	addeq	r1, r1, r5
 801060e:	6021      	streq	r1, [r4, #0]
 8010610:	e7ed      	b.n	80105ee <_free_r+0x22>
 8010612:	461a      	mov	r2, r3
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	b10b      	cbz	r3, 801061c <_free_r+0x50>
 8010618:	42a3      	cmp	r3, r4
 801061a:	d9fa      	bls.n	8010612 <_free_r+0x46>
 801061c:	6811      	ldr	r1, [r2, #0]
 801061e:	1855      	adds	r5, r2, r1
 8010620:	42a5      	cmp	r5, r4
 8010622:	d10b      	bne.n	801063c <_free_r+0x70>
 8010624:	6824      	ldr	r4, [r4, #0]
 8010626:	4421      	add	r1, r4
 8010628:	1854      	adds	r4, r2, r1
 801062a:	42a3      	cmp	r3, r4
 801062c:	6011      	str	r1, [r2, #0]
 801062e:	d1e0      	bne.n	80105f2 <_free_r+0x26>
 8010630:	681c      	ldr	r4, [r3, #0]
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	6053      	str	r3, [r2, #4]
 8010636:	440c      	add	r4, r1
 8010638:	6014      	str	r4, [r2, #0]
 801063a:	e7da      	b.n	80105f2 <_free_r+0x26>
 801063c:	d902      	bls.n	8010644 <_free_r+0x78>
 801063e:	230c      	movs	r3, #12
 8010640:	6003      	str	r3, [r0, #0]
 8010642:	e7d6      	b.n	80105f2 <_free_r+0x26>
 8010644:	6825      	ldr	r5, [r4, #0]
 8010646:	1961      	adds	r1, r4, r5
 8010648:	428b      	cmp	r3, r1
 801064a:	bf04      	itt	eq
 801064c:	6819      	ldreq	r1, [r3, #0]
 801064e:	685b      	ldreq	r3, [r3, #4]
 8010650:	6063      	str	r3, [r4, #4]
 8010652:	bf04      	itt	eq
 8010654:	1949      	addeq	r1, r1, r5
 8010656:	6021      	streq	r1, [r4, #0]
 8010658:	6054      	str	r4, [r2, #4]
 801065a:	e7ca      	b.n	80105f2 <_free_r+0x26>
 801065c:	b003      	add	sp, #12
 801065e:	bd30      	pop	{r4, r5, pc}
 8010660:	24001718 	.word	0x24001718

08010664 <malloc>:
 8010664:	4b02      	ldr	r3, [pc, #8]	; (8010670 <malloc+0xc>)
 8010666:	4601      	mov	r1, r0
 8010668:	6818      	ldr	r0, [r3, #0]
 801066a:	f000 b823 	b.w	80106b4 <_malloc_r>
 801066e:	bf00      	nop
 8010670:	240000b0 	.word	0x240000b0

08010674 <sbrk_aligned>:
 8010674:	b570      	push	{r4, r5, r6, lr}
 8010676:	4e0e      	ldr	r6, [pc, #56]	; (80106b0 <sbrk_aligned+0x3c>)
 8010678:	460c      	mov	r4, r1
 801067a:	6831      	ldr	r1, [r6, #0]
 801067c:	4605      	mov	r5, r0
 801067e:	b911      	cbnz	r1, 8010686 <sbrk_aligned+0x12>
 8010680:	f000 f98a 	bl	8010998 <_sbrk_r>
 8010684:	6030      	str	r0, [r6, #0]
 8010686:	4621      	mov	r1, r4
 8010688:	4628      	mov	r0, r5
 801068a:	f000 f985 	bl	8010998 <_sbrk_r>
 801068e:	1c43      	adds	r3, r0, #1
 8010690:	d00a      	beq.n	80106a8 <sbrk_aligned+0x34>
 8010692:	1cc4      	adds	r4, r0, #3
 8010694:	f024 0403 	bic.w	r4, r4, #3
 8010698:	42a0      	cmp	r0, r4
 801069a:	d007      	beq.n	80106ac <sbrk_aligned+0x38>
 801069c:	1a21      	subs	r1, r4, r0
 801069e:	4628      	mov	r0, r5
 80106a0:	f000 f97a 	bl	8010998 <_sbrk_r>
 80106a4:	3001      	adds	r0, #1
 80106a6:	d101      	bne.n	80106ac <sbrk_aligned+0x38>
 80106a8:	f04f 34ff 	mov.w	r4, #4294967295
 80106ac:	4620      	mov	r0, r4
 80106ae:	bd70      	pop	{r4, r5, r6, pc}
 80106b0:	2400171c 	.word	0x2400171c

080106b4 <_malloc_r>:
 80106b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106b8:	1ccd      	adds	r5, r1, #3
 80106ba:	f025 0503 	bic.w	r5, r5, #3
 80106be:	3508      	adds	r5, #8
 80106c0:	2d0c      	cmp	r5, #12
 80106c2:	bf38      	it	cc
 80106c4:	250c      	movcc	r5, #12
 80106c6:	2d00      	cmp	r5, #0
 80106c8:	4607      	mov	r7, r0
 80106ca:	db01      	blt.n	80106d0 <_malloc_r+0x1c>
 80106cc:	42a9      	cmp	r1, r5
 80106ce:	d905      	bls.n	80106dc <_malloc_r+0x28>
 80106d0:	230c      	movs	r3, #12
 80106d2:	603b      	str	r3, [r7, #0]
 80106d4:	2600      	movs	r6, #0
 80106d6:	4630      	mov	r0, r6
 80106d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80107b0 <_malloc_r+0xfc>
 80106e0:	f000 f868 	bl	80107b4 <__malloc_lock>
 80106e4:	f8d8 3000 	ldr.w	r3, [r8]
 80106e8:	461c      	mov	r4, r3
 80106ea:	bb5c      	cbnz	r4, 8010744 <_malloc_r+0x90>
 80106ec:	4629      	mov	r1, r5
 80106ee:	4638      	mov	r0, r7
 80106f0:	f7ff ffc0 	bl	8010674 <sbrk_aligned>
 80106f4:	1c43      	adds	r3, r0, #1
 80106f6:	4604      	mov	r4, r0
 80106f8:	d155      	bne.n	80107a6 <_malloc_r+0xf2>
 80106fa:	f8d8 4000 	ldr.w	r4, [r8]
 80106fe:	4626      	mov	r6, r4
 8010700:	2e00      	cmp	r6, #0
 8010702:	d145      	bne.n	8010790 <_malloc_r+0xdc>
 8010704:	2c00      	cmp	r4, #0
 8010706:	d048      	beq.n	801079a <_malloc_r+0xe6>
 8010708:	6823      	ldr	r3, [r4, #0]
 801070a:	4631      	mov	r1, r6
 801070c:	4638      	mov	r0, r7
 801070e:	eb04 0903 	add.w	r9, r4, r3
 8010712:	f000 f941 	bl	8010998 <_sbrk_r>
 8010716:	4581      	cmp	r9, r0
 8010718:	d13f      	bne.n	801079a <_malloc_r+0xe6>
 801071a:	6821      	ldr	r1, [r4, #0]
 801071c:	1a6d      	subs	r5, r5, r1
 801071e:	4629      	mov	r1, r5
 8010720:	4638      	mov	r0, r7
 8010722:	f7ff ffa7 	bl	8010674 <sbrk_aligned>
 8010726:	3001      	adds	r0, #1
 8010728:	d037      	beq.n	801079a <_malloc_r+0xe6>
 801072a:	6823      	ldr	r3, [r4, #0]
 801072c:	442b      	add	r3, r5
 801072e:	6023      	str	r3, [r4, #0]
 8010730:	f8d8 3000 	ldr.w	r3, [r8]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d038      	beq.n	80107aa <_malloc_r+0xf6>
 8010738:	685a      	ldr	r2, [r3, #4]
 801073a:	42a2      	cmp	r2, r4
 801073c:	d12b      	bne.n	8010796 <_malloc_r+0xe2>
 801073e:	2200      	movs	r2, #0
 8010740:	605a      	str	r2, [r3, #4]
 8010742:	e00f      	b.n	8010764 <_malloc_r+0xb0>
 8010744:	6822      	ldr	r2, [r4, #0]
 8010746:	1b52      	subs	r2, r2, r5
 8010748:	d41f      	bmi.n	801078a <_malloc_r+0xd6>
 801074a:	2a0b      	cmp	r2, #11
 801074c:	d917      	bls.n	801077e <_malloc_r+0xca>
 801074e:	1961      	adds	r1, r4, r5
 8010750:	42a3      	cmp	r3, r4
 8010752:	6025      	str	r5, [r4, #0]
 8010754:	bf18      	it	ne
 8010756:	6059      	strne	r1, [r3, #4]
 8010758:	6863      	ldr	r3, [r4, #4]
 801075a:	bf08      	it	eq
 801075c:	f8c8 1000 	streq.w	r1, [r8]
 8010760:	5162      	str	r2, [r4, r5]
 8010762:	604b      	str	r3, [r1, #4]
 8010764:	4638      	mov	r0, r7
 8010766:	f104 060b 	add.w	r6, r4, #11
 801076a:	f000 f829 	bl	80107c0 <__malloc_unlock>
 801076e:	f026 0607 	bic.w	r6, r6, #7
 8010772:	1d23      	adds	r3, r4, #4
 8010774:	1af2      	subs	r2, r6, r3
 8010776:	d0ae      	beq.n	80106d6 <_malloc_r+0x22>
 8010778:	1b9b      	subs	r3, r3, r6
 801077a:	50a3      	str	r3, [r4, r2]
 801077c:	e7ab      	b.n	80106d6 <_malloc_r+0x22>
 801077e:	42a3      	cmp	r3, r4
 8010780:	6862      	ldr	r2, [r4, #4]
 8010782:	d1dd      	bne.n	8010740 <_malloc_r+0x8c>
 8010784:	f8c8 2000 	str.w	r2, [r8]
 8010788:	e7ec      	b.n	8010764 <_malloc_r+0xb0>
 801078a:	4623      	mov	r3, r4
 801078c:	6864      	ldr	r4, [r4, #4]
 801078e:	e7ac      	b.n	80106ea <_malloc_r+0x36>
 8010790:	4634      	mov	r4, r6
 8010792:	6876      	ldr	r6, [r6, #4]
 8010794:	e7b4      	b.n	8010700 <_malloc_r+0x4c>
 8010796:	4613      	mov	r3, r2
 8010798:	e7cc      	b.n	8010734 <_malloc_r+0x80>
 801079a:	230c      	movs	r3, #12
 801079c:	603b      	str	r3, [r7, #0]
 801079e:	4638      	mov	r0, r7
 80107a0:	f000 f80e 	bl	80107c0 <__malloc_unlock>
 80107a4:	e797      	b.n	80106d6 <_malloc_r+0x22>
 80107a6:	6025      	str	r5, [r4, #0]
 80107a8:	e7dc      	b.n	8010764 <_malloc_r+0xb0>
 80107aa:	605b      	str	r3, [r3, #4]
 80107ac:	deff      	udf	#255	; 0xff
 80107ae:	bf00      	nop
 80107b0:	24001718 	.word	0x24001718

080107b4 <__malloc_lock>:
 80107b4:	4801      	ldr	r0, [pc, #4]	; (80107bc <__malloc_lock+0x8>)
 80107b6:	f7ff bf06 	b.w	80105c6 <__retarget_lock_acquire_recursive>
 80107ba:	bf00      	nop
 80107bc:	24001714 	.word	0x24001714

080107c0 <__malloc_unlock>:
 80107c0:	4801      	ldr	r0, [pc, #4]	; (80107c8 <__malloc_unlock+0x8>)
 80107c2:	f7ff bf01 	b.w	80105c8 <__retarget_lock_release_recursive>
 80107c6:	bf00      	nop
 80107c8:	24001714 	.word	0x24001714

080107cc <__sflush_r>:
 80107cc:	898a      	ldrh	r2, [r1, #12]
 80107ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107d2:	4605      	mov	r5, r0
 80107d4:	0710      	lsls	r0, r2, #28
 80107d6:	460c      	mov	r4, r1
 80107d8:	d458      	bmi.n	801088c <__sflush_r+0xc0>
 80107da:	684b      	ldr	r3, [r1, #4]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	dc05      	bgt.n	80107ec <__sflush_r+0x20>
 80107e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	dc02      	bgt.n	80107ec <__sflush_r+0x20>
 80107e6:	2000      	movs	r0, #0
 80107e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107ee:	2e00      	cmp	r6, #0
 80107f0:	d0f9      	beq.n	80107e6 <__sflush_r+0x1a>
 80107f2:	2300      	movs	r3, #0
 80107f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80107f8:	682f      	ldr	r7, [r5, #0]
 80107fa:	6a21      	ldr	r1, [r4, #32]
 80107fc:	602b      	str	r3, [r5, #0]
 80107fe:	d032      	beq.n	8010866 <__sflush_r+0x9a>
 8010800:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010802:	89a3      	ldrh	r3, [r4, #12]
 8010804:	075a      	lsls	r2, r3, #29
 8010806:	d505      	bpl.n	8010814 <__sflush_r+0x48>
 8010808:	6863      	ldr	r3, [r4, #4]
 801080a:	1ac0      	subs	r0, r0, r3
 801080c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801080e:	b10b      	cbz	r3, 8010814 <__sflush_r+0x48>
 8010810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010812:	1ac0      	subs	r0, r0, r3
 8010814:	2300      	movs	r3, #0
 8010816:	4602      	mov	r2, r0
 8010818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801081a:	6a21      	ldr	r1, [r4, #32]
 801081c:	4628      	mov	r0, r5
 801081e:	47b0      	blx	r6
 8010820:	1c43      	adds	r3, r0, #1
 8010822:	89a3      	ldrh	r3, [r4, #12]
 8010824:	d106      	bne.n	8010834 <__sflush_r+0x68>
 8010826:	6829      	ldr	r1, [r5, #0]
 8010828:	291d      	cmp	r1, #29
 801082a:	d82b      	bhi.n	8010884 <__sflush_r+0xb8>
 801082c:	4a29      	ldr	r2, [pc, #164]	; (80108d4 <__sflush_r+0x108>)
 801082e:	410a      	asrs	r2, r1
 8010830:	07d6      	lsls	r6, r2, #31
 8010832:	d427      	bmi.n	8010884 <__sflush_r+0xb8>
 8010834:	2200      	movs	r2, #0
 8010836:	6062      	str	r2, [r4, #4]
 8010838:	04d9      	lsls	r1, r3, #19
 801083a:	6922      	ldr	r2, [r4, #16]
 801083c:	6022      	str	r2, [r4, #0]
 801083e:	d504      	bpl.n	801084a <__sflush_r+0x7e>
 8010840:	1c42      	adds	r2, r0, #1
 8010842:	d101      	bne.n	8010848 <__sflush_r+0x7c>
 8010844:	682b      	ldr	r3, [r5, #0]
 8010846:	b903      	cbnz	r3, 801084a <__sflush_r+0x7e>
 8010848:	6560      	str	r0, [r4, #84]	; 0x54
 801084a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801084c:	602f      	str	r7, [r5, #0]
 801084e:	2900      	cmp	r1, #0
 8010850:	d0c9      	beq.n	80107e6 <__sflush_r+0x1a>
 8010852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010856:	4299      	cmp	r1, r3
 8010858:	d002      	beq.n	8010860 <__sflush_r+0x94>
 801085a:	4628      	mov	r0, r5
 801085c:	f7ff feb6 	bl	80105cc <_free_r>
 8010860:	2000      	movs	r0, #0
 8010862:	6360      	str	r0, [r4, #52]	; 0x34
 8010864:	e7c0      	b.n	80107e8 <__sflush_r+0x1c>
 8010866:	2301      	movs	r3, #1
 8010868:	4628      	mov	r0, r5
 801086a:	47b0      	blx	r6
 801086c:	1c41      	adds	r1, r0, #1
 801086e:	d1c8      	bne.n	8010802 <__sflush_r+0x36>
 8010870:	682b      	ldr	r3, [r5, #0]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d0c5      	beq.n	8010802 <__sflush_r+0x36>
 8010876:	2b1d      	cmp	r3, #29
 8010878:	d001      	beq.n	801087e <__sflush_r+0xb2>
 801087a:	2b16      	cmp	r3, #22
 801087c:	d101      	bne.n	8010882 <__sflush_r+0xb6>
 801087e:	602f      	str	r7, [r5, #0]
 8010880:	e7b1      	b.n	80107e6 <__sflush_r+0x1a>
 8010882:	89a3      	ldrh	r3, [r4, #12]
 8010884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010888:	81a3      	strh	r3, [r4, #12]
 801088a:	e7ad      	b.n	80107e8 <__sflush_r+0x1c>
 801088c:	690f      	ldr	r7, [r1, #16]
 801088e:	2f00      	cmp	r7, #0
 8010890:	d0a9      	beq.n	80107e6 <__sflush_r+0x1a>
 8010892:	0793      	lsls	r3, r2, #30
 8010894:	680e      	ldr	r6, [r1, #0]
 8010896:	bf08      	it	eq
 8010898:	694b      	ldreq	r3, [r1, #20]
 801089a:	600f      	str	r7, [r1, #0]
 801089c:	bf18      	it	ne
 801089e:	2300      	movne	r3, #0
 80108a0:	eba6 0807 	sub.w	r8, r6, r7
 80108a4:	608b      	str	r3, [r1, #8]
 80108a6:	f1b8 0f00 	cmp.w	r8, #0
 80108aa:	dd9c      	ble.n	80107e6 <__sflush_r+0x1a>
 80108ac:	6a21      	ldr	r1, [r4, #32]
 80108ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80108b0:	4643      	mov	r3, r8
 80108b2:	463a      	mov	r2, r7
 80108b4:	4628      	mov	r0, r5
 80108b6:	47b0      	blx	r6
 80108b8:	2800      	cmp	r0, #0
 80108ba:	dc06      	bgt.n	80108ca <__sflush_r+0xfe>
 80108bc:	89a3      	ldrh	r3, [r4, #12]
 80108be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108c2:	81a3      	strh	r3, [r4, #12]
 80108c4:	f04f 30ff 	mov.w	r0, #4294967295
 80108c8:	e78e      	b.n	80107e8 <__sflush_r+0x1c>
 80108ca:	4407      	add	r7, r0
 80108cc:	eba8 0800 	sub.w	r8, r8, r0
 80108d0:	e7e9      	b.n	80108a6 <__sflush_r+0xda>
 80108d2:	bf00      	nop
 80108d4:	dfbffffe 	.word	0xdfbffffe

080108d8 <_fflush_r>:
 80108d8:	b538      	push	{r3, r4, r5, lr}
 80108da:	690b      	ldr	r3, [r1, #16]
 80108dc:	4605      	mov	r5, r0
 80108de:	460c      	mov	r4, r1
 80108e0:	b913      	cbnz	r3, 80108e8 <_fflush_r+0x10>
 80108e2:	2500      	movs	r5, #0
 80108e4:	4628      	mov	r0, r5
 80108e6:	bd38      	pop	{r3, r4, r5, pc}
 80108e8:	b118      	cbz	r0, 80108f2 <_fflush_r+0x1a>
 80108ea:	6a03      	ldr	r3, [r0, #32]
 80108ec:	b90b      	cbnz	r3, 80108f2 <_fflush_r+0x1a>
 80108ee:	f7ff fcc9 	bl	8010284 <__sinit>
 80108f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d0f3      	beq.n	80108e2 <_fflush_r+0xa>
 80108fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80108fc:	07d0      	lsls	r0, r2, #31
 80108fe:	d404      	bmi.n	801090a <_fflush_r+0x32>
 8010900:	0599      	lsls	r1, r3, #22
 8010902:	d402      	bmi.n	801090a <_fflush_r+0x32>
 8010904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010906:	f7ff fe5e 	bl	80105c6 <__retarget_lock_acquire_recursive>
 801090a:	4628      	mov	r0, r5
 801090c:	4621      	mov	r1, r4
 801090e:	f7ff ff5d 	bl	80107cc <__sflush_r>
 8010912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010914:	07da      	lsls	r2, r3, #31
 8010916:	4605      	mov	r5, r0
 8010918:	d4e4      	bmi.n	80108e4 <_fflush_r+0xc>
 801091a:	89a3      	ldrh	r3, [r4, #12]
 801091c:	059b      	lsls	r3, r3, #22
 801091e:	d4e1      	bmi.n	80108e4 <_fflush_r+0xc>
 8010920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010922:	f7ff fe51 	bl	80105c8 <__retarget_lock_release_recursive>
 8010926:	e7dd      	b.n	80108e4 <_fflush_r+0xc>

08010928 <__swhatbuf_r>:
 8010928:	b570      	push	{r4, r5, r6, lr}
 801092a:	460c      	mov	r4, r1
 801092c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010930:	2900      	cmp	r1, #0
 8010932:	b096      	sub	sp, #88	; 0x58
 8010934:	4615      	mov	r5, r2
 8010936:	461e      	mov	r6, r3
 8010938:	da0d      	bge.n	8010956 <__swhatbuf_r+0x2e>
 801093a:	89a3      	ldrh	r3, [r4, #12]
 801093c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010940:	f04f 0100 	mov.w	r1, #0
 8010944:	bf0c      	ite	eq
 8010946:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801094a:	2340      	movne	r3, #64	; 0x40
 801094c:	2000      	movs	r0, #0
 801094e:	6031      	str	r1, [r6, #0]
 8010950:	602b      	str	r3, [r5, #0]
 8010952:	b016      	add	sp, #88	; 0x58
 8010954:	bd70      	pop	{r4, r5, r6, pc}
 8010956:	466a      	mov	r2, sp
 8010958:	f000 f80c 	bl	8010974 <_fstat_r>
 801095c:	2800      	cmp	r0, #0
 801095e:	dbec      	blt.n	801093a <__swhatbuf_r+0x12>
 8010960:	9901      	ldr	r1, [sp, #4]
 8010962:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010966:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801096a:	4259      	negs	r1, r3
 801096c:	4159      	adcs	r1, r3
 801096e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010972:	e7eb      	b.n	801094c <__swhatbuf_r+0x24>

08010974 <_fstat_r>:
 8010974:	b538      	push	{r3, r4, r5, lr}
 8010976:	4d07      	ldr	r5, [pc, #28]	; (8010994 <_fstat_r+0x20>)
 8010978:	2300      	movs	r3, #0
 801097a:	4604      	mov	r4, r0
 801097c:	4608      	mov	r0, r1
 801097e:	4611      	mov	r1, r2
 8010980:	602b      	str	r3, [r5, #0]
 8010982:	f7f1 ffed 	bl	8002960 <_fstat>
 8010986:	1c43      	adds	r3, r0, #1
 8010988:	d102      	bne.n	8010990 <_fstat_r+0x1c>
 801098a:	682b      	ldr	r3, [r5, #0]
 801098c:	b103      	cbz	r3, 8010990 <_fstat_r+0x1c>
 801098e:	6023      	str	r3, [r4, #0]
 8010990:	bd38      	pop	{r3, r4, r5, pc}
 8010992:	bf00      	nop
 8010994:	24001710 	.word	0x24001710

08010998 <_sbrk_r>:
 8010998:	b538      	push	{r3, r4, r5, lr}
 801099a:	4d06      	ldr	r5, [pc, #24]	; (80109b4 <_sbrk_r+0x1c>)
 801099c:	2300      	movs	r3, #0
 801099e:	4604      	mov	r4, r0
 80109a0:	4608      	mov	r0, r1
 80109a2:	602b      	str	r3, [r5, #0]
 80109a4:	f7f2 fc62 	bl	800326c <_sbrk>
 80109a8:	1c43      	adds	r3, r0, #1
 80109aa:	d102      	bne.n	80109b2 <_sbrk_r+0x1a>
 80109ac:	682b      	ldr	r3, [r5, #0]
 80109ae:	b103      	cbz	r3, 80109b2 <_sbrk_r+0x1a>
 80109b0:	6023      	str	r3, [r4, #0]
 80109b2:	bd38      	pop	{r3, r4, r5, pc}
 80109b4:	24001710 	.word	0x24001710

080109b8 <_init>:
 80109b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ba:	bf00      	nop
 80109bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109be:	bc08      	pop	{r3}
 80109c0:	469e      	mov	lr, r3
 80109c2:	4770      	bx	lr

080109c4 <_fini>:
 80109c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109c6:	bf00      	nop
 80109c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109ca:	bc08      	pop	{r3}
 80109cc:	469e      	mov	lr, r3
 80109ce:	4770      	bx	lr
